_ZN11ArgsManagerD2Ev:
  110|      2|ArgsManager::~ArgsManager() = default;

_Z17internal_bswap_32j:
   54|  4.77M|{
   55|  4.77M|#ifdef bitcoin_builtin_bswap32
   56|  4.77M|    return bitcoin_builtin_bswap32(x);
  ------------------
  |  |   24|  4.77M|#      define bitcoin_builtin_bswap32(x) __builtin_bswap32(x)
  ------------------
   57|       |#else
   58|       |    return (((x & 0xff000000U) >> 24) | ((x & 0x00ff0000U) >>  8) |
   59|       |            ((x & 0x0000ff00U) <<  8) | ((x & 0x000000ffU) << 24));
   60|       |#endif
   61|  4.77M|}
_Z17internal_bswap_64m:
   64|  2.09M|{
   65|  2.09M|#ifdef bitcoin_builtin_bswap64
   66|  2.09M|    return bitcoin_builtin_bswap64(x);
  ------------------
  |  |   27|  2.09M|#      define bitcoin_builtin_bswap64(x) __builtin_bswap64(x)
  ------------------
   67|       |#else
   68|       |     return (((x & 0xff00000000000000ull) >> 56)
   69|       |          | ((x & 0x00ff000000000000ull) >> 40)
   70|       |          | ((x & 0x0000ff0000000000ull) >> 24)
   71|       |          | ((x & 0x000000ff00000000ull) >> 8)
   72|       |          | ((x & 0x00000000ff000000ull) << 8)
   73|       |          | ((x & 0x0000000000ff0000ull) << 24)
   74|       |          | ((x & 0x000000000000ff00ull) << 40)
   75|       |          | ((x & 0x00000000000000ffull) << 56));
   76|       |#endif
   77|  2.09M|}

_Z16htole16_internalt:
   19|  8.29k|{
   20|       |    if constexpr (std::endian::native == std::endian::big) return internal_bswap_16(host_16bits);
   21|  8.29k|        else return host_16bits;
   22|  8.29k|}
_Z16le16toh_internalt:
   29|  2.07k|{
   30|       |    if constexpr (std::endian::native == std::endian::big) return internal_bswap_16(little_endian_16bits);
   31|  2.07k|        else return little_endian_16bits;
   32|  2.07k|}
_Z16htole64_internalm:
   59|   139k|{
   60|       |    if constexpr (std::endian::native == std::endian::big) return internal_bswap_64(host_64bits);
   61|   139k|        else return host_64bits;
   62|   139k|}
_Z16be32toh_internalj:
   44|  3.67M|{
   45|  3.67M|    if constexpr (std::endian::native == std::endian::little) return internal_bswap_32(big_endian_32bits);
   46|       |        else return big_endian_32bits;
   47|  3.67M|}
_Z16htobe32_internalj:
   34|  1.10M|{
   35|  1.10M|    if constexpr (std::endian::native == std::endian::little) return internal_bswap_32(host_32bits);
   36|       |        else return host_32bits;
   37|  1.10M|}
_Z16be64toh_internalm:
   64|  1.49M|{
   65|  1.49M|    if constexpr (std::endian::native == std::endian::little) return internal_bswap_64(big_endian_64bits);
   66|       |        else return big_endian_64bits;
   67|  1.49M|}
_Z16htobe64_internalm:
   54|   603k|{
   55|   603k|    if constexpr (std::endian::native == std::endian::little) return internal_bswap_64(host_64bits);
   56|       |        else return host_64bits;
   57|   603k|}
_Z16htole32_internalj:
   39|   260M|{
   40|       |    if constexpr (std::endian::native == std::endian::big) return internal_bswap_32(host_32bits);
   41|   260M|        else return host_32bits;
   42|   260M|}
_Z16le32toh_internalj:
   49|   586M|{
   50|       |    if constexpr (std::endian::native == std::endian::big) return internal_bswap_32(little_endian_32bits);
   51|   586M|        else return little_endian_32bits;
   52|   586M|}

_ZN15ChaCha20Aligned6SetKeyENSt3__14spanIKSt4byteLm18446744073709551615EEE:
   26|  72.4k|{
   27|  72.4k|    assert(key.size() == KEYLEN);
  ------------------
  |  Branch (27:5): [True: 72.4k, False: 0]
  ------------------
   28|  72.4k|    input[0] = ReadLE32(key.data() + 0);
   29|  72.4k|    input[1] = ReadLE32(key.data() + 4);
   30|  72.4k|    input[2] = ReadLE32(key.data() + 8);
   31|  72.4k|    input[3] = ReadLE32(key.data() + 12);
   32|  72.4k|    input[4] = ReadLE32(key.data() + 16);
   33|  72.4k|    input[5] = ReadLE32(key.data() + 20);
   34|  72.4k|    input[6] = ReadLE32(key.data() + 24);
   35|  72.4k|    input[7] = ReadLE32(key.data() + 28);
   36|  72.4k|    input[8] = 0;
   37|  72.4k|    input[9] = 0;
   38|  72.4k|    input[10] = 0;
   39|  72.4k|    input[11] = 0;
   40|  72.4k|}
_ZN15ChaCha20AlignedD2Ev:
   43|  72.4k|{
   44|  72.4k|    memory_cleanse(input, sizeof(input));
   45|  72.4k|}
_ZN15ChaCha20AlignedC2ENSt3__14spanIKSt4byteLm18446744073709551615EEE:
   48|  72.4k|{
   49|  72.4k|    SetKey(key);
   50|  72.4k|}
_ZN15ChaCha20Aligned4SeekENSt3__14pairIjmEEj:
   53|   105k|{
   54|   105k|    input[8] = block_counter;
   55|   105k|    input[9] = nonce.first;
   56|   105k|    input[10] = nonce.second;
   57|   105k|    input[11] = nonce.second >> 32;
   58|   105k|}
_ZN8ChaCha209KeystreamENSt3__14spanISt4byteLm18446744073709551615EEE:
  283|  80.2k|{
  284|  80.2k|    if (out.empty()) return;
  ------------------
  |  Branch (284:9): [True: 0, False: 80.2k]
  ------------------
  285|  80.2k|    if (m_bufleft) {
  ------------------
  |  Branch (285:9): [True: 5.19k, False: 75.0k]
  ------------------
  286|  5.19k|        unsigned reuse = std::min<size_t>(m_bufleft, out.size());
  287|  5.19k|        std::copy(m_buffer.end() - m_bufleft, m_buffer.end() - m_bufleft + reuse, out.begin());
  288|  5.19k|        m_bufleft -= reuse;
  289|  5.19k|        out = out.subspan(reuse);
  290|  5.19k|    }
  291|  80.2k|    if (out.size() >= m_aligned.BLOCKLEN) {
  ------------------
  |  Branch (291:9): [True: 69.8k, False: 10.3k]
  ------------------
  292|  69.8k|        size_t blocks = out.size() / m_aligned.BLOCKLEN;
  293|  69.8k|        m_aligned.Keystream(out.first(blocks * m_aligned.BLOCKLEN));
  294|  69.8k|        out = out.subspan(blocks * m_aligned.BLOCKLEN);
  295|  69.8k|    }
  296|  80.2k|    if (!out.empty()) {
  ------------------
  |  Branch (296:9): [True: 5.19k, False: 75.0k]
  ------------------
  297|  5.19k|        m_aligned.Keystream(m_buffer);
  298|  5.19k|        std::copy(m_buffer.begin(), m_buffer.begin() + out.size(), out.begin());
  299|  5.19k|        m_bufleft = m_aligned.BLOCKLEN - out.size();
  300|  5.19k|    }
  301|  80.2k|}
_ZN8ChaCha205CryptENSt3__14spanIKSt4byteLm18446744073709551615EEENS1_IS2_Lm18446744073709551615EEE:
  304|   137k|{
  305|   137k|    assert(input.size() == output.size());
  ------------------
  |  Branch (305:5): [True: 137k, False: 0]
  ------------------
  306|       |
  307|   137k|    if (!input.size()) return;
  ------------------
  |  Branch (307:9): [True: 68.9k, False: 68.9k]
  ------------------
  308|  68.9k|    if (m_bufleft) {
  ------------------
  |  Branch (308:9): [True: 0, False: 68.9k]
  ------------------
  309|      0|        unsigned reuse = std::min<size_t>(m_bufleft, input.size());
  310|      0|        for (unsigned i = 0; i < reuse; i++) {
  ------------------
  |  Branch (310:30): [True: 0, False: 0]
  ------------------
  311|      0|            output[i] = input[i] ^ m_buffer[m_aligned.BLOCKLEN - m_bufleft + i];
  312|      0|        }
  313|      0|        m_bufleft -= reuse;
  314|      0|        output = output.subspan(reuse);
  315|      0|        input = input.subspan(reuse);
  316|      0|    }
  317|  68.9k|    if (input.size() >= m_aligned.BLOCKLEN) {
  ------------------
  |  Branch (317:9): [True: 64.0k, False: 4.90k]
  ------------------
  318|  64.0k|        size_t blocks = input.size() / m_aligned.BLOCKLEN;
  319|  64.0k|        m_aligned.Crypt(input.first(blocks * m_aligned.BLOCKLEN), output.first(blocks * m_aligned.BLOCKLEN));
  320|  64.0k|        output = output.subspan(blocks * m_aligned.BLOCKLEN);
  321|  64.0k|        input = input.subspan(blocks * m_aligned.BLOCKLEN);
  322|  64.0k|    }
  323|  68.9k|    if (!input.empty()) {
  ------------------
  |  Branch (323:9): [True: 62.8k, False: 6.15k]
  ------------------
  324|  62.8k|        m_aligned.Keystream(m_buffer);
  325|  2.07M|        for (unsigned i = 0; i < input.size(); i++) {
  ------------------
  |  Branch (325:30): [True: 2.01M, False: 62.8k]
  ------------------
  326|  2.01M|            output[i] = input[i] ^ m_buffer[i];
  327|  2.01M|        }
  328|  62.8k|        m_bufleft = m_aligned.BLOCKLEN - input.size();
  329|  62.8k|    }
  330|  68.9k|}
_ZN8ChaCha20D2Ev:
  333|  72.4k|{
  334|  72.4k|    memory_cleanse(m_buffer.data(), m_buffer.size());
  335|  72.4k|}
_ZN15ChaCha20Aligned9KeystreamENSt3__14spanISt4byteLm18446744073709551615EEE:
   61|   137k|{
   62|   137k|    std::byte* c = output.data();
   63|   137k|    size_t blocks = output.size() / BLOCKLEN;
   64|   137k|    assert(blocks * BLOCKLEN == output.size());
  ------------------
  |  Branch (64:5): [True: 137k, False: 0]
  ------------------
   65|       |
   66|   137k|    uint32_t x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15;
   67|   137k|    uint32_t j4, j5, j6, j7, j8, j9, j10, j11, j12, j13, j14, j15;
   68|       |
   69|   137k|    if (!blocks) return;
  ------------------
  |  Branch (69:9): [True: 0, False: 137k]
  ------------------
   70|       |
   71|   137k|    j4 = input[0];
   72|   137k|    j5 = input[1];
   73|   137k|    j6 = input[2];
   74|   137k|    j7 = input[3];
   75|   137k|    j8 = input[4];
   76|   137k|    j9 = input[5];
   77|   137k|    j10 = input[6];
   78|   137k|    j11 = input[7];
   79|   137k|    j12 = input[8];
   80|   137k|    j13 = input[9];
   81|   137k|    j14 = input[10];
   82|   137k|    j15 = input[11];
   83|       |
   84|   137k|    for (;;) {
   85|   137k|        x0 = 0x61707865;
   86|   137k|        x1 = 0x3320646e;
   87|   137k|        x2 = 0x79622d32;
   88|   137k|        x3 = 0x6b206574;
   89|   137k|        x4 = j4;
   90|   137k|        x5 = j5;
   91|   137k|        x6 = j6;
   92|   137k|        x7 = j7;
   93|   137k|        x8 = j8;
   94|   137k|        x9 = j9;
   95|   137k|        x10 = j10;
   96|   137k|        x11 = j11;
   97|   137k|        x12 = j12;
   98|   137k|        x13 = j13;
   99|   137k|        x14 = j14;
  100|   137k|        x15 = j15;
  101|       |
  102|       |        // The 20 inner ChaCha20 rounds are unrolled here for performance.
  103|   137k|        REPEAT10(
  ------------------
  |  |   23|   137k|#define REPEAT10(a) do { {a}; {a}; {a}; {a}; {a}; {a}; {a}; {a}; {a}; {a}; } while(0)
  |  |  ------------------
  |  |  |  Branch (23:84): [Folded, False: 137k]
  |  |  ------------------
  ------------------
  104|   137k|            QUARTERROUND( x0, x4, x8,x12);
  105|   137k|            QUARTERROUND( x1, x5, x9,x13);
  106|   137k|            QUARTERROUND( x2, x6,x10,x14);
  107|   137k|            QUARTERROUND( x3, x7,x11,x15);
  108|   137k|            QUARTERROUND( x0, x5,x10,x15);
  109|   137k|            QUARTERROUND( x1, x6,x11,x12);
  110|   137k|            QUARTERROUND( x2, x7, x8,x13);
  111|   137k|            QUARTERROUND( x3, x4, x9,x14);
  112|   137k|        );
  113|       |
  114|   137k|        x0 += 0x61707865;
  115|   137k|        x1 += 0x3320646e;
  116|   137k|        x2 += 0x79622d32;
  117|   137k|        x3 += 0x6b206574;
  118|   137k|        x4 += j4;
  119|   137k|        x5 += j5;
  120|   137k|        x6 += j6;
  121|   137k|        x7 += j7;
  122|   137k|        x8 += j8;
  123|   137k|        x9 += j9;
  124|   137k|        x10 += j10;
  125|   137k|        x11 += j11;
  126|   137k|        x12 += j12;
  127|   137k|        x13 += j13;
  128|   137k|        x14 += j14;
  129|   137k|        x15 += j15;
  130|       |
  131|   137k|        ++j12;
  132|   137k|        if (!j12) ++j13;
  ------------------
  |  Branch (132:13): [True: 0, False: 137k]
  ------------------
  133|       |
  134|   137k|        WriteLE32(c + 0, x0);
  135|   137k|        WriteLE32(c + 4, x1);
  136|   137k|        WriteLE32(c + 8, x2);
  137|   137k|        WriteLE32(c + 12, x3);
  138|   137k|        WriteLE32(c + 16, x4);
  139|   137k|        WriteLE32(c + 20, x5);
  140|   137k|        WriteLE32(c + 24, x6);
  141|   137k|        WriteLE32(c + 28, x7);
  142|   137k|        WriteLE32(c + 32, x8);
  143|   137k|        WriteLE32(c + 36, x9);
  144|   137k|        WriteLE32(c + 40, x10);
  145|   137k|        WriteLE32(c + 44, x11);
  146|   137k|        WriteLE32(c + 48, x12);
  147|   137k|        WriteLE32(c + 52, x13);
  148|   137k|        WriteLE32(c + 56, x14);
  149|   137k|        WriteLE32(c + 60, x15);
  150|       |
  151|   137k|        if (blocks == 1) {
  ------------------
  |  Branch (151:13): [True: 137k, False: 0]
  ------------------
  152|   137k|            input[8] = j12;
  153|   137k|            input[9] = j13;
  154|   137k|            return;
  155|   137k|        }
  156|      0|        blocks -= 1;
  157|      0|        c += BLOCKLEN;
  158|      0|    }
  159|   137k|}
_ZN15ChaCha20Aligned5CryptENSt3__14spanIKSt4byteLm18446744073709551615EEENS1_IS2_Lm18446744073709551615EEE:
  162|  64.0k|{
  163|  64.0k|    assert(in_bytes.size() == out_bytes.size());
  ------------------
  |  Branch (163:5): [True: 64.0k, False: 0]
  ------------------
  164|  64.0k|    const std::byte* m = in_bytes.data();
  165|  64.0k|    std::byte* c = out_bytes.data();
  166|  64.0k|    size_t blocks = out_bytes.size() / BLOCKLEN;
  167|  64.0k|    assert(blocks * BLOCKLEN == out_bytes.size());
  ------------------
  |  Branch (167:5): [True: 64.0k, False: 0]
  ------------------
  168|       |
  169|  64.0k|    uint32_t x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15;
  170|  64.0k|    uint32_t j4, j5, j6, j7, j8, j9, j10, j11, j12, j13, j14, j15;
  171|       |
  172|  64.0k|    if (!blocks) return;
  ------------------
  |  Branch (172:9): [True: 0, False: 64.0k]
  ------------------
  173|       |
  174|  64.0k|    j4 = input[0];
  175|  64.0k|    j5 = input[1];
  176|  64.0k|    j6 = input[2];
  177|  64.0k|    j7 = input[3];
  178|  64.0k|    j8 = input[4];
  179|  64.0k|    j9 = input[5];
  180|  64.0k|    j10 = input[6];
  181|  64.0k|    j11 = input[7];
  182|  64.0k|    j12 = input[8];
  183|  64.0k|    j13 = input[9];
  184|  64.0k|    j14 = input[10];
  185|  64.0k|    j15 = input[11];
  186|       |
  187|  16.1M|    for (;;) {
  188|  16.1M|        x0 = 0x61707865;
  189|  16.1M|        x1 = 0x3320646e;
  190|  16.1M|        x2 = 0x79622d32;
  191|  16.1M|        x3 = 0x6b206574;
  192|  16.1M|        x4 = j4;
  193|  16.1M|        x5 = j5;
  194|  16.1M|        x6 = j6;
  195|  16.1M|        x7 = j7;
  196|  16.1M|        x8 = j8;
  197|  16.1M|        x9 = j9;
  198|  16.1M|        x10 = j10;
  199|  16.1M|        x11 = j11;
  200|  16.1M|        x12 = j12;
  201|  16.1M|        x13 = j13;
  202|  16.1M|        x14 = j14;
  203|  16.1M|        x15 = j15;
  204|       |
  205|       |        // The 20 inner ChaCha20 rounds are unrolled here for performance.
  206|  16.1M|        REPEAT10(
  ------------------
  |  |   23|  16.1M|#define REPEAT10(a) do { {a}; {a}; {a}; {a}; {a}; {a}; {a}; {a}; {a}; {a}; } while(0)
  |  |  ------------------
  |  |  |  Branch (23:84): [Folded, False: 16.1M]
  |  |  ------------------
  ------------------
  207|  16.1M|            QUARTERROUND( x0, x4, x8,x12);
  208|  16.1M|            QUARTERROUND( x1, x5, x9,x13);
  209|  16.1M|            QUARTERROUND( x2, x6,x10,x14);
  210|  16.1M|            QUARTERROUND( x3, x7,x11,x15);
  211|  16.1M|            QUARTERROUND( x0, x5,x10,x15);
  212|  16.1M|            QUARTERROUND( x1, x6,x11,x12);
  213|  16.1M|            QUARTERROUND( x2, x7, x8,x13);
  214|  16.1M|            QUARTERROUND( x3, x4, x9,x14);
  215|  16.1M|        );
  216|       |
  217|  16.1M|        x0 += 0x61707865;
  218|  16.1M|        x1 += 0x3320646e;
  219|  16.1M|        x2 += 0x79622d32;
  220|  16.1M|        x3 += 0x6b206574;
  221|  16.1M|        x4 += j4;
  222|  16.1M|        x5 += j5;
  223|  16.1M|        x6 += j6;
  224|  16.1M|        x7 += j7;
  225|  16.1M|        x8 += j8;
  226|  16.1M|        x9 += j9;
  227|  16.1M|        x10 += j10;
  228|  16.1M|        x11 += j11;
  229|  16.1M|        x12 += j12;
  230|  16.1M|        x13 += j13;
  231|  16.1M|        x14 += j14;
  232|  16.1M|        x15 += j15;
  233|       |
  234|  16.1M|        x0 ^= ReadLE32(m + 0);
  235|  16.1M|        x1 ^= ReadLE32(m + 4);
  236|  16.1M|        x2 ^= ReadLE32(m + 8);
  237|  16.1M|        x3 ^= ReadLE32(m + 12);
  238|  16.1M|        x4 ^= ReadLE32(m + 16);
  239|  16.1M|        x5 ^= ReadLE32(m + 20);
  240|  16.1M|        x6 ^= ReadLE32(m + 24);
  241|  16.1M|        x7 ^= ReadLE32(m + 28);
  242|  16.1M|        x8 ^= ReadLE32(m + 32);
  243|  16.1M|        x9 ^= ReadLE32(m + 36);
  244|  16.1M|        x10 ^= ReadLE32(m + 40);
  245|  16.1M|        x11 ^= ReadLE32(m + 44);
  246|  16.1M|        x12 ^= ReadLE32(m + 48);
  247|  16.1M|        x13 ^= ReadLE32(m + 52);
  248|  16.1M|        x14 ^= ReadLE32(m + 56);
  249|  16.1M|        x15 ^= ReadLE32(m + 60);
  250|       |
  251|  16.1M|        ++j12;
  252|  16.1M|        if (!j12) ++j13;
  ------------------
  |  Branch (252:13): [True: 0, False: 16.1M]
  ------------------
  253|       |
  254|  16.1M|        WriteLE32(c + 0, x0);
  255|  16.1M|        WriteLE32(c + 4, x1);
  256|  16.1M|        WriteLE32(c + 8, x2);
  257|  16.1M|        WriteLE32(c + 12, x3);
  258|  16.1M|        WriteLE32(c + 16, x4);
  259|  16.1M|        WriteLE32(c + 20, x5);
  260|  16.1M|        WriteLE32(c + 24, x6);
  261|  16.1M|        WriteLE32(c + 28, x7);
  262|  16.1M|        WriteLE32(c + 32, x8);
  263|  16.1M|        WriteLE32(c + 36, x9);
  264|  16.1M|        WriteLE32(c + 40, x10);
  265|  16.1M|        WriteLE32(c + 44, x11);
  266|  16.1M|        WriteLE32(c + 48, x12);
  267|  16.1M|        WriteLE32(c + 52, x13);
  268|  16.1M|        WriteLE32(c + 56, x14);
  269|  16.1M|        WriteLE32(c + 60, x15);
  270|       |
  271|  16.1M|        if (blocks == 1) {
  ------------------
  |  Branch (271:13): [True: 64.0k, False: 16.0M]
  ------------------
  272|  64.0k|            input[8] = j12;
  273|  64.0k|            input[9] = j13;
  274|  64.0k|            return;
  275|  64.0k|        }
  276|  16.0M|        blocks -= 1;
  277|  16.0M|        c += BLOCKLEN;
  278|  16.0M|        m += BLOCKLEN;
  279|  16.0M|    }
  280|  64.0k|}

_ZN8ChaCha20C2ENSt3__14spanIKSt4byteLm18446744073709551615EEE:
   92|  72.4k|    ChaCha20(std::span<const std::byte> key) noexcept : m_aligned(key) {}
_ZN8ChaCha204SeekENSt3__14pairIjmEEj:
  105|   105k|    {
  106|   105k|        m_aligned.Seek(nonce, block_counter);
  107|   105k|        m_bufleft = 0;
  108|   105k|    }

_ZN20AEADChaCha20Poly1305C2ENSt3__14spanIKSt4byteLm18446744073709551615EEE:
   16|  69.8k|AEADChaCha20Poly1305::AEADChaCha20Poly1305(std::span<const std::byte> key) noexcept : m_chacha20(key)
   17|  69.8k|{
   18|       |    assert(key.size() == KEYLEN);
  ------------------
  |  Branch (18:5): [True: 69.8k, False: 0]
  ------------------
   19|  69.8k|}
_ZN20AEADChaCha20Poly13057EncryptENSt3__14spanIKSt4byteLm18446744073709551615EEES4_S4_NS0_4pairIjmEENS1_IS2_Lm18446744073709551615EEE:
   70|  35.2k|{
   71|  35.2k|    assert(cipher.size() == plain1.size() + plain2.size() + EXPANSION);
  ------------------
  |  Branch (71:5): [True: 35.2k, False: 0]
  ------------------
   72|       |
   73|       |    // Encrypt using ChaCha20 (starting at block 1).
   74|  35.2k|    m_chacha20.Seek(nonce, 1);
   75|  35.2k|    m_chacha20.Crypt(plain1, cipher.first(plain1.size()));
   76|  35.2k|    m_chacha20.Crypt(plain2, cipher.subspan(plain1.size()).first(plain2.size()));
   77|       |
   78|       |    // Seek to block 0, and compute tag using key drawn from there.
   79|  35.2k|    m_chacha20.Seek(nonce, 0);
   80|  35.2k|    ComputeTag(m_chacha20, aad, cipher.first(cipher.size() - EXPANSION), cipher.last(EXPANSION));
   81|  35.2k|}
_ZN20AEADChaCha20Poly13057DecryptENSt3__14spanIKSt4byteLm18446744073709551615EEES4_NS0_4pairIjmEENS1_IS2_Lm18446744073709551615EEES7_:
   84|  34.6k|{
   85|  34.6k|    assert(cipher.size() == plain1.size() + plain2.size() + EXPANSION);
  ------------------
  |  Branch (85:5): [True: 34.6k, False: 0]
  ------------------
   86|       |
   87|       |    // Verify tag (using key drawn from block 0).
   88|  34.6k|    m_chacha20.Seek(nonce, 0);
   89|  34.6k|    std::byte expected_tag[EXPANSION];
   90|  34.6k|    ComputeTag(m_chacha20, aad, cipher.first(cipher.size() - EXPANSION), expected_tag);
   91|  34.6k|    if (timingsafe_bcmp_internal(UCharCast(expected_tag), UCharCast(cipher.last(EXPANSION).data()), EXPANSION)) return false;
  ------------------
  |  Branch (91:9): [True: 916, False: 33.7k]
  ------------------
   92|       |
   93|       |    // Decrypt (starting at block 1).
   94|  33.7k|    m_chacha20.Crypt(cipher.first(plain1.size()), plain1);
   95|  33.7k|    m_chacha20.Crypt(cipher.subspan(plain1.size()).first(plain2.size()), plain2);
   96|  33.7k|    return true;
   97|  34.6k|}
chacha20poly1305.cpp:_ZN12_GLOBAL__N_110ComputeTagER8ChaCha20NSt3__14spanIKSt4byteLm18446744073709551615EEES6_NS3_IS4_Lm18446744073709551615EEE:
   40|  69.8k|{
   41|  69.8k|    static const std::byte PADDING[16] = {{}};
   42|       |
   43|       |    // Get block of keystream (use a full 64 byte buffer to avoid the need for chacha20's own buffering).
   44|  69.8k|    std::byte first_block[ChaCha20Aligned::BLOCKLEN];
   45|  69.8k|    chacha20.Keystream(first_block);
   46|       |
   47|       |    // Use the first 32 bytes of the first keystream block as poly1305 key.
   48|  69.8k|    Poly1305 poly1305{std::span{first_block}.first(Poly1305::KEYLEN)};
   49|       |
   50|       |    // Compute tag:
   51|       |    // - Process the padded AAD with Poly1305.
   52|  69.8k|    const unsigned aad_padding_length = (16 - (aad.size() % 16)) % 16;
   53|  69.8k|    poly1305.Update(aad).Update(std::span{PADDING}.first(aad_padding_length));
   54|       |    // - Process the padded ciphertext with Poly1305.
   55|  69.8k|    const unsigned cipher_padding_length = (16 - (cipher.size() % 16)) % 16;
   56|  69.8k|    poly1305.Update(cipher).Update(std::span{PADDING}.first(cipher_padding_length));
   57|       |    // - Process the AAD and plaintext length with Poly1305.
   58|  69.8k|    std::byte length_desc[Poly1305::TAGLEN];
   59|  69.8k|    WriteLE64(length_desc, aad.size());
   60|  69.8k|    WriteLE64(length_desc + 8, cipher.size());
   61|  69.8k|    poly1305.Update(length_desc);
   62|       |
   63|       |    // Output tag.
   64|  69.8k|    poly1305.Finalize(tag);
   65|  69.8k|}
chacha20poly1305.cpp:_ZN12_GLOBAL__N_124timingsafe_bcmp_internalEPKhS1_m:
   30|  34.6k|{
   31|  34.6k|    const unsigned char *p1 = b1, *p2 = b2;
   32|  34.6k|    int ret = 0;
   33|   589k|    for (; n > 0; n--)
  ------------------
  |  Branch (33:12): [True: 554k, False: 34.6k]
  ------------------
   34|   554k|        ret |= *p1++ ^ *p2++;
   35|  34.6k|    return (ret != 0);
   36|  34.6k|}

_ZN20AEADChaCha20Poly13057DecryptENSt3__14spanIKSt4byteLm18446744073709551615EEES4_NS0_4pairIjmEENS1_IS2_Lm18446744073709551615EEE:
   57|  34.6k|    {
   58|  34.6k|        return Decrypt(cipher, aad, nonce, plain, {});
   59|  34.6k|    }
_ZN20AEADChaCha20Poly13057EncryptENSt3__14spanIKSt4byteLm18446744073709551615EEES4_NS0_4pairIjmEENS1_IS2_Lm18446744073709551615EEE:
   42|  35.2k|    {
   43|  35.2k|        Encrypt(plain, {}, aad, nonce, cipher);
   44|  35.2k|    }

_Z9WriteLE32ITk8ByteTypeSt4byteEvPT_j:
   51|   259M|{
   52|   259M|    uint32_t v = htole32_internal(x);
   53|   259M|    memcpy(ptr, &v, 4);
   54|   259M|}
_Z8ReadLE32ITk8ByteTypeSt4byteEjPKT_:
   28|   258M|{
   29|   258M|    uint32_t x;
   30|   258M|    memcpy(&x, ptr, 4);
   31|   258M|    return le32toh_internal(x);
   32|   258M|}
_Z9WriteLE64ITk8ByteTypeSt4byteEvPT_m:
   58|   139k|{
   59|   139k|    uint64_t v = htole64_internal(x);
   60|   139k|    memcpy(ptr, &v, 8);
   61|   139k|}
_Z8ReadBE32ITk8ByteTypehEjPKT_:
   73|  3.67M|{
   74|  3.67M|    uint32_t x;
   75|  3.67M|    memcpy(&x, ptr, 4);
   76|  3.67M|    return be32toh_internal(x);
   77|  3.67M|}
_Z9WriteBE32ITk8ByteTypehEvPT_j:
   96|  1.10M|{
   97|  1.10M|    uint32_t v = htobe32_internal(x);
   98|  1.10M|    memcpy(ptr, &v, 4);
   99|  1.10M|}
_Z8ReadBE64ITk8ByteTypehEmPKT_:
   81|  1.49M|{
   82|  1.49M|    uint64_t x;
   83|  1.49M|    memcpy(&x, ptr, 8);
   84|  1.49M|    return be64toh_internal(x);
   85|  1.49M|}
_Z9WriteBE64ITk8ByteTypehEvPT_m:
  103|   603k|{
  104|   603k|    uint64_t v = htobe64_internal(x);
  105|   603k|    memcpy(ptr, &v, 8);
  106|   603k|}
_Z8ReadLE32ITk8ByteTypehEjPKT_:
   28|   328M|{
   29|   328M|    uint32_t x;
   30|   328M|    memcpy(&x, ptr, 4);
   31|   328M|    return le32toh_internal(x);
   32|   328M|}
_Z9WriteLE32ITk8ByteTypehEvPT_j:
   51|   279k|{
   52|   279k|    uint32_t v = htole32_internal(x);
   53|   279k|    memcpy(ptr, &v, 4);
   54|   279k|}

_Z6HexStrNSt3__14spanIKhLm18446744073709551615EEE:
   30|  3.86k|{
   31|  3.86k|    std::string rv(s.size() * 2, '\0');
   32|  3.86k|    static constexpr auto byte_to_hex = CreateByteToHexMap();
   33|  3.86k|    static_assert(sizeof(byte_to_hex) == 512);
   34|       |
   35|  3.86k|    char* it = rv.data();
   36|   176k|    for (uint8_t v : s) {
  ------------------
  |  Branch (36:20): [True: 176k, False: 3.86k]
  ------------------
   37|   176k|        std::memcpy(it, byte_to_hex[v].data(), 2);
   38|   176k|        it += 2;
   39|   176k|    }
   40|       |
   41|  3.86k|    assert(it == rv.data() + rv.size());
  ------------------
  |  Branch (41:5): [True: 3.86k, False: 0]
  ------------------
   42|  3.86k|    return rv;
   43|  3.86k|}

_Z6HexStrNSt3__14spanIKSt4byteLm18446744073709551615EEE:
   19|  1.26k|inline std::string HexStr(const std::span<const std::byte> s) { return HexStr(MakeUCharSpan(s)); }

_ZN12CHMAC_SHA256C2EPKhm:
   10|  34.5k|{
   11|  34.5k|    unsigned char rkey[64];
   12|  34.5k|    if (keylen <= 64) {
  ------------------
  |  Branch (12:9): [True: 34.5k, False: 0]
  ------------------
   13|  34.5k|        memcpy(rkey, key, keylen);
   14|  34.5k|        memset(rkey + keylen, 0, 64 - keylen);
   15|  34.5k|    } else {
   16|      0|        CSHA256().Write(key, keylen).Finalize(rkey);
   17|      0|        memset(rkey + 32, 0, 32);
   18|      0|    }
   19|       |
   20|  2.24M|    for (int n = 0; n < 64; n++)
  ------------------
  |  Branch (20:21): [True: 2.20M, False: 34.5k]
  ------------------
   21|  2.20M|        rkey[n] ^= 0x5c;
   22|  34.5k|    outer.Write(rkey, 64);
   23|       |
   24|  2.24M|    for (int n = 0; n < 64; n++)
  ------------------
  |  Branch (24:21): [True: 2.20M, False: 34.5k]
  ------------------
   25|  2.20M|        rkey[n] ^= 0x5c ^ 0x36;
   26|  34.5k|    inner.Write(rkey, 64);
   27|  34.5k|}
_ZN12CHMAC_SHA2568FinalizeEPh:
   30|  34.5k|{
   31|  34.5k|    unsigned char temp[32];
   32|  34.5k|    inner.Finalize(temp);
   33|  34.5k|    outer.Write(temp, 32).Finalize(hash);
   34|  34.5k|}

_ZN12CHMAC_SHA2565WriteEPKhm:
   25|  34.5k|    {
   26|  34.5k|        inner.Write(data, len);
   27|  34.5k|        return *this;
   28|  34.5k|    }

_ZN12CHMAC_SHA512C2EPKhm:
   10|  20.7k|{
   11|  20.7k|    unsigned char rkey[128];
   12|  20.7k|    if (keylen <= 128) {
  ------------------
  |  Branch (12:9): [True: 20.7k, False: 0]
  ------------------
   13|  20.7k|        memcpy(rkey, key, keylen);
   14|  20.7k|        memset(rkey + keylen, 0, 128 - keylen);
   15|  20.7k|    } else {
   16|      0|        CSHA512().Write(key, keylen).Finalize(rkey);
   17|      0|        memset(rkey + 64, 0, 64);
   18|      0|    }
   19|       |
   20|  2.67M|    for (int n = 0; n < 128; n++)
  ------------------
  |  Branch (20:21): [True: 2.65M, False: 20.7k]
  ------------------
   21|  2.65M|        rkey[n] ^= 0x5c;
   22|  20.7k|    outer.Write(rkey, 128);
   23|       |
   24|  2.67M|    for (int n = 0; n < 128; n++)
  ------------------
  |  Branch (24:21): [True: 2.65M, False: 20.7k]
  ------------------
   25|  2.65M|        rkey[n] ^= 0x5c ^ 0x36;
   26|  20.7k|    inner.Write(rkey, 128);
   27|  20.7k|}
_ZN12CHMAC_SHA5128FinalizeEPh:
   30|  20.7k|{
   31|  20.7k|    unsigned char temp[64];
   32|  20.7k|    inner.Finalize(temp);
   33|  20.7k|    outer.Write(temp, 64).Finalize(hash);
   34|  20.7k|}

_ZN12CHMAC_SHA5125WriteEPKhm:
   25|  57.0k|    {
   26|  57.0k|        inner.Write(data, len);
   27|  57.0k|        return *this;
   28|  57.0k|    }

_ZN14poly1305_donna13poly1305_initEPNS_16poly1305_contextEPKh:
   15|  69.8k|void poly1305_init(poly1305_context *st, const unsigned char key[32]) noexcept {
   16|       |    /* r &= 0xffffffc0ffffffc0ffffffc0fffffff */
   17|  69.8k|    st->r[0] = (ReadLE32(&key[ 0])     ) & 0x3ffffff;
   18|  69.8k|    st->r[1] = (ReadLE32(&key[ 3]) >> 2) & 0x3ffff03;
   19|  69.8k|    st->r[2] = (ReadLE32(&key[ 6]) >> 4) & 0x3ffc0ff;
   20|  69.8k|    st->r[3] = (ReadLE32(&key[ 9]) >> 6) & 0x3f03fff;
   21|  69.8k|    st->r[4] = (ReadLE32(&key[12]) >> 8) & 0x00fffff;
   22|       |
   23|       |    /* h = 0 */
   24|  69.8k|    st->h[0] = 0;
   25|  69.8k|    st->h[1] = 0;
   26|  69.8k|    st->h[2] = 0;
   27|  69.8k|    st->h[3] = 0;
   28|  69.8k|    st->h[4] = 0;
   29|       |
   30|       |    /* save pad for later */
   31|  69.8k|    st->pad[0] = ReadLE32(&key[16]);
   32|  69.8k|    st->pad[1] = ReadLE32(&key[20]);
   33|  69.8k|    st->pad[2] = ReadLE32(&key[24]);
   34|  69.8k|    st->pad[3] = ReadLE32(&key[28]);
   35|       |
   36|  69.8k|    st->leftover = 0;
   37|  69.8k|    st->final = 0;
   38|  69.8k|}
_ZN14poly1305_donna15poly1305_finishEPNS_16poly1305_contextEPh:
  100|  69.8k|void poly1305_finish(poly1305_context *st, unsigned char mac[16]) noexcept {
  101|  69.8k|    uint32_t h0,h1,h2,h3,h4,c;
  102|  69.8k|    uint32_t g0,g1,g2,g3,g4;
  103|  69.8k|    uint64_t f;
  104|  69.8k|    uint32_t mask;
  105|       |
  106|       |    /* process the remaining block */
  107|  69.8k|    if (st->leftover) {
  ------------------
  |  Branch (107:9): [True: 0, False: 69.8k]
  ------------------
  108|      0|        size_t i = st->leftover;
  109|      0|        st->buffer[i++] = 1;
  110|      0|        for (; i < POLY1305_BLOCK_SIZE; i++) {
  ------------------
  |  |   14|      0|#define POLY1305_BLOCK_SIZE 16
  ------------------
  |  Branch (110:16): [True: 0, False: 0]
  ------------------
  111|      0|            st->buffer[i] = 0;
  112|      0|        }
  113|      0|        st->final = 1;
  114|      0|        poly1305_blocks(st, st->buffer, POLY1305_BLOCK_SIZE);
  ------------------
  |  |   14|      0|#define POLY1305_BLOCK_SIZE 16
  ------------------
  115|      0|    }
  116|       |
  117|       |    /* fully carry h */
  118|  69.8k|    h0 = st->h[0];
  119|  69.8k|    h1 = st->h[1];
  120|  69.8k|    h2 = st->h[2];
  121|  69.8k|    h3 = st->h[3];
  122|  69.8k|    h4 = st->h[4];
  123|       |
  124|  69.8k|                 c = h1 >> 26; h1 = h1 & 0x3ffffff;
  125|  69.8k|    h2 +=     c; c = h2 >> 26; h2 = h2 & 0x3ffffff;
  126|  69.8k|    h3 +=     c; c = h3 >> 26; h3 = h3 & 0x3ffffff;
  127|  69.8k|    h4 +=     c; c = h4 >> 26; h4 = h4 & 0x3ffffff;
  128|  69.8k|    h0 += c * 5; c = h0 >> 26; h0 = h0 & 0x3ffffff;
  129|  69.8k|    h1 +=     c;
  130|       |
  131|       |    /* compute h + -p */
  132|  69.8k|    g0 = h0 + 5; c = g0 >> 26; g0 &= 0x3ffffff;
  133|  69.8k|    g1 = h1 + c; c = g1 >> 26; g1 &= 0x3ffffff;
  134|  69.8k|    g2 = h2 + c; c = g2 >> 26; g2 &= 0x3ffffff;
  135|  69.8k|    g3 = h3 + c; c = g3 >> 26; g3 &= 0x3ffffff;
  136|  69.8k|    g4 = h4 + c - (1UL << 26);
  137|       |
  138|       |    /* select h if h < p, or h + -p if h >= p */
  139|  69.8k|    mask = (g4 >> ((sizeof(uint32_t) * 8) - 1)) - 1;
  140|  69.8k|    g0 &= mask;
  141|  69.8k|    g1 &= mask;
  142|  69.8k|    g2 &= mask;
  143|  69.8k|    g3 &= mask;
  144|  69.8k|    g4 &= mask;
  145|  69.8k|    mask = ~mask;
  146|  69.8k|    h0 = (h0 & mask) | g0;
  147|  69.8k|    h1 = (h1 & mask) | g1;
  148|  69.8k|    h2 = (h2 & mask) | g2;
  149|  69.8k|    h3 = (h3 & mask) | g3;
  150|  69.8k|    h4 = (h4 & mask) | g4;
  151|       |
  152|       |    /* h = h % (2^128) */
  153|  69.8k|    h0 = ((h0      ) | (h1 << 26)) & 0xffffffff;
  154|  69.8k|    h1 = ((h1 >>  6) | (h2 << 20)) & 0xffffffff;
  155|  69.8k|    h2 = ((h2 >> 12) | (h3 << 14)) & 0xffffffff;
  156|  69.8k|    h3 = ((h3 >> 18) | (h4 <<  8)) & 0xffffffff;
  157|       |
  158|       |    /* mac = (h + pad) % (2^128) */
  159|  69.8k|    f = (uint64_t)h0 + st->pad[0]            ; h0 = (uint32_t)f;
  160|  69.8k|    f = (uint64_t)h1 + st->pad[1] + (f >> 32); h1 = (uint32_t)f;
  161|  69.8k|    f = (uint64_t)h2 + st->pad[2] + (f >> 32); h2 = (uint32_t)f;
  162|  69.8k|    f = (uint64_t)h3 + st->pad[3] + (f >> 32); h3 = (uint32_t)f;
  163|       |
  164|  69.8k|    WriteLE32(mac +  0, h0);
  165|  69.8k|    WriteLE32(mac +  4, h1);
  166|  69.8k|    WriteLE32(mac +  8, h2);
  167|  69.8k|    WriteLE32(mac + 12, h3);
  168|       |
  169|       |    /* zero out the state */
  170|  69.8k|    st->h[0] = 0;
  171|  69.8k|    st->h[1] = 0;
  172|  69.8k|    st->h[2] = 0;
  173|  69.8k|    st->h[3] = 0;
  174|  69.8k|    st->h[4] = 0;
  175|  69.8k|    st->r[0] = 0;
  176|  69.8k|    st->r[1] = 0;
  177|  69.8k|    st->r[2] = 0;
  178|  69.8k|    st->r[3] = 0;
  179|  69.8k|    st->r[4] = 0;
  180|  69.8k|    st->pad[0] = 0;
  181|  69.8k|    st->pad[1] = 0;
  182|  69.8k|    st->pad[2] = 0;
  183|  69.8k|    st->pad[3] = 0;
  184|  69.8k|}
_ZN14poly1305_donna15poly1305_updateEPNS_16poly1305_contextEPKhm:
  186|   349k|void poly1305_update(poly1305_context *st, const unsigned char *m, size_t bytes) noexcept {
  187|   349k|    size_t i;
  188|       |
  189|       |    /* handle leftover */
  190|   349k|    if (st->leftover) {
  ------------------
  |  Branch (190:9): [True: 58.0k, False: 291k]
  ------------------
  191|  58.0k|        size_t want = (POLY1305_BLOCK_SIZE - st->leftover);
  ------------------
  |  |   14|  58.0k|#define POLY1305_BLOCK_SIZE 16
  ------------------
  192|  58.0k|        if (want > bytes) {
  ------------------
  |  Branch (192:13): [True: 0, False: 58.0k]
  ------------------
  193|      0|            want = bytes;
  194|      0|        }
  195|   500k|        for (i = 0; i < want; i++) {
  ------------------
  |  Branch (195:21): [True: 442k, False: 58.0k]
  ------------------
  196|   442k|            st->buffer[st->leftover + i] = m[i];
  197|   442k|        }
  198|  58.0k|        bytes -= want;
  199|  58.0k|        m += want;
  200|  58.0k|        st->leftover += want;
  201|  58.0k|        if (st->leftover < POLY1305_BLOCK_SIZE) return;
  ------------------
  |  |   14|  58.0k|#define POLY1305_BLOCK_SIZE 16
  ------------------
  |  Branch (201:13): [True: 0, False: 58.0k]
  ------------------
  202|  58.0k|        poly1305_blocks(st, st->buffer, POLY1305_BLOCK_SIZE);
  ------------------
  |  |   14|  58.0k|#define POLY1305_BLOCK_SIZE 16
  ------------------
  203|  58.0k|        st->leftover = 0;
  204|  58.0k|    }
  205|       |
  206|       |    /* process full blocks */
  207|   349k|    if (bytes >= POLY1305_BLOCK_SIZE) {
  ------------------
  |  |   14|   349k|#define POLY1305_BLOCK_SIZE 16
  ------------------
  |  Branch (207:9): [True: 149k, False: 200k]
  ------------------
  208|   149k|        size_t want = (bytes & ~(POLY1305_BLOCK_SIZE - 1));
  ------------------
  |  |   14|   149k|#define POLY1305_BLOCK_SIZE 16
  ------------------
  209|   149k|        poly1305_blocks(st, m, want);
  210|   149k|        m += want;
  211|   149k|        bytes -= want;
  212|   149k|    }
  213|       |
  214|       |    /* store leftover */
  215|   349k|    if (bytes) {
  ------------------
  |  Branch (215:9): [True: 58.0k, False: 291k]
  ------------------
  216|   544k|        for (i = 0; i < bytes; i++) {
  ------------------
  |  Branch (216:21): [True: 486k, False: 58.0k]
  ------------------
  217|   486k|            st->buffer[st->leftover + i] = m[i];
  218|   486k|        }
  219|  58.0k|        st->leftover += bytes;
  220|  58.0k|    }
  221|   349k|}
poly1305.cpp:_ZN14poly1305_donnaL15poly1305_blocksEPNS_16poly1305_contextEPKhm:
   40|   207k|static void poly1305_blocks(poly1305_context *st, const unsigned char *m, size_t bytes) noexcept {
   41|   207k|    const uint32_t hibit = (st->final) ? 0 : (1UL << 24); /* 1 << 128 */
  ------------------
  |  Branch (41:28): [True: 0, False: 207k]
  ------------------
   42|   207k|    uint32_t r0,r1,r2,r3,r4;
   43|   207k|    uint32_t s1,s2,s3,s4;
   44|   207k|    uint32_t h0,h1,h2,h3,h4;
   45|   207k|    uint64_t d0,d1,d2,d3,d4;
   46|   207k|    uint32_t c;
   47|       |
   48|   207k|    r0 = st->r[0];
   49|   207k|    r1 = st->r[1];
   50|   207k|    r2 = st->r[2];
   51|   207k|    r3 = st->r[3];
   52|   207k|    r4 = st->r[4];
   53|       |
   54|   207k|    s1 = r1 * 5;
   55|   207k|    s2 = r2 * 5;
   56|   207k|    s3 = r3 * 5;
   57|   207k|    s4 = r4 * 5;
   58|       |
   59|   207k|    h0 = st->h[0];
   60|   207k|    h1 = st->h[1];
   61|   207k|    h2 = st->h[2];
   62|   207k|    h3 = st->h[3];
   63|   207k|    h4 = st->h[4];
   64|       |
   65|  65.7M|    while (bytes >= POLY1305_BLOCK_SIZE) {
  ------------------
  |  |   14|  65.7M|#define POLY1305_BLOCK_SIZE 16
  ------------------
  |  Branch (65:12): [True: 65.5M, False: 207k]
  ------------------
   66|       |        /* h += m[i] */
   67|  65.5M|        h0 += (ReadLE32(m+ 0)     ) & 0x3ffffff;
   68|  65.5M|        h1 += (ReadLE32(m+ 3) >> 2) & 0x3ffffff;
   69|  65.5M|        h2 += (ReadLE32(m+ 6) >> 4) & 0x3ffffff;
   70|  65.5M|        h3 += (ReadLE32(m+ 9) >> 6) & 0x3ffffff;
   71|  65.5M|        h4 += (ReadLE32(m+12) >> 8) | hibit;
   72|       |
   73|       |        /* h *= r */
   74|  65.5M|        d0 = ((uint64_t)h0 * r0) + ((uint64_t)h1 * s4) + ((uint64_t)h2 * s3) + ((uint64_t)h3 * s2) + ((uint64_t)h4 * s1);
   75|  65.5M|        d1 = ((uint64_t)h0 * r1) + ((uint64_t)h1 * r0) + ((uint64_t)h2 * s4) + ((uint64_t)h3 * s3) + ((uint64_t)h4 * s2);
   76|  65.5M|        d2 = ((uint64_t)h0 * r2) + ((uint64_t)h1 * r1) + ((uint64_t)h2 * r0) + ((uint64_t)h3 * s4) + ((uint64_t)h4 * s3);
   77|  65.5M|        d3 = ((uint64_t)h0 * r3) + ((uint64_t)h1 * r2) + ((uint64_t)h2 * r1) + ((uint64_t)h3 * r0) + ((uint64_t)h4 * s4);
   78|  65.5M|        d4 = ((uint64_t)h0 * r4) + ((uint64_t)h1 * r3) + ((uint64_t)h2 * r2) + ((uint64_t)h3 * r1) + ((uint64_t)h4 * r0);
   79|       |
   80|       |        /* (partial) h %= p */
   81|  65.5M|                      c = (uint32_t)(d0 >> 26); h0 = (uint32_t)d0 & 0x3ffffff;
   82|  65.5M|        d1 += c;      c = (uint32_t)(d1 >> 26); h1 = (uint32_t)d1 & 0x3ffffff;
   83|  65.5M|        d2 += c;      c = (uint32_t)(d2 >> 26); h2 = (uint32_t)d2 & 0x3ffffff;
   84|  65.5M|        d3 += c;      c = (uint32_t)(d3 >> 26); h3 = (uint32_t)d3 & 0x3ffffff;
   85|  65.5M|        d4 += c;      c = (uint32_t)(d4 >> 26); h4 = (uint32_t)d4 & 0x3ffffff;
   86|  65.5M|        h0 += c * 5;  c =           (h0 >> 26); h0 =           h0 & 0x3ffffff;
   87|  65.5M|        h1 += c;
   88|       |
   89|  65.5M|        m += POLY1305_BLOCK_SIZE;
  ------------------
  |  |   14|  65.5M|#define POLY1305_BLOCK_SIZE 16
  ------------------
   90|  65.5M|        bytes -= POLY1305_BLOCK_SIZE;
  ------------------
  |  |   14|  65.5M|#define POLY1305_BLOCK_SIZE 16
  ------------------
   91|  65.5M|    }
   92|       |
   93|   207k|    st->h[0] = h0;
   94|   207k|    st->h[1] = h1;
   95|   207k|    st->h[2] = h2;
   96|   207k|    st->h[3] = h3;
   97|   207k|    st->h[4] = h4;
   98|   207k|}

_ZN8Poly1305C2ENSt3__14spanIKSt4byteLm18446744073709551615EEE:
   50|  69.8k|    {
   51|  69.8k|        assert(key.size() == KEYLEN);
  ------------------
  |  Branch (51:9): [True: 69.8k, False: 0]
  ------------------
   52|  69.8k|        poly1305_donna::poly1305_init(&m_ctx, UCharCast(key.data()));
   53|  69.8k|    }
_ZN8Poly13056UpdateENSt3__14spanIKSt4byteLm18446744073709551615EEE:
   57|   349k|    {
   58|   349k|        poly1305_donna::poly1305_update(&m_ctx, UCharCast(msg.data()), msg.size());
   59|   349k|        return *this;
   60|   349k|    }
_ZN8Poly13058FinalizeENSt3__14spanISt4byteLm18446744073709551615EEE:
   64|  69.8k|    {
   65|  69.8k|        assert(out.size() == TAGLEN);
  ------------------
  |  Branch (65:9): [True: 69.8k, False: 0]
  ------------------
   66|  69.8k|        poly1305_donna::poly1305_finish(&m_ctx, UCharCast(out.data()));
   67|  69.8k|    }

_ZN7CSHA256C2Ev:
  695|   136k|{
  696|   136k|    sha256::Initialize(s);
  697|   136k|}
_ZN7CSHA2565WriteEPKhm:
  700|   502k|{
  701|   502k|    const unsigned char* end = data + len;
  702|   502k|    size_t bufsize = bytes % 64;
  703|   502k|    if (bufsize && bufsize + len >= 64) {
  ------------------
  |  Branch (703:9): [True: 295k, False: 206k]
  |  Branch (703:20): [True: 160k, False: 134k]
  ------------------
  704|       |        // Fill the buffer, and process it.
  705|   160k|        memcpy(buf + bufsize, data, 64 - bufsize);
  706|   160k|        bytes += 64 - bufsize;
  707|   160k|        data += 64 - bufsize;
  708|   160k|        Transform(s, buf, 1);
  709|   160k|        bufsize = 0;
  710|   160k|    }
  711|   502k|    if (end - data >= 64) {
  ------------------
  |  Branch (711:9): [True: 69.0k, False: 432k]
  ------------------
  712|  69.0k|        size_t blocks = (end - data) / 64;
  713|  69.0k|        Transform(s, data, blocks);
  714|  69.0k|        data += 64 * blocks;
  715|  69.0k|        bytes += 64 * blocks;
  716|  69.0k|    }
  717|   502k|    if (end > data) {
  ------------------
  |  Branch (717:9): [True: 290k, False: 211k]
  ------------------
  718|       |        // Fill the buffer with what remains.
  719|   290k|        memcpy(buf + bufsize, data, end - data);
  720|   290k|        bytes += end - data;
  721|   290k|    }
  722|   502k|    return *this;
  723|   502k|}
_ZN7CSHA2568FinalizeEPh:
  726|   136k|{
  727|   136k|    static const unsigned char pad[64] = {0x80};
  728|   136k|    unsigned char sizedesc[8];
  729|   136k|    WriteBE64(sizedesc, bytes << 3);
  730|   136k|    Write(pad, 1 + ((119 - (bytes % 64)) % 64));
  731|   136k|    Write(sizedesc, 8);
  732|   136k|    WriteBE32(hash, s[0]);
  733|   136k|    WriteBE32(hash + 4, s[1]);
  734|   136k|    WriteBE32(hash + 8, s[2]);
  735|   136k|    WriteBE32(hash + 12, s[3]);
  736|   136k|    WriteBE32(hash + 16, s[4]);
  737|   136k|    WriteBE32(hash + 20, s[5]);
  738|   136k|    WriteBE32(hash + 24, s[6]);
  739|   136k|    WriteBE32(hash + 28, s[7]);
  740|   136k|}
sha256.cpp:_ZN12_GLOBAL__N_16sha2569TransformEPjPKhm:
  100|   229k|{
  101|   458k|    while (blocks--) {
  ------------------
  |  Branch (101:12): [True: 229k, False: 229k]
  ------------------
  102|   229k|        uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];
  103|   229k|        uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;
  104|       |
  105|   229k|        Round(a, b, c, d, e, f, g, h, 0x428a2f98 + (w0 = ReadBE32(chunk + 0)));
  106|   229k|        Round(h, a, b, c, d, e, f, g, 0x71374491 + (w1 = ReadBE32(chunk + 4)));
  107|   229k|        Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf + (w2 = ReadBE32(chunk + 8)));
  108|   229k|        Round(f, g, h, a, b, c, d, e, 0xe9b5dba5 + (w3 = ReadBE32(chunk + 12)));
  109|   229k|        Round(e, f, g, h, a, b, c, d, 0x3956c25b + (w4 = ReadBE32(chunk + 16)));
  110|   229k|        Round(d, e, f, g, h, a, b, c, 0x59f111f1 + (w5 = ReadBE32(chunk + 20)));
  111|   229k|        Round(c, d, e, f, g, h, a, b, 0x923f82a4 + (w6 = ReadBE32(chunk + 24)));
  112|   229k|        Round(b, c, d, e, f, g, h, a, 0xab1c5ed5 + (w7 = ReadBE32(chunk + 28)));
  113|   229k|        Round(a, b, c, d, e, f, g, h, 0xd807aa98 + (w8 = ReadBE32(chunk + 32)));
  114|   229k|        Round(h, a, b, c, d, e, f, g, 0x12835b01 + (w9 = ReadBE32(chunk + 36)));
  115|   229k|        Round(g, h, a, b, c, d, e, f, 0x243185be + (w10 = ReadBE32(chunk + 40)));
  116|   229k|        Round(f, g, h, a, b, c, d, e, 0x550c7dc3 + (w11 = ReadBE32(chunk + 44)));
  117|   229k|        Round(e, f, g, h, a, b, c, d, 0x72be5d74 + (w12 = ReadBE32(chunk + 48)));
  118|   229k|        Round(d, e, f, g, h, a, b, c, 0x80deb1fe + (w13 = ReadBE32(chunk + 52)));
  119|   229k|        Round(c, d, e, f, g, h, a, b, 0x9bdc06a7 + (w14 = ReadBE32(chunk + 56)));
  120|   229k|        Round(b, c, d, e, f, g, h, a, 0xc19bf174 + (w15 = ReadBE32(chunk + 60)));
  121|       |
  122|   229k|        Round(a, b, c, d, e, f, g, h, 0xe49b69c1 + (w0 += sigma1(w14) + w9 + sigma0(w1)));
  123|   229k|        Round(h, a, b, c, d, e, f, g, 0xefbe4786 + (w1 += sigma1(w15) + w10 + sigma0(w2)));
  124|   229k|        Round(g, h, a, b, c, d, e, f, 0x0fc19dc6 + (w2 += sigma1(w0) + w11 + sigma0(w3)));
  125|   229k|        Round(f, g, h, a, b, c, d, e, 0x240ca1cc + (w3 += sigma1(w1) + w12 + sigma0(w4)));
  126|   229k|        Round(e, f, g, h, a, b, c, d, 0x2de92c6f + (w4 += sigma1(w2) + w13 + sigma0(w5)));
  127|   229k|        Round(d, e, f, g, h, a, b, c, 0x4a7484aa + (w5 += sigma1(w3) + w14 + sigma0(w6)));
  128|   229k|        Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc + (w6 += sigma1(w4) + w15 + sigma0(w7)));
  129|   229k|        Round(b, c, d, e, f, g, h, a, 0x76f988da + (w7 += sigma1(w5) + w0 + sigma0(w8)));
  130|   229k|        Round(a, b, c, d, e, f, g, h, 0x983e5152 + (w8 += sigma1(w6) + w1 + sigma0(w9)));
  131|   229k|        Round(h, a, b, c, d, e, f, g, 0xa831c66d + (w9 += sigma1(w7) + w2 + sigma0(w10)));
  132|   229k|        Round(g, h, a, b, c, d, e, f, 0xb00327c8 + (w10 += sigma1(w8) + w3 + sigma0(w11)));
  133|   229k|        Round(f, g, h, a, b, c, d, e, 0xbf597fc7 + (w11 += sigma1(w9) + w4 + sigma0(w12)));
  134|   229k|        Round(e, f, g, h, a, b, c, d, 0xc6e00bf3 + (w12 += sigma1(w10) + w5 + sigma0(w13)));
  135|   229k|        Round(d, e, f, g, h, a, b, c, 0xd5a79147 + (w13 += sigma1(w11) + w6 + sigma0(w14)));
  136|   229k|        Round(c, d, e, f, g, h, a, b, 0x06ca6351 + (w14 += sigma1(w12) + w7 + sigma0(w15)));
  137|   229k|        Round(b, c, d, e, f, g, h, a, 0x14292967 + (w15 += sigma1(w13) + w8 + sigma0(w0)));
  138|       |
  139|   229k|        Round(a, b, c, d, e, f, g, h, 0x27b70a85 + (w0 += sigma1(w14) + w9 + sigma0(w1)));
  140|   229k|        Round(h, a, b, c, d, e, f, g, 0x2e1b2138 + (w1 += sigma1(w15) + w10 + sigma0(w2)));
  141|   229k|        Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc + (w2 += sigma1(w0) + w11 + sigma0(w3)));
  142|   229k|        Round(f, g, h, a, b, c, d, e, 0x53380d13 + (w3 += sigma1(w1) + w12 + sigma0(w4)));
  143|   229k|        Round(e, f, g, h, a, b, c, d, 0x650a7354 + (w4 += sigma1(w2) + w13 + sigma0(w5)));
  144|   229k|        Round(d, e, f, g, h, a, b, c, 0x766a0abb + (w5 += sigma1(w3) + w14 + sigma0(w6)));
  145|   229k|        Round(c, d, e, f, g, h, a, b, 0x81c2c92e + (w6 += sigma1(w4) + w15 + sigma0(w7)));
  146|   229k|        Round(b, c, d, e, f, g, h, a, 0x92722c85 + (w7 += sigma1(w5) + w0 + sigma0(w8)));
  147|   229k|        Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1 + (w8 += sigma1(w6) + w1 + sigma0(w9)));
  148|   229k|        Round(h, a, b, c, d, e, f, g, 0xa81a664b + (w9 += sigma1(w7) + w2 + sigma0(w10)));
  149|   229k|        Round(g, h, a, b, c, d, e, f, 0xc24b8b70 + (w10 += sigma1(w8) + w3 + sigma0(w11)));
  150|   229k|        Round(f, g, h, a, b, c, d, e, 0xc76c51a3 + (w11 += sigma1(w9) + w4 + sigma0(w12)));
  151|   229k|        Round(e, f, g, h, a, b, c, d, 0xd192e819 + (w12 += sigma1(w10) + w5 + sigma0(w13)));
  152|   229k|        Round(d, e, f, g, h, a, b, c, 0xd6990624 + (w13 += sigma1(w11) + w6 + sigma0(w14)));
  153|   229k|        Round(c, d, e, f, g, h, a, b, 0xf40e3585 + (w14 += sigma1(w12) + w7 + sigma0(w15)));
  154|   229k|        Round(b, c, d, e, f, g, h, a, 0x106aa070 + (w15 += sigma1(w13) + w8 + sigma0(w0)));
  155|       |
  156|   229k|        Round(a, b, c, d, e, f, g, h, 0x19a4c116 + (w0 += sigma1(w14) + w9 + sigma0(w1)));
  157|   229k|        Round(h, a, b, c, d, e, f, g, 0x1e376c08 + (w1 += sigma1(w15) + w10 + sigma0(w2)));
  158|   229k|        Round(g, h, a, b, c, d, e, f, 0x2748774c + (w2 += sigma1(w0) + w11 + sigma0(w3)));
  159|   229k|        Round(f, g, h, a, b, c, d, e, 0x34b0bcb5 + (w3 += sigma1(w1) + w12 + sigma0(w4)));
  160|   229k|        Round(e, f, g, h, a, b, c, d, 0x391c0cb3 + (w4 += sigma1(w2) + w13 + sigma0(w5)));
  161|   229k|        Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a + (w5 += sigma1(w3) + w14 + sigma0(w6)));
  162|   229k|        Round(c, d, e, f, g, h, a, b, 0x5b9cca4f + (w6 += sigma1(w4) + w15 + sigma0(w7)));
  163|   229k|        Round(b, c, d, e, f, g, h, a, 0x682e6ff3 + (w7 += sigma1(w5) + w0 + sigma0(w8)));
  164|   229k|        Round(a, b, c, d, e, f, g, h, 0x748f82ee + (w8 += sigma1(w6) + w1 + sigma0(w9)));
  165|   229k|        Round(h, a, b, c, d, e, f, g, 0x78a5636f + (w9 += sigma1(w7) + w2 + sigma0(w10)));
  166|   229k|        Round(g, h, a, b, c, d, e, f, 0x84c87814 + (w10 += sigma1(w8) + w3 + sigma0(w11)));
  167|   229k|        Round(f, g, h, a, b, c, d, e, 0x8cc70208 + (w11 += sigma1(w9) + w4 + sigma0(w12)));
  168|   229k|        Round(e, f, g, h, a, b, c, d, 0x90befffa + (w12 += sigma1(w10) + w5 + sigma0(w13)));
  169|   229k|        Round(d, e, f, g, h, a, b, c, 0xa4506ceb + (w13 += sigma1(w11) + w6 + sigma0(w14)));
  170|   229k|        Round(c, d, e, f, g, h, a, b, 0xbef9a3f7 + (w14 + sigma1(w12) + w7 + sigma0(w15)));
  171|   229k|        Round(b, c, d, e, f, g, h, a, 0xc67178f2 + (w15 + sigma1(w13) + w8 + sigma0(w0)));
  172|       |
  173|   229k|        s[0] += a;
  174|   229k|        s[1] += b;
  175|   229k|        s[2] += c;
  176|   229k|        s[3] += d;
  177|   229k|        s[4] += e;
  178|   229k|        s[5] += f;
  179|   229k|        s[6] += g;
  180|   229k|        s[7] += h;
  181|   229k|        chunk += 64;
  182|   229k|    }
  183|   229k|}
sha256.cpp:_ZN12_GLOBAL__N_16sha2565RoundEjjjRjjjjS1_j:
   78|  14.6M|{
   79|  14.6M|    uint32_t t1 = h + Sigma1(e) + Ch(e, f, g) + k;
   80|  14.6M|    uint32_t t2 = Sigma0(a) + Maj(a, b, c);
   81|  14.6M|    d += t1;
   82|  14.6M|    h = t1 + t2;
   83|  14.6M|}
sha256.cpp:_ZN12_GLOBAL__N_16sha2566Sigma1Ej:
   72|  14.6M|uint32_t inline Sigma1(uint32_t x) { return (x >> 6 | x << 26) ^ (x >> 11 | x << 21) ^ (x >> 25 | x << 7); }
sha256.cpp:_ZN12_GLOBAL__N_16sha2562ChEjjj:
   69|  14.6M|uint32_t inline Ch(uint32_t x, uint32_t y, uint32_t z) { return z ^ (x & (y ^ z)); }
sha256.cpp:_ZN12_GLOBAL__N_16sha2566Sigma0Ej:
   71|  14.6M|uint32_t inline Sigma0(uint32_t x) { return (x >> 2 | x << 30) ^ (x >> 13 | x << 19) ^ (x >> 22 | x << 10); }
sha256.cpp:_ZN12_GLOBAL__N_16sha2563MajEjjj:
   70|  14.6M|uint32_t inline Maj(uint32_t x, uint32_t y, uint32_t z) { return (x & y) | (z & (x | y)); }
sha256.cpp:_ZN12_GLOBAL__N_16sha2566sigma1Ej:
   74|  11.0M|uint32_t inline sigma1(uint32_t x) { return (x >> 17 | x << 15) ^ (x >> 19 | x << 13) ^ (x >> 10); }
sha256.cpp:_ZN12_GLOBAL__N_16sha2566sigma0Ej:
   73|  11.0M|uint32_t inline sigma0(uint32_t x) { return (x >> 7 | x << 25) ^ (x >> 18 | x << 14) ^ (x >> 3); }
sha256.cpp:_ZN12_GLOBAL__N_16sha25610InitializeEPj:
   87|   136k|{
   88|   136k|    s[0] = 0x6a09e667ul;
   89|   136k|    s[1] = 0xbb67ae85ul;
   90|   136k|    s[2] = 0x3c6ef372ul;
   91|   136k|    s[3] = 0xa54ff53aul;
   92|   136k|    s[4] = 0x510e527ful;
   93|   136k|    s[5] = 0x9b05688cul;
   94|   136k|    s[6] = 0x1f83d9abul;
   95|   136k|    s[7] = 0x5be0cd19ul;
   96|   136k|}

_ZN7CSHA512C2Ev:
  155|  51.9k|{
  156|  51.9k|    sha512::Initialize(s);
  157|  51.9k|}
_ZN7CSHA5125WriteEPKhm:
  160|   275k|{
  161|   275k|    const unsigned char* end = data + len;
  162|   275k|    size_t bufsize = bytes % 128;
  163|   275k|    if (bufsize && bufsize + len >= 128) {
  ------------------
  |  Branch (163:9): [True: 181k, False: 93.4k]
  |  Branch (163:20): [True: 51.9k, False: 129k]
  ------------------
  164|       |        // Fill the buffer, and process it.
  165|  51.9k|        memcpy(buf + bufsize, data, 128 - bufsize);
  166|  51.9k|        bytes += 128 - bufsize;
  167|  51.9k|        data += 128 - bufsize;
  168|  51.9k|        sha512::Transform(s, buf);
  169|  51.9k|        bufsize = 0;
  170|  51.9k|    }
  171|   316k|    while (end - data >= 128) {
  ------------------
  |  Branch (171:12): [True: 41.5k, False: 275k]
  ------------------
  172|       |        // Process full chunks directly from the source.
  173|  41.5k|        sha512::Transform(s, data);
  174|  41.5k|        data += 128;
  175|  41.5k|        bytes += 128;
  176|  41.5k|    }
  177|   275k|    if (end > data) {
  ------------------
  |  Branch (177:9): [True: 181k, False: 93.4k]
  ------------------
  178|       |        // Fill the buffer with what remains.
  179|   181k|        memcpy(buf + bufsize, data, end - data);
  180|   181k|        bytes += end - data;
  181|   181k|    }
  182|   275k|    return *this;
  183|   275k|}
_ZN7CSHA5128FinalizeEPh:
  186|  51.9k|{
  187|  51.9k|    static const unsigned char pad[128] = {0x80};
  188|  51.9k|    unsigned char sizedesc[16] = {0x00};
  189|  51.9k|    WriteBE64(sizedesc + 8, bytes << 3);
  190|  51.9k|    Write(pad, 1 + ((239 - (bytes % 128)) % 128));
  191|  51.9k|    Write(sizedesc, 16);
  192|  51.9k|    WriteBE64(hash, s[0]);
  193|  51.9k|    WriteBE64(hash + 8, s[1]);
  194|  51.9k|    WriteBE64(hash + 16, s[2]);
  195|  51.9k|    WriteBE64(hash + 24, s[3]);
  196|  51.9k|    WriteBE64(hash + 32, s[4]);
  197|  51.9k|    WriteBE64(hash + 40, s[5]);
  198|  51.9k|    WriteBE64(hash + 48, s[6]);
  199|  51.9k|    WriteBE64(hash + 56, s[7]);
  200|  51.9k|}
_ZN7CSHA5125ResetEv:
  203|  10.3k|{
  204|  10.3k|    bytes = 0;
  205|  10.3k|    sha512::Initialize(s);
  206|  10.3k|    return *this;
  207|  10.3k|}
sha512.cpp:_ZN12_GLOBAL__N_16sha51210InitializeEPm:
   35|  62.2k|{
   36|  62.2k|    s[0] = 0x6a09e667f3bcc908ull;
   37|  62.2k|    s[1] = 0xbb67ae8584caa73bull;
   38|  62.2k|    s[2] = 0x3c6ef372fe94f82bull;
   39|  62.2k|    s[3] = 0xa54ff53a5f1d36f1ull;
   40|  62.2k|    s[4] = 0x510e527fade682d1ull;
   41|  62.2k|    s[5] = 0x9b05688c2b3e6c1full;
   42|  62.2k|    s[6] = 0x1f83d9abfb41bd6bull;
   43|  62.2k|    s[7] = 0x5be0cd19137e2179ull;
   44|  62.2k|}
sha512.cpp:_ZN12_GLOBAL__N_16sha5129TransformEPmPKh:
   48|  93.4k|{
   49|  93.4k|    uint64_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];
   50|  93.4k|    uint64_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;
   51|       |
   52|  93.4k|    Round(a, b, c, d, e, f, g, h, 0x428a2f98d728ae22ull, w0 = ReadBE64(chunk + 0));
   53|  93.4k|    Round(h, a, b, c, d, e, f, g, 0x7137449123ef65cdull, w1 = ReadBE64(chunk + 8));
   54|  93.4k|    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcfec4d3b2full, w2 = ReadBE64(chunk + 16));
   55|  93.4k|    Round(f, g, h, a, b, c, d, e, 0xe9b5dba58189dbbcull, w3 = ReadBE64(chunk + 24));
   56|  93.4k|    Round(e, f, g, h, a, b, c, d, 0x3956c25bf348b538ull, w4 = ReadBE64(chunk + 32));
   57|  93.4k|    Round(d, e, f, g, h, a, b, c, 0x59f111f1b605d019ull, w5 = ReadBE64(chunk + 40));
   58|  93.4k|    Round(c, d, e, f, g, h, a, b, 0x923f82a4af194f9bull, w6 = ReadBE64(chunk + 48));
   59|  93.4k|    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5da6d8118ull, w7 = ReadBE64(chunk + 56));
   60|  93.4k|    Round(a, b, c, d, e, f, g, h, 0xd807aa98a3030242ull, w8 = ReadBE64(chunk + 64));
   61|  93.4k|    Round(h, a, b, c, d, e, f, g, 0x12835b0145706fbeull, w9 = ReadBE64(chunk + 72));
   62|  93.4k|    Round(g, h, a, b, c, d, e, f, 0x243185be4ee4b28cull, w10 = ReadBE64(chunk + 80));
   63|  93.4k|    Round(f, g, h, a, b, c, d, e, 0x550c7dc3d5ffb4e2ull, w11 = ReadBE64(chunk + 88));
   64|  93.4k|    Round(e, f, g, h, a, b, c, d, 0x72be5d74f27b896full, w12 = ReadBE64(chunk + 96));
   65|  93.4k|    Round(d, e, f, g, h, a, b, c, 0x80deb1fe3b1696b1ull, w13 = ReadBE64(chunk + 104));
   66|  93.4k|    Round(c, d, e, f, g, h, a, b, 0x9bdc06a725c71235ull, w14 = ReadBE64(chunk + 112));
   67|  93.4k|    Round(b, c, d, e, f, g, h, a, 0xc19bf174cf692694ull, w15 = ReadBE64(chunk + 120));
   68|       |
   69|  93.4k|    Round(a, b, c, d, e, f, g, h, 0xe49b69c19ef14ad2ull, w0 += sigma1(w14) + w9 + sigma0(w1));
   70|  93.4k|    Round(h, a, b, c, d, e, f, g, 0xefbe4786384f25e3ull, w1 += sigma1(w15) + w10 + sigma0(w2));
   71|  93.4k|    Round(g, h, a, b, c, d, e, f, 0x0fc19dc68b8cd5b5ull, w2 += sigma1(w0) + w11 + sigma0(w3));
   72|  93.4k|    Round(f, g, h, a, b, c, d, e, 0x240ca1cc77ac9c65ull, w3 += sigma1(w1) + w12 + sigma0(w4));
   73|  93.4k|    Round(e, f, g, h, a, b, c, d, 0x2de92c6f592b0275ull, w4 += sigma1(w2) + w13 + sigma0(w5));
   74|  93.4k|    Round(d, e, f, g, h, a, b, c, 0x4a7484aa6ea6e483ull, w5 += sigma1(w3) + w14 + sigma0(w6));
   75|  93.4k|    Round(c, d, e, f, g, h, a, b, 0x5cb0a9dcbd41fbd4ull, w6 += sigma1(w4) + w15 + sigma0(w7));
   76|  93.4k|    Round(b, c, d, e, f, g, h, a, 0x76f988da831153b5ull, w7 += sigma1(w5) + w0 + sigma0(w8));
   77|  93.4k|    Round(a, b, c, d, e, f, g, h, 0x983e5152ee66dfabull, w8 += sigma1(w6) + w1 + sigma0(w9));
   78|  93.4k|    Round(h, a, b, c, d, e, f, g, 0xa831c66d2db43210ull, w9 += sigma1(w7) + w2 + sigma0(w10));
   79|  93.4k|    Round(g, h, a, b, c, d, e, f, 0xb00327c898fb213full, w10 += sigma1(w8) + w3 + sigma0(w11));
   80|  93.4k|    Round(f, g, h, a, b, c, d, e, 0xbf597fc7beef0ee4ull, w11 += sigma1(w9) + w4 + sigma0(w12));
   81|  93.4k|    Round(e, f, g, h, a, b, c, d, 0xc6e00bf33da88fc2ull, w12 += sigma1(w10) + w5 + sigma0(w13));
   82|  93.4k|    Round(d, e, f, g, h, a, b, c, 0xd5a79147930aa725ull, w13 += sigma1(w11) + w6 + sigma0(w14));
   83|  93.4k|    Round(c, d, e, f, g, h, a, b, 0x06ca6351e003826full, w14 += sigma1(w12) + w7 + sigma0(w15));
   84|  93.4k|    Round(b, c, d, e, f, g, h, a, 0x142929670a0e6e70ull, w15 += sigma1(w13) + w8 + sigma0(w0));
   85|       |
   86|  93.4k|    Round(a, b, c, d, e, f, g, h, 0x27b70a8546d22ffcull, w0 += sigma1(w14) + w9 + sigma0(w1));
   87|  93.4k|    Round(h, a, b, c, d, e, f, g, 0x2e1b21385c26c926ull, w1 += sigma1(w15) + w10 + sigma0(w2));
   88|  93.4k|    Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc5ac42aedull, w2 += sigma1(w0) + w11 + sigma0(w3));
   89|  93.4k|    Round(f, g, h, a, b, c, d, e, 0x53380d139d95b3dfull, w3 += sigma1(w1) + w12 + sigma0(w4));
   90|  93.4k|    Round(e, f, g, h, a, b, c, d, 0x650a73548baf63deull, w4 += sigma1(w2) + w13 + sigma0(w5));
   91|  93.4k|    Round(d, e, f, g, h, a, b, c, 0x766a0abb3c77b2a8ull, w5 += sigma1(w3) + w14 + sigma0(w6));
   92|  93.4k|    Round(c, d, e, f, g, h, a, b, 0x81c2c92e47edaee6ull, w6 += sigma1(w4) + w15 + sigma0(w7));
   93|  93.4k|    Round(b, c, d, e, f, g, h, a, 0x92722c851482353bull, w7 += sigma1(w5) + w0 + sigma0(w8));
   94|  93.4k|    Round(a, b, c, d, e, f, g, h, 0xa2bfe8a14cf10364ull, w8 += sigma1(w6) + w1 + sigma0(w9));
   95|  93.4k|    Round(h, a, b, c, d, e, f, g, 0xa81a664bbc423001ull, w9 += sigma1(w7) + w2 + sigma0(w10));
   96|  93.4k|    Round(g, h, a, b, c, d, e, f, 0xc24b8b70d0f89791ull, w10 += sigma1(w8) + w3 + sigma0(w11));
   97|  93.4k|    Round(f, g, h, a, b, c, d, e, 0xc76c51a30654be30ull, w11 += sigma1(w9) + w4 + sigma0(w12));
   98|  93.4k|    Round(e, f, g, h, a, b, c, d, 0xd192e819d6ef5218ull, w12 += sigma1(w10) + w5 + sigma0(w13));
   99|  93.4k|    Round(d, e, f, g, h, a, b, c, 0xd69906245565a910ull, w13 += sigma1(w11) + w6 + sigma0(w14));
  100|  93.4k|    Round(c, d, e, f, g, h, a, b, 0xf40e35855771202aull, w14 += sigma1(w12) + w7 + sigma0(w15));
  101|  93.4k|    Round(b, c, d, e, f, g, h, a, 0x106aa07032bbd1b8ull, w15 += sigma1(w13) + w8 + sigma0(w0));
  102|       |
  103|  93.4k|    Round(a, b, c, d, e, f, g, h, 0x19a4c116b8d2d0c8ull, w0 += sigma1(w14) + w9 + sigma0(w1));
  104|  93.4k|    Round(h, a, b, c, d, e, f, g, 0x1e376c085141ab53ull, w1 += sigma1(w15) + w10 + sigma0(w2));
  105|  93.4k|    Round(g, h, a, b, c, d, e, f, 0x2748774cdf8eeb99ull, w2 += sigma1(w0) + w11 + sigma0(w3));
  106|  93.4k|    Round(f, g, h, a, b, c, d, e, 0x34b0bcb5e19b48a8ull, w3 += sigma1(w1) + w12 + sigma0(w4));
  107|  93.4k|    Round(e, f, g, h, a, b, c, d, 0x391c0cb3c5c95a63ull, w4 += sigma1(w2) + w13 + sigma0(w5));
  108|  93.4k|    Round(d, e, f, g, h, a, b, c, 0x4ed8aa4ae3418acbull, w5 += sigma1(w3) + w14 + sigma0(w6));
  109|  93.4k|    Round(c, d, e, f, g, h, a, b, 0x5b9cca4f7763e373ull, w6 += sigma1(w4) + w15 + sigma0(w7));
  110|  93.4k|    Round(b, c, d, e, f, g, h, a, 0x682e6ff3d6b2b8a3ull, w7 += sigma1(w5) + w0 + sigma0(w8));
  111|  93.4k|    Round(a, b, c, d, e, f, g, h, 0x748f82ee5defb2fcull, w8 += sigma1(w6) + w1 + sigma0(w9));
  112|  93.4k|    Round(h, a, b, c, d, e, f, g, 0x78a5636f43172f60ull, w9 += sigma1(w7) + w2 + sigma0(w10));
  113|  93.4k|    Round(g, h, a, b, c, d, e, f, 0x84c87814a1f0ab72ull, w10 += sigma1(w8) + w3 + sigma0(w11));
  114|  93.4k|    Round(f, g, h, a, b, c, d, e, 0x8cc702081a6439ecull, w11 += sigma1(w9) + w4 + sigma0(w12));
  115|  93.4k|    Round(e, f, g, h, a, b, c, d, 0x90befffa23631e28ull, w12 += sigma1(w10) + w5 + sigma0(w13));
  116|  93.4k|    Round(d, e, f, g, h, a, b, c, 0xa4506cebde82bde9ull, w13 += sigma1(w11) + w6 + sigma0(w14));
  117|  93.4k|    Round(c, d, e, f, g, h, a, b, 0xbef9a3f7b2c67915ull, w14 += sigma1(w12) + w7 + sigma0(w15));
  118|  93.4k|    Round(b, c, d, e, f, g, h, a, 0xc67178f2e372532bull, w15 += sigma1(w13) + w8 + sigma0(w0));
  119|       |
  120|  93.4k|    Round(a, b, c, d, e, f, g, h, 0xca273eceea26619cull, w0 += sigma1(w14) + w9 + sigma0(w1));
  121|  93.4k|    Round(h, a, b, c, d, e, f, g, 0xd186b8c721c0c207ull, w1 += sigma1(w15) + w10 + sigma0(w2));
  122|  93.4k|    Round(g, h, a, b, c, d, e, f, 0xeada7dd6cde0eb1eull, w2 += sigma1(w0) + w11 + sigma0(w3));
  123|  93.4k|    Round(f, g, h, a, b, c, d, e, 0xf57d4f7fee6ed178ull, w3 += sigma1(w1) + w12 + sigma0(w4));
  124|  93.4k|    Round(e, f, g, h, a, b, c, d, 0x06f067aa72176fbaull, w4 += sigma1(w2) + w13 + sigma0(w5));
  125|  93.4k|    Round(d, e, f, g, h, a, b, c, 0x0a637dc5a2c898a6ull, w5 += sigma1(w3) + w14 + sigma0(w6));
  126|  93.4k|    Round(c, d, e, f, g, h, a, b, 0x113f9804bef90daeull, w6 += sigma1(w4) + w15 + sigma0(w7));
  127|  93.4k|    Round(b, c, d, e, f, g, h, a, 0x1b710b35131c471bull, w7 += sigma1(w5) + w0 + sigma0(w8));
  128|  93.4k|    Round(a, b, c, d, e, f, g, h, 0x28db77f523047d84ull, w8 += sigma1(w6) + w1 + sigma0(w9));
  129|  93.4k|    Round(h, a, b, c, d, e, f, g, 0x32caab7b40c72493ull, w9 += sigma1(w7) + w2 + sigma0(w10));
  130|  93.4k|    Round(g, h, a, b, c, d, e, f, 0x3c9ebe0a15c9bebcull, w10 += sigma1(w8) + w3 + sigma0(w11));
  131|  93.4k|    Round(f, g, h, a, b, c, d, e, 0x431d67c49c100d4cull, w11 += sigma1(w9) + w4 + sigma0(w12));
  132|  93.4k|    Round(e, f, g, h, a, b, c, d, 0x4cc5d4becb3e42b6ull, w12 += sigma1(w10) + w5 + sigma0(w13));
  133|  93.4k|    Round(d, e, f, g, h, a, b, c, 0x597f299cfc657e2aull, w13 += sigma1(w11) + w6 + sigma0(w14));
  134|  93.4k|    Round(c, d, e, f, g, h, a, b, 0x5fcb6fab3ad6faecull, w14 + sigma1(w12) + w7 + sigma0(w15));
  135|  93.4k|    Round(b, c, d, e, f, g, h, a, 0x6c44198c4a475817ull, w15 + sigma1(w13) + w8 + sigma0(w0));
  136|       |
  137|  93.4k|    s[0] += a;
  138|  93.4k|    s[1] += b;
  139|  93.4k|    s[2] += c;
  140|  93.4k|    s[3] += d;
  141|  93.4k|    s[4] += e;
  142|  93.4k|    s[5] += f;
  143|  93.4k|    s[6] += g;
  144|  93.4k|    s[7] += h;
  145|  93.4k|}
sha512.cpp:_ZN12_GLOBAL__N_16sha5125RoundEmmmRmmmmS1_mm:
   26|  7.47M|{
   27|  7.47M|    uint64_t t1 = h + Sigma1(e) + Ch(e, f, g) + k + w;
   28|  7.47M|    uint64_t t2 = Sigma0(a) + Maj(a, b, c);
   29|  7.47M|    d += t1;
   30|  7.47M|    h = t1 + t2;
   31|  7.47M|}
sha512.cpp:_ZN12_GLOBAL__N_16sha5126Sigma1Em:
   20|  7.47M|uint64_t inline Sigma1(uint64_t x) { return (x >> 14 | x << 50) ^ (x >> 18 | x << 46) ^ (x >> 41 | x << 23); }
sha512.cpp:_ZN12_GLOBAL__N_16sha5122ChEmmm:
   17|  7.47M|uint64_t inline Ch(uint64_t x, uint64_t y, uint64_t z) { return z ^ (x & (y ^ z)); }
sha512.cpp:_ZN12_GLOBAL__N_16sha5126Sigma0Em:
   19|  7.47M|uint64_t inline Sigma0(uint64_t x) { return (x >> 28 | x << 36) ^ (x >> 34 | x << 30) ^ (x >> 39 | x << 25); }
sha512.cpp:_ZN12_GLOBAL__N_16sha5123MajEmmm:
   18|  7.47M|uint64_t inline Maj(uint64_t x, uint64_t y, uint64_t z) { return (x & y) | (z & (x | y)); }
sha512.cpp:_ZN12_GLOBAL__N_16sha5126sigma1Em:
   22|  5.97M|uint64_t inline sigma1(uint64_t x) { return (x >> 19 | x << 45) ^ (x >> 61 | x << 3) ^ (x >> 6); }
sha512.cpp:_ZN12_GLOBAL__N_16sha5126sigma0Em:
   21|  5.97M|uint64_t inline sigma0(uint64_t x) { return (x >> 1 | x << 63) ^ (x >> 8 | x << 56) ^ (x >> 7); }

_Z9BIP32HashRK7uint256jhPKhPh:
   72|  18.1k|{
   73|  18.1k|    unsigned char num[4];
   74|  18.1k|    WriteBE32(num, nChild);
   75|  18.1k|    CHMAC_SHA512(chainCode.begin(), chainCode.size()).Write(&header, 1).Write(data, 32).Write(num, 4).Finalize(output);
   76|  18.1k|}

_ZN10HashWriterlsINSt3__14spanIKSt4byteLm18446744073709551615EEEEERS_RKT_:
  144|  24.9k|    {
  145|  24.9k|        ::Serialize(*this, obj);
  146|  24.9k|        return *this;
  147|  24.9k|    }
_Z7Hash160INSt3__14spanIKhLm18446744073709551615EEEE7uint160RKT_:
   95|  18.1k|{
   96|  18.1k|    uint160 result;
   97|  18.1k|    CHash160().Write(MakeUCharSpan(in1)).Finalize(result);
   98|  18.1k|    return result;
   99|  18.1k|}
_ZN8CHash1605WriteENSt3__14spanIKhLm18446744073709551615EEE:
   64|  18.1k|    CHash160& Write(std::span<const unsigned char> input) {
   65|  18.1k|        sha.Write(input.data(), input.size());
   66|  18.1k|        return *this;
   67|  18.1k|    }
_ZN8CHash1608FinalizeENSt3__14spanIhLm18446744073709551615EEE:
   55|  18.1k|    void Finalize(std::span<unsigned char> output) {
   56|  18.1k|        assert(output.size() == OUTPUT_SIZE);
  ------------------
  |  Branch (56:9): [True: 18.1k, False: 0]
  ------------------
   57|  18.1k|        unsigned char buf[CSHA256::OUTPUT_SIZE];
   58|  18.1k|        sha.Finalize(buf);
   59|  18.1k|        unsigned char second[CSHA256::OUTPUT_SIZE];
   60|  18.1k|        CSHA256().Write(buf, CSHA256::OUTPUT_SIZE).Finalize(second);
   61|  18.1k|        std::copy(second, second + OUTPUT_SIZE, output.begin());
   62|  18.1k|    }
_ZN10HashWriter9GetSHA256Ev:
  128|  24.9k|    uint256 GetSHA256() {
  129|  24.9k|        uint256 result;
  130|  24.9k|        ctx.Finalize(result.begin());
  131|  24.9k|        return result;
  132|  24.9k|    }
_ZN10HashWriterlsI7uint256EERS_RKT_:
  144|  24.9k|    {
  145|  24.9k|        ::Serialize(*this, obj);
  146|  24.9k|        return *this;
  147|  24.9k|    }
_ZN10HashWriterlsINSt3__14spanIKhLm32EEEEERS_RKT_:
  144|  24.9k|    {
  145|  24.9k|        ::Serialize(*this, obj);
  146|  24.9k|        return *this;
  147|  24.9k|    }
_ZN10HashWriter5writeENSt3__14spanIKSt4byteLm18446744073709551615EEE:
  109|  49.8k|    {
  110|  49.8k|        ctx.Write(UCharCast(src.data()), src.size());
  111|  49.8k|    }

_ZN4CKey5CheckEPKh:
  157|  20.7k|bool CKey::Check(const unsigned char *vch) {
  158|  20.7k|    return secp256k1_ec_seckey_verify(secp256k1_context_sign, vch);
  159|  20.7k|}
_ZNK4CKey9GetPubKeyEv:
  182|  45.4k|CPubKey CKey::GetPubKey() const {
  183|  45.4k|    assert(keydata);
  ------------------
  |  Branch (183:5): [True: 45.4k, False: 0]
  ------------------
  184|  45.4k|    secp256k1_pubkey pubkey;
  185|  45.4k|    size_t clen = CPubKey::SIZE;
  186|  45.4k|    CPubKey result;
  187|  45.4k|    int ret = secp256k1_ec_pubkey_create(secp256k1_context_sign, &pubkey, UCharCast(begin()));
  188|  45.4k|    assert(ret);
  ------------------
  |  Branch (188:5): [True: 45.4k, False: 0]
  ------------------
  189|  45.4k|    secp256k1_ec_pubkey_serialize(secp256k1_context_sign, (unsigned char*)result.begin(), &clen, &pubkey, fCompressed ? SECP256K1_EC_COMPRESSED : SECP256K1_EC_UNCOMPRESSED);
  ------------------
  |  |  224|  45.4k|#define SECP256K1_EC_COMPRESSED (SECP256K1_FLAGS_TYPE_COMPRESSION | SECP256K1_FLAGS_BIT_COMPRESSION)
  |  |  ------------------
  |  |  |  |  205|  45.4k|#define SECP256K1_FLAGS_TYPE_COMPRESSION (1 << 1)
  |  |  ------------------
  |  |               #define SECP256K1_EC_COMPRESSED (SECP256K1_FLAGS_TYPE_COMPRESSION | SECP256K1_FLAGS_BIT_COMPRESSION)
  |  |  ------------------
  |  |  |  |  210|  45.4k|#define SECP256K1_FLAGS_BIT_COMPRESSION (1 << 8)
  |  |  ------------------
  ------------------
                  secp256k1_ec_pubkey_serialize(secp256k1_context_sign, (unsigned char*)result.begin(), &clen, &pubkey, fCompressed ? SECP256K1_EC_COMPRESSED : SECP256K1_EC_UNCOMPRESSED);
  ------------------
  |  |  225|  45.4k|#define SECP256K1_EC_UNCOMPRESSED (SECP256K1_FLAGS_TYPE_COMPRESSION)
  |  |  ------------------
  |  |  |  |  205|      0|#define SECP256K1_FLAGS_TYPE_COMPRESSION (1 << 1)
  |  |  ------------------
  ------------------
  |  Branch (189:107): [True: 45.4k, False: 0]
  ------------------
  190|  45.4k|    assert(result.size() == clen);
  ------------------
  |  Branch (190:5): [True: 45.4k, False: 0]
  ------------------
  191|  45.4k|    assert(result.IsValid());
  ------------------
  |  Branch (191:5): [True: 45.4k, False: 0]
  ------------------
  192|  45.4k|    return result;
  193|  45.4k|}
_ZNK4CKey11SignSchnorrERK7uint256NSt3__14spanIhLm18446744073709551615EEEPS1_S2_:
  273|  2.59k|{
  274|  2.59k|    KeyPair kp = ComputeKeyPair(merkle_root);
  275|  2.59k|    return kp.SignSchnorr(hash, sig, aux);
  276|  2.59k|}
_ZNK4CKey6DeriveERS_R7uint256jRKS1_:
  292|  18.1k|bool CKey::Derive(CKey& keyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const {
  293|  18.1k|    assert(IsValid());
  ------------------
  |  Branch (293:5): [True: 18.1k, False: 0]
  ------------------
  294|  18.1k|    assert(IsCompressed());
  ------------------
  |  Branch (294:5): [True: 18.1k, False: 0]
  ------------------
  295|  18.1k|    std::vector<unsigned char, secure_allocator<unsigned char>> vout(64);
  296|  18.1k|    if ((nChild >> 31) == 0) {
  ------------------
  |  Branch (296:9): [True: 18.1k, False: 0]
  ------------------
  297|  18.1k|        CPubKey pubkey = GetPubKey();
  298|  18.1k|        assert(pubkey.size() == CPubKey::COMPRESSED_SIZE);
  ------------------
  |  Branch (298:9): [True: 18.1k, False: 0]
  ------------------
  299|  18.1k|        BIP32Hash(cc, nChild, *pubkey.begin(), pubkey.begin()+1, vout.data());
  300|  18.1k|    } else {
  301|      0|        assert(size() == 32);
  ------------------
  |  Branch (301:9): [True: 0, False: 0]
  ------------------
  302|      0|        BIP32Hash(cc, nChild, 0, UCharCast(begin()), vout.data());
  303|      0|    }
  304|  18.1k|    memcpy(ccChild.begin(), vout.data()+32, 32);
  305|  18.1k|    keyChild.Set(begin(), begin() + 32, true);
  306|  18.1k|    bool ret = secp256k1_ec_seckey_tweak_add(secp256k1_context_sign, (unsigned char*)keyChild.begin(), vout.data());
  307|  18.1k|    if (!ret) keyChild.ClearKeyData();
  ------------------
  |  Branch (307:9): [True: 0, False: 18.1k]
  ------------------
  308|  18.1k|    return ret;
  309|  18.1k|}
_ZNK4CKey14EllSwiftCreateENSt3__14spanIKSt4byteLm18446744073709551615EEE:
  312|  10.3k|{
  313|  10.3k|    assert(keydata);
  ------------------
  |  Branch (313:5): [True: 10.3k, False: 0]
  ------------------
  314|  10.3k|    assert(ent32.size() == 32);
  ------------------
  |  Branch (314:5): [True: 10.3k, False: 0]
  ------------------
  315|  10.3k|    std::array<std::byte, EllSwiftPubKey::size()> encoded_pubkey;
  316|       |
  317|  10.3k|    auto success = secp256k1_ellswift_create(secp256k1_context_sign,
  318|  10.3k|                                             UCharCast(encoded_pubkey.data()),
  319|  10.3k|                                             keydata->data(),
  320|  10.3k|                                             UCharCast(ent32.data()));
  321|       |
  322|       |    // Should always succeed for valid keys (asserted above).
  323|  10.3k|    assert(success);
  ------------------
  |  Branch (323:5): [True: 10.3k, False: 0]
  ------------------
  324|  10.3k|    return {encoded_pubkey};
  325|  10.3k|}
_ZNK4CKey23ComputeBIP324ECDHSecretERK14EllSwiftPubKeyS2_b:
  328|  9.89k|{
  329|  9.89k|    assert(keydata);
  ------------------
  |  Branch (329:5): [True: 9.89k, False: 0]
  ------------------
  330|       |
  331|  9.89k|    ECDHSecret output;
  332|       |    // BIP324 uses the initiator as party A, and the responder as party B. Remap the inputs
  333|       |    // accordingly:
  334|  9.89k|    bool success = secp256k1_ellswift_xdh(secp256k1_context_sign,
  335|  9.89k|                                          UCharCast(output.data()),
  336|  9.89k|                                          UCharCast(initiating ? our_ellswift.data() : their_ellswift.data()),
  ------------------
  |  Branch (336:53): [True: 4.70k, False: 5.19k]
  ------------------
  337|  9.89k|                                          UCharCast(initiating ? their_ellswift.data() : our_ellswift.data()),
  ------------------
  |  Branch (337:53): [True: 4.70k, False: 5.19k]
  ------------------
  338|  9.89k|                                          keydata->data(),
  339|  9.89k|                                          initiating ? 0 : 1,
  ------------------
  |  Branch (339:43): [True: 4.70k, False: 5.19k]
  ------------------
  340|  9.89k|                                          secp256k1_ellswift_xdh_hash_function_bip324,
  341|  9.89k|                                          nullptr);
  342|       |    // Should always succeed for valid keys (assert above).
  343|  9.89k|    assert(success);
  ------------------
  |  Branch (343:5): [True: 9.89k, False: 0]
  ------------------
  344|  9.89k|    return output;
  345|  9.89k|}
_ZNK4CKey14ComputeKeyPairEPK7uint256:
  348|  2.59k|{
  349|  2.59k|    return KeyPair(*this, merkle_root);
  350|  2.59k|}
_ZNK7CExtKey6DeriveERS_j:
  359|  18.1k|bool CExtKey::Derive(CExtKey &out, unsigned int _nChild) const {
  360|  18.1k|    if (nDepth == std::numeric_limits<unsigned char>::max()) return false;
  ------------------
  |  Branch (360:9): [True: 0, False: 18.1k]
  ------------------
  361|  18.1k|    out.nDepth = nDepth + 1;
  362|  18.1k|    CKeyID id = key.GetPubKey().GetID();
  363|  18.1k|    memcpy(out.vchFingerprint, &id, 4);
  364|  18.1k|    out.nChild = _nChild;
  365|  18.1k|    return key.Derive(out.key, out.chaincode, _nChild, chaincode);
  366|  18.1k|}
_ZN7CExtKey7SetSeedENSt3__14spanIKSt4byteLm18446744073709551615EEE:
  369|  2.59k|{
  370|  2.59k|    static const unsigned char hashkey[] = {'B','i','t','c','o','i','n',' ','s','e','e','d'};
  371|  2.59k|    std::vector<unsigned char, secure_allocator<unsigned char>> vout(64);
  372|  2.59k|    CHMAC_SHA512{hashkey, sizeof(hashkey)}.Write(UCharCast(seed.data()), seed.size()).Finalize(vout.data());
  373|  2.59k|    key.Set(vout.data(), vout.data() + 32, true);
  374|  2.59k|    memcpy(chaincode.begin(), vout.data() + 32, 32);
  375|  2.59k|    nDepth = 0;
  376|  2.59k|    nChild = 0;
  377|  2.59k|    memset(vchFingerprint, 0, sizeof(vchFingerprint));
  378|  2.59k|}
_ZN7KeyPairC2ERK4CKeyPK7uint256:
  410|  2.59k|{
  411|  2.59k|    static_assert(std::tuple_size<KeyType>() == sizeof(secp256k1_keypair));
  412|  2.59k|    MakeKeyPairData();
  413|  2.59k|    auto keypair = reinterpret_cast<secp256k1_keypair*>(m_keypair->data());
  414|  2.59k|    bool success = secp256k1_keypair_create(secp256k1_context_sign, keypair, UCharCast(key.data()));
  415|  2.59k|    if (success && merkle_root) {
  ------------------
  |  Branch (415:9): [True: 2.59k, False: 0]
  |  Branch (415:20): [True: 0, False: 2.59k]
  ------------------
  416|      0|        secp256k1_xonly_pubkey pubkey;
  417|      0|        unsigned char pubkey_bytes[32];
  418|      0|        assert(secp256k1_keypair_xonly_pub(secp256k1_context_sign, &pubkey, nullptr, keypair));
  ------------------
  |  Branch (418:9): [True: 0, False: 0]
  ------------------
  419|      0|        assert(secp256k1_xonly_pubkey_serialize(secp256k1_context_sign, pubkey_bytes, &pubkey));
  ------------------
  |  Branch (419:9): [True: 0, False: 0]
  ------------------
  420|      0|        uint256 tweak = XOnlyPubKey(pubkey_bytes).ComputeTapTweakHash(merkle_root->IsNull() ? nullptr : merkle_root);
  ------------------
  |  Branch (420:71): [True: 0, False: 0]
  ------------------
  421|      0|        success = secp256k1_keypair_xonly_tweak_add(secp256k1_context_static, keypair, tweak.data());
  422|      0|    }
  423|  2.59k|    if (!success) ClearKeyPairData();
  ------------------
  |  Branch (423:9): [True: 0, False: 2.59k]
  ------------------
  424|  2.59k|}
_ZNK7KeyPair11SignSchnorrERK7uint256NSt3__14spanIhLm18446744073709551615EEES2_:
  427|  2.59k|{
  428|  2.59k|    assert(sig.size() == 64);
  ------------------
  |  Branch (428:5): [True: 2.59k, False: 0]
  ------------------
  429|  2.59k|    if (!IsValid()) return false;
  ------------------
  |  Branch (429:9): [True: 0, False: 2.59k]
  ------------------
  430|  2.59k|    auto keypair = reinterpret_cast<const secp256k1_keypair*>(m_keypair->data());
  431|  2.59k|    bool ret = secp256k1_schnorrsig_sign32(secp256k1_context_sign, sig.data(), hash.data(), keypair, aux.data());
  432|  2.59k|    if (ret) {
  ------------------
  |  Branch (432:9): [True: 2.59k, False: 0]
  ------------------
  433|       |        // Additional verification step to prevent using a potentially corrupted signature
  434|  2.59k|        secp256k1_xonly_pubkey pubkey_verify;
  435|  2.59k|        ret = secp256k1_keypair_xonly_pub(secp256k1_context_static, &pubkey_verify, nullptr, keypair);
  436|  2.59k|        ret &= secp256k1_schnorrsig_verify(secp256k1_context_static, sig.data(), hash.begin(), 32, &pubkey_verify);
  437|  2.59k|    }
  438|  2.59k|    if (!ret) memory_cleanse(sig.data(), sig.size());
  ------------------
  |  Branch (438:9): [True: 0, False: 2.59k]
  ------------------
  439|  2.59k|    return ret;
  440|  2.59k|}
_ZN11ECC_ContextD2Ev:
  482|      2|{
  483|      2|    ECC_Stop();
  484|      2|}
key.cpp:_ZL8ECC_Stopv:
  467|      2|static void ECC_Stop() {
  468|      2|    secp256k1_context *ctx = secp256k1_context_sign;
  469|      2|    secp256k1_context_sign = nullptr;
  470|       |
  471|      2|    if (ctx) {
  ------------------
  |  Branch (471:9): [True: 2, False: 0]
  ------------------
  472|      2|        secp256k1_context_destroy(ctx);
  473|      2|    }
  474|      2|}

_ZN7CExtKeyC2Ev:
  269|  5.19k|    CExtKey() = default;
_ZN4CKey11MakeKeyDataEv:
   64|  49.3k|    {
   65|  49.3k|        if (!keydata) keydata = make_secure_unique<KeyType>();
  ------------------
  |  Branch (65:13): [True: 33.7k, False: 15.5k]
  ------------------
   66|  49.3k|    }
_ZNK4CKey7IsValidEv:
  123|  23.3k|    bool IsValid() const { return !!keydata; }
_ZN4CKeyaSERKS_:
   79|  28.5k|    {
   80|  28.5k|        if (this != &other) {
  ------------------
  |  Branch (80:13): [True: 28.5k, False: 0]
  ------------------
   81|  28.5k|            if (other.keydata) {
  ------------------
  |  Branch (81:17): [True: 28.5k, False: 0]
  ------------------
   82|  28.5k|                MakeKeyData();
   83|  28.5k|                *keydata = *other.keydata;
   84|  28.5k|            } else {
   85|      0|                ClearKeyData();
   86|      0|            }
   87|  28.5k|            fCompressed = other.fCompressed;
   88|  28.5k|        }
   89|  28.5k|        return *this;
   90|  28.5k|    }
_ZN4CKeyC2ERKS_:
   92|  23.3k|    CKey(const CKey& other) { *this = other; }
_ZNK4CKey4dataEv:
  118|   102k|    const std::byte* data() const { return keydata ? reinterpret_cast<const std::byte*>(keydata->data()) : nullptr; }
  ------------------
  |  Branch (118:44): [True: 102k, False: 0]
  ------------------
_ZNK4CKey5beginEv:
  119|  99.9k|    const std::byte* begin() const { return data(); }
_ZNK4CKey12IsCompressedEv:
  126|  18.1k|    bool IsCompressed() const { return fCompressed; }
_ZNK7KeyPair7IsValidEv:
  318|  2.59k|    bool IsValid() const { return !!m_keypair; }
_ZN7KeyPair15MakeKeyPairDataEv:
  327|  2.59k|    {
  328|  2.59k|        if (!m_keypair) m_keypair = make_secure_unique<KeyType>();
  ------------------
  |  Branch (328:13): [True: 2.59k, False: 0]
  ------------------
  329|  2.59k|    }
_ZN4CKeyC2Ev:
   74|  10.3k|    CKey() noexcept = default;
_ZN4CKey3SetIPKSt4byteEEvT_S4_b:
  104|  18.1k|    {
  105|  18.1k|        if (size_t(pend - pbegin) != std::tuple_size_v<KeyType>) {
  ------------------
  |  Branch (105:13): [True: 0, False: 18.1k]
  ------------------
  106|      0|            ClearKeyData();
  107|  18.1k|        } else if (Check(UCharCast(&pbegin[0]))) {
  ------------------
  |  Branch (107:20): [True: 18.1k, False: 0]
  ------------------
  108|  18.1k|            MakeKeyData();
  109|  18.1k|            memcpy(keydata->data(), (unsigned char*)&pbegin[0], keydata->size());
  110|  18.1k|            fCompressed = fCompressedIn;
  111|  18.1k|        } else {
  112|      0|            ClearKeyData();
  113|      0|        }
  114|  18.1k|    }
_ZN4CKey3SetIPhEEvT_S2_b:
  104|  2.59k|    {
  105|  2.59k|        if (size_t(pend - pbegin) != std::tuple_size_v<KeyType>) {
  ------------------
  |  Branch (105:13): [True: 0, False: 2.59k]
  ------------------
  106|      0|            ClearKeyData();
  107|  2.59k|        } else if (Check(UCharCast(&pbegin[0]))) {
  ------------------
  |  Branch (107:20): [True: 2.59k, False: 0]
  ------------------
  108|  2.59k|            MakeKeyData();
  109|  2.59k|            memcpy(keydata->data(), (unsigned char*)&pbegin[0], keydata->size());
  110|  2.59k|            fCompressed = fCompressedIn;
  111|  2.59k|        } else {
  112|      0|            ClearKeyData();
  113|      0|        }
  114|  2.59k|    }

_Z11LogInstancev:
   27|   100k|{
   28|       |/**
   29|       | * NOTE: the logger instances is leaked on exit. This is ugly, but will be
   30|       | * cleaned up by the OS/libc. Defining a logger as a global object doesn't work
   31|       | * since the order of destruction of static/global objects is undefined.
   32|       | * Consider if the logger gets destroyed, and then some later destructor calls
   33|       | * LogPrintf, maybe indirectly, and you get a core dump at shutdown trying to
   34|       | * access the logger. When the shutdown sequence is fully audited and tested,
   35|       | * explicit destruction of these objects can be implemented by changing this
   36|       | * from a raw pointer to a std::unique_ptr.
   37|       | * Since the ~Logger() destructor is never called, the Logger class and all
   38|       | * its subclasses must have implicitly-defined destructors.
   39|       | *
   40|       | * This method of initialization was originally introduced in
   41|       | * ee3374234c60aba2cc4c5cd5cac1c0aefc2d817c.
   42|       | */
   43|   100k|    static BCLog::Logger* g_logger{new BCLog::Logger()};
   44|   100k|    return *g_logger;
   45|   100k|}
_ZNK5BCLog6Logger15WillLogCategoryENS_8LogFlagsE:
  150|  93.0k|{
  151|  93.0k|    return (m_categories.load(std::memory_order_relaxed) & category) != 0;
  152|  93.0k|}
_ZNK5BCLog6Logger20WillLogCategoryLevelENS_8LogFlagsENS_5LevelE:
  155|  93.0k|{
  156|       |    // Log messages at Info, Warning and Error level unconditionally, so that
  157|       |    // important troubleshooting information doesn't get lost.
  158|  93.0k|    if (level >= BCLog::Level::Info) return true;
  ------------------
  |  Branch (158:9): [True: 0, False: 93.0k]
  ------------------
  159|       |
  160|  93.0k|    if (!WillLogCategory(category)) return false;
  ------------------
  |  Branch (160:9): [True: 93.0k, False: 0]
  ------------------
  161|       |
  162|      0|    StdLockGuard scoped_lock(m_cs);
  163|      0|    const auto it{m_category_log_levels.find(category)};
  164|      0|    return level >= (it == m_category_log_levels.end() ? LogLevel() : it->second);
  ------------------
  |  Branch (164:22): [True: 0, False: 0]
  ------------------
  165|  93.0k|}
_ZN5BCLog16LogEscapeMessageENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  304|  3.86k|    std::string LogEscapeMessage(std::string_view str) {
  305|  3.86k|        std::string ret;
  306|   531k|        for (char ch_in : str) {
  ------------------
  |  Branch (306:25): [True: 531k, False: 3.86k]
  ------------------
  307|   531k|            uint8_t ch = (uint8_t)ch_in;
  308|   531k|            if ((ch >= 32 || ch == '\n') && ch != '\x7f') {
  ------------------
  |  Branch (308:18): [True: 527k, False: 3.86k]
  |  Branch (308:30): [True: 3.86k, False: 0]
  |  Branch (308:45): [True: 531k, False: 0]
  ------------------
  309|   531k|                ret += ch_in;
  310|   531k|            } else {
  311|      0|                ret += strprintf("\\x%02x", ch);
  ------------------
  |  | 1172|      0|#define strprintf tfm::format
  ------------------
  312|      0|            }
  313|   531k|        }
  314|  3.86k|        return ret;
  315|  3.86k|    }
_ZN5BCLog6Logger11LogPrintStrENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEONS1_15source_locationENS_8LogFlagsENS_5LevelE:
  369|  3.86k|{
  370|  3.86k|    StdLockGuard scoped_lock(m_cs);
  371|  3.86k|    return LogPrintStr_(str, std::move(source_loc), category, level);
  372|  3.86k|}
_ZN5BCLog6Logger12LogPrintStr_ENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEEONS1_15source_locationENS_8LogFlagsENS_5LevelE:
  376|  3.86k|{
  377|  3.86k|    std::string str_prefixed = LogEscapeMessage(str);
  378|       |
  379|  3.86k|    if (m_buffering) {
  ------------------
  |  Branch (379:9): [True: 3.86k, False: 0]
  ------------------
  380|  3.86k|        {
  381|  3.86k|            BufferedLog buf{
  382|  3.86k|                .now = SystemClock::now(),
  383|  3.86k|                .mocktime = GetMockTime(),
  384|  3.86k|                .str = str_prefixed,
  385|  3.86k|                .threadname = util::ThreadGetInternalName(),
  386|  3.86k|                .source_loc = std::move(source_loc),
  387|  3.86k|                .category = category,
  388|  3.86k|                .level = level,
  389|  3.86k|            };
  390|  3.86k|            m_cur_buffer_memusage += MemUsage(buf);
  391|  3.86k|            m_msgs_before_open.push_back(std::move(buf));
  392|  3.86k|        }
  393|       |
  394|  4.23k|        while (m_cur_buffer_memusage > m_max_buffer_memusage) {
  ------------------
  |  Branch (394:16): [True: 376, False: 3.86k]
  ------------------
  395|    376|            if (m_msgs_before_open.empty()) {
  ------------------
  |  Branch (395:17): [True: 0, False: 376]
  ------------------
  396|      0|                m_cur_buffer_memusage = 0;
  397|      0|                break;
  398|      0|            }
  399|    376|            m_cur_buffer_memusage -= MemUsage(m_msgs_before_open.front());
  400|    376|            m_msgs_before_open.pop_front();
  401|    376|            ++m_buffer_lines_discarded;
  402|    376|        }
  403|       |
  404|  3.86k|        return;
  405|  3.86k|    }
  406|       |
  407|      0|    FormatLogStrInPlace(str_prefixed, category, level, source_loc, util::ThreadGetInternalName(), SystemClock::now(), GetMockTime());
  408|      0|    if (m_print_to_console) {
  ------------------
  |  Branch (408:9): [True: 0, False: 0]
  ------------------
  409|       |        // print to console
  410|      0|        fwrite(str_prefixed.data(), 1, str_prefixed.size(), stdout);
  411|      0|        fflush(stdout);
  412|      0|    }
  413|      0|    for (const auto& cb : m_print_callbacks) {
  ------------------
  |  Branch (413:25): [True: 0, False: 0]
  ------------------
  414|      0|        cb(str_prefixed);
  415|      0|    }
  416|      0|    if (m_print_to_file) {
  ------------------
  |  Branch (416:9): [True: 0, False: 0]
  ------------------
  417|      0|        assert(m_fileout != nullptr);
  ------------------
  |  Branch (417:9): [True: 0, False: 0]
  ------------------
  418|       |
  419|       |        // reopen the log file, if requested
  420|      0|        if (m_reopen_file) {
  ------------------
  |  Branch (420:13): [True: 0, False: 0]
  ------------------
  421|      0|            m_reopen_file = false;
  422|      0|            FILE* new_fileout = fsbridge::fopen(m_file_path, "a");
  423|      0|            if (new_fileout) {
  ------------------
  |  Branch (423:17): [True: 0, False: 0]
  ------------------
  424|      0|                setbuf(new_fileout, nullptr); // unbuffered
  425|      0|                fclose(m_fileout);
  426|      0|                m_fileout = new_fileout;
  427|      0|            }
  428|      0|        }
  429|      0|        FileWriteStr(str_prefixed, m_fileout);
  430|      0|    }
  431|      0|}
logging.cpp:_ZL8MemUsageRKN5BCLog6Logger11BufferedLogE:
  345|  4.23k|{
  346|  4.23k|    return memusage::DynamicUsage(buflog.str) +
  347|  4.23k|           memusage::DynamicUsage(buflog.threadname) +
  348|  4.23k|           memusage::MallocUsage(sizeof(memusage::list_node<BCLog::Logger::BufferedLog>));
  349|  4.23k|}

sv2_noise.cpp:_ZL17LogAcceptCategoryN5BCLog8LogFlagsENS_5LevelE:
  214|  3.70k|{
  215|  3.70k|    return LogInstance().WillLogCategoryLevel(category, level);
  216|  3.70k|}
_ZNK5BCLog6Logger7EnabledEv:
  130|  3.86k|        {
  131|  3.86k|            StdLockGuard scoped_lock(m_cs);
  132|  3.86k|            return m_buffering || m_print_to_console || m_print_to_file || !m_print_callbacks.empty();
  ------------------
  |  Branch (132:20): [True: 3.86k, False: 0]
  |  Branch (132:35): [True: 0, False: 0]
  |  Branch (132:57): [True: 0, False: 0]
  |  Branch (132:76): [True: 0, False: 0]
  ------------------
  133|  3.86k|        }
_Z22LogPrintFormatInternalIJNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEEEvONS0_15source_locationEN5BCLog8LogFlagsENS9_5LevelEN4util21ConstevalFormatStringIXsZT_EEEDpRKT_:
  223|  1.26k|{
  224|  1.26k|    if (LogInstance().Enabled()) {
  ------------------
  |  Branch (224:9): [True: 1.26k, False: 0]
  ------------------
  225|  1.26k|        std::string log_msg;
  226|  1.26k|        try {
  227|  1.26k|            log_msg = tfm::format(fmt, args...);
  228|  1.26k|        } catch (tinyformat::format_error& fmterr) {
  229|      0|            log_msg = "Error \"" + std::string{fmterr.what()} + "\" while formatting log message: " + fmt.fmt;
  230|      0|        }
  231|  1.26k|        LogInstance().LogPrintStr(log_msg, std::move(source_loc), flag, level);
  232|  1.26k|    }
  233|  1.26k|}
noise.cpp:_ZL17LogAcceptCategoryN5BCLog8LogFlagsENS_5LevelE:
  214|  89.3k|{
  215|  89.3k|    return LogInstance().WillLogCategoryLevel(category, level);
  216|  89.3k|}
_Z22LogPrintFormatInternalIJPKcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEvONS2_15source_locationEN5BCLog8LogFlagsENSB_5LevelEN4util21ConstevalFormatStringIXsZT_EEEDpRKT_:
  223|  2.59k|{
  224|  2.59k|    if (LogInstance().Enabled()) {
  ------------------
  |  Branch (224:9): [True: 2.59k, False: 0]
  ------------------
  225|  2.59k|        std::string log_msg;
  226|  2.59k|        try {
  227|  2.59k|            log_msg = tfm::format(fmt, args...);
  228|  2.59k|        } catch (tinyformat::format_error& fmterr) {
  229|      0|            log_msg = "Error \"" + std::string{fmterr.what()} + "\" while formatting log message: " + fmt.fmt;
  230|      0|        }
  231|  2.59k|        LogInstance().LogPrintStr(log_msg, std::move(source_loc), flag, level);
  232|  2.59k|    }
  233|  2.59k|}

logging.cpp:_ZN8memusageL12DynamicUsageERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE:
   95|  8.47k|{
   96|  8.47k|    const char* s_ptr = reinterpret_cast<const char*>(&s);
   97|       |    // Don't count the dynamic memory used for string, if it resides in the
   98|       |    // "small string" optimization area (which stores data inside the object itself, up to some
   99|       |    // size; 15 bytes in modern libstdc++).
  100|  8.47k|    if (!std::less{}(s.data(), s_ptr) && !std::greater{}(s.data() + s.size(), s_ptr + sizeof(s))) {
  ------------------
  |  Branch (100:9): [True: 4.61k, False: 3.86k]
  |  Branch (100:9): [True: 4.23k, False: 4.23k]
  |  Branch (100:42): [True: 4.23k, False: 376]
  ------------------
  101|  4.23k|        return 0;
  102|  4.23k|    }
  103|  4.23k|    return MallocUsage(s.capacity());
  104|  8.47k|}
logging.cpp:_ZN8memusageL11MallocUsageEm:
   53|  8.47k|{
   54|       |    // Measured on libc6 2.19 on Linux.
   55|  8.47k|    if (alloc == 0) {
  ------------------
  |  Branch (55:9): [True: 0, False: 8.47k]
  ------------------
   56|      0|        return 0;
   57|  8.47k|    } else if (sizeof(void*) == 8) {
  ------------------
  |  Branch (57:16): [True: 8.47k, Folded]
  ------------------
   58|  8.47k|        return ((alloc + 31) >> 4) << 4;
   59|  8.47k|    } else if (sizeof(void*) == 4) {
  ------------------
  |  Branch (59:16): [Folded, False: 0]
  ------------------
   60|      0|        return ((alloc + 15) >> 3) << 3;
   61|      0|    } else {
   62|       |        assert(0);
  ------------------
  |  Branch (62:9): [Folded, False: 0]
  ------------------
   63|      0|    }
   64|  8.47k|}

_ZNK11XOnlyPubKey13VerifySchnorrERK7uint256NSt3__14spanIKhLm18446744073709551615EEE:
  237|  3.10k|{
  238|  3.10k|    assert(sigbytes.size() == 64);
  ------------------
  |  Branch (238:5): [True: 3.10k, False: 0]
  ------------------
  239|  3.10k|    secp256k1_xonly_pubkey pubkey;
  240|  3.10k|    if (!secp256k1_xonly_pubkey_parse(secp256k1_context_static, &pubkey, m_keydata.data())) return false;
  ------------------
  |  Branch (240:9): [True: 0, False: 3.10k]
  ------------------
  241|  3.10k|    return secp256k1_schnorrsig_verify(secp256k1_context_static, sigbytes.data(), msg.begin(), 32, &pubkey);
  242|  3.10k|}
_ZN14EllSwiftPubKeyC2ENSt3__14spanIKSt4byteLm18446744073709551615EEE:
  363|  17.6k|{
  364|  17.6k|    assert(ellswift.size() == SIZE);
  ------------------
  |  Branch (364:5): [True: 17.6k, False: 0]
  ------------------
  365|  17.6k|    std::copy(ellswift.begin(), ellswift.end(), m_pubkey.begin());
  366|  17.6k|}
_ZNK14EllSwiftPubKey6DecodeEv:
  369|  2.07k|{
  370|  2.07k|    secp256k1_pubkey pubkey;
  371|  2.07k|    secp256k1_ellswift_decode(secp256k1_context_static, &pubkey, UCharCast(m_pubkey.data()));
  372|       |
  373|  2.07k|    size_t sz = CPubKey::COMPRESSED_SIZE;
  374|  2.07k|    std::array<uint8_t, CPubKey::COMPRESSED_SIZE> vch_bytes;
  375|       |
  376|  2.07k|    secp256k1_ec_pubkey_serialize(secp256k1_context_static, vch_bytes.data(), &sz, &pubkey, SECP256K1_EC_COMPRESSED);
  ------------------
  |  |  224|  2.07k|#define SECP256K1_EC_COMPRESSED (SECP256K1_FLAGS_TYPE_COMPRESSION | SECP256K1_FLAGS_BIT_COMPRESSION)
  |  |  ------------------
  |  |  |  |  205|  2.07k|#define SECP256K1_FLAGS_TYPE_COMPRESSION (1 << 1)
  |  |  ------------------
  |  |               #define SECP256K1_EC_COMPRESSED (SECP256K1_FLAGS_TYPE_COMPRESSION | SECP256K1_FLAGS_BIT_COMPRESSION)
  |  |  ------------------
  |  |  |  |  210|  2.07k|#define SECP256K1_FLAGS_BIT_COMPRESSION (1 << 8)
  |  |  ------------------
  ------------------
  377|  2.07k|    assert(sz == vch_bytes.size());
  ------------------
  |  Branch (377:5): [True: 2.07k, False: 0]
  ------------------
  378|       |
  379|  2.07k|    return CPubKey{vch_bytes.begin(), vch_bytes.end()};
  380|  2.07k|}

_ZN7CPubKey6GetLenEh:
   61|   140k|    {
   62|   140k|        if (chHeader == 2 || chHeader == 3)
  ------------------
  |  Branch (62:13): [True: 69.1k, False: 71.4k]
  |  Branch (62:30): [True: 71.4k, False: 0]
  ------------------
   63|   140k|            return COMPRESSED_SIZE;
   64|      0|        if (chHeader == 4 || chHeader == 6 || chHeader == 7)
  ------------------
  |  Branch (64:13): [True: 0, False: 0]
  |  Branch (64:30): [True: 0, False: 0]
  |  Branch (64:47): [True: 0, False: 0]
  ------------------
   65|      0|            return SIZE;
   66|      0|        return 0;
   67|      0|    }
_ZNK7CPubKey4sizeEv:
  112|   138k|    unsigned int size() const { return GetLen(vch[0]); }
_ZNK14EllSwiftPubKey5beginEv:
  332|  5.19k|    auto begin() const { return m_pubkey.cbegin(); }
_ZNK14EllSwiftPubKey3endEv:
  333|  5.19k|    auto end() const { return m_pubkey.cend(); }
_ZN14EllSwiftPubKey4sizeEv:
  331|  5.19k|    static constexpr size_t size() { return SIZE; }
_ZN11XOnlyPubKeyC2ERK7CPubKey:
  260|  11.2k|    explicit XOnlyPubKey(const CPubKey& pubkey) : XOnlyPubKey(std::span{pubkey}.subspan(1, 32)) {}
_ZNK7CPubKey4dataEv:
  113|  11.2k|    const unsigned char* data() const { return vch; }
_ZN11XOnlyPubKey16SerializationOpsI10DataStreamKS_15ActionSerializeEEvRT0_RT_T1_:
  309|  5.70k|    SERIALIZE_METHODS(XOnlyPubKey, obj) { READWRITE(obj.m_keydata); }
  ------------------
  |  |  145|  5.70k|#define READWRITE(...) (ser_action.SerReadWriteMany(s, __VA_ARGS__))
  ------------------
_ZN6CKeyIDC2ERK7uint160:
   27|  18.1k|    explicit CKeyID(const uint160& in) : uint160(in) {}
_ZN7CPubKey10InvalidateEv:
   71|  45.4k|    {
   72|  45.4k|        vch[0] = 0xFF;
   73|  45.4k|    }
_ZN7CPubKeyC2Ev:
   83|  45.4k|    {
   84|  45.4k|        Invalidate();
   85|  45.4k|    }
_ZNK7CPubKey5beginEv:
  114|  81.7k|    const unsigned char* begin() const { return vch; }
_ZNK7CPubKey5GetIDEv:
  165|  18.1k|    {
  166|  18.1k|        return CKeyID(Hash160(std::span{vch}.first(size())));
  167|  18.1k|    }
_ZNK7CPubKey7IsValidEv:
  190|  45.4k|    {
  191|  45.4k|        return size() > 0;
  192|  45.4k|    }
_ZNK14EllSwiftPubKey4dataEv:
  330|  24.9k|    const std::byte* data() const { return m_pubkey.data(); }
_ZN11XOnlyPubKeyC2ENSt3__14spanIKhLm18446744073709551615EEE:
  257|  11.2k|    constexpr explicit XOnlyPubKey(std::span<const unsigned char> bytes) : m_keydata{bytes} {}
_ZN11XOnlyPubKeyC2Ev:
  242|  4.66k|    XOnlyPubKey() = default;
_ZN7CPubKey3SetIPhEEvT_S2_:
   90|  2.07k|    {
   91|  2.07k|        int len = pend == pbegin ? 0 : GetLen(pbegin[0]);
  ------------------
  |  Branch (91:19): [True: 0, False: 2.07k]
  ------------------
   92|  2.07k|        if (len && len == (pend - pbegin))
  ------------------
  |  Branch (92:13): [True: 2.07k, False: 0]
  |  Branch (92:20): [True: 2.07k, False: 0]
  ------------------
   93|  2.07k|            memcpy(vch, (unsigned char*)&pbegin[0], len);
   94|      0|        else
   95|      0|            Invalidate();
   96|  2.07k|    }
_ZN7CPubKeyC2IPhEET_S2_:
  101|  2.07k|    {
  102|  2.07k|        Set(pbegin, pend);
  103|  2.07k|    }

_Z30MakeRandDeterministicDANGEROUSRK7uint256:
  596|  2.59k|{
  597|  2.59k|    GetRNGState().MakeDeterministic(seed);
  598|  2.59k|}
_Z12GetRandBytesNSt3__14spanIhLm18446744073709551615EEE:
  602|  10.3k|{
  603|  10.3k|    g_used_g_prng = true;
  604|  10.3k|    ProcRand(bytes.data(), bytes.size(), RNGLevel::FAST, /*always_use_real_rng=*/false);
  605|  10.3k|}
random.cpp:_ZN12_GLOBAL__N_111GetRNGStateEv:
  451|  12.9k|{
  452|       |    // This idiom relies on the guarantee that static variable are initialized
  453|       |    // on first call, even when multiple parallel calls are permitted.
  454|  12.9k|    static std::vector<RNGState, secure_allocator<RNGState>> g_rng(1);
  455|  12.9k|    return g_rng[0];
  456|  12.9k|}
random.cpp:_ZN12_GLOBAL__N_18RNGStateD2Ev:
  367|      2|    ~RNGState() = default;
random.cpp:_ZN12_GLOBAL__N_18RNGState17MakeDeterministicERK7uint256:
  400|  2.59k|    {
  401|  2.59k|        LOCK(m_mutex);
  ------------------
  |  |  259|  2.59k|#define LOCK(cs) UniqueLock UNIQUE_NAME(criticalblock)(MaybeCheckNotHeld(cs), #cs, __FILE__, __LINE__)
  |  |  ------------------
  |  |  |  |   11|  2.59k|#define UNIQUE_NAME(name) PASTE2(name, __COUNTER__)
  |  |  |  |  ------------------
  |  |  |  |  |  |    9|  2.59k|#define PASTE2(x, y) PASTE(x, y)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |    8|  2.59k|#define PASTE(x, y) x ## y
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  402|  2.59k|        m_deterministic_prng.emplace(MakeByteSpan(seed));
  403|  2.59k|    }
random.cpp:_ZN12_GLOBAL__N_18ProcRandEPhiNS_8RNGLevelEb:
  563|  10.3k|{
  564|       |    // Make sure the RNG is initialized first (as all Seed* function possibly need hwrand to be available).
  565|  10.3k|    RNGState& rng = GetRNGState();
  566|       |
  567|  10.3k|    assert(num <= 32);
  ------------------
  |  Branch (567:5): [True: 10.3k, False: 0]
  ------------------
  568|       |
  569|  10.3k|    CSHA512 hasher;
  570|  10.3k|    switch (level) {
  ------------------
  |  Branch (570:13): [True: 10.3k, False: 0]
  ------------------
  571|  10.3k|    case RNGLevel::FAST:
  ------------------
  |  Branch (571:5): [True: 10.3k, False: 0]
  ------------------
  572|  10.3k|        SeedFast(hasher);
  573|  10.3k|        break;
  574|      0|    case RNGLevel::SLOW:
  ------------------
  |  Branch (574:5): [True: 0, False: 10.3k]
  ------------------
  575|      0|        SeedSlow(hasher, rng);
  576|      0|        break;
  577|      0|    case RNGLevel::PERIODIC:
  ------------------
  |  Branch (577:5): [True: 0, False: 10.3k]
  ------------------
  578|      0|        SeedPeriodic(hasher, rng);
  579|      0|        break;
  580|  10.3k|    }
  581|       |
  582|       |    // Combine with and update state
  583|  10.3k|    if (!rng.MixExtract(out, num, std::move(hasher), false, always_use_real_rng)) {
  ------------------
  |  Branch (583:9): [True: 0, False: 10.3k]
  ------------------
  584|       |        // On the first invocation, also seed with SeedStartup().
  585|      0|        CSHA512 startup_hasher;
  586|      0|        SeedStartup(startup_hasher, rng);
  587|      0|        rng.MixExtract(out, num, std::move(startup_hasher), true, always_use_real_rng);
  588|      0|    }
  589|  10.3k|}
random.cpp:_ZN12_GLOBAL__N_18SeedFastER7CSHA512:
  470|  10.3k|{
  471|  10.3k|    unsigned char buffer[32];
  472|       |
  473|       |    // Stack pointer to indirectly commit to thread/callstack
  474|  10.3k|    const unsigned char* ptr = buffer;
  475|  10.3k|    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));
  476|       |
  477|       |    // Hardware randomness is very fast when available; use it always.
  478|  10.3k|    SeedHardwareFast(hasher);
  479|       |
  480|       |    // High-precision timestamp
  481|  10.3k|    SeedTimestamp(hasher);
  482|  10.3k|}
random.cpp:_ZN12_GLOBAL__N_116SeedHardwareFastER7CSHA512:
  199|  10.3k|void SeedHardwareFast(CSHA512& hasher) noexcept {
  200|  10.3k|#if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)
  201|  10.3k|    if (g_rdrand_supported) {
  ------------------
  |  Branch (201:9): [True: 10.3k, False: 0]
  ------------------
  202|  10.3k|        uint64_t out = GetRdRand();
  203|  10.3k|        hasher.Write((const unsigned char*)&out, sizeof(out));
  204|  10.3k|        return;
  205|  10.3k|    }
  206|  10.3k|#endif
  207|  10.3k|}
random.cpp:_ZN12_GLOBAL__N_19GetRdRandEv:
  122|  10.3k|{
  123|       |    // RdRand may very rarely fail. Invoke it up to 10 times in a loop to reduce this risk.
  124|       |#ifdef __i386__
  125|       |    uint8_t ok = 0;
  126|       |    // Initialize to 0 to silence a compiler warning that r1 or r2 may be used
  127|       |    // uninitialized. Even if rdrand fails (!ok) it will set the output to 0,
  128|       |    // but there is no way that the compiler could know that.
  129|       |    uint32_t r1 = 0, r2 = 0;
  130|       |    for (int i = 0; i < 10; ++i) {
  131|       |        __asm__ volatile (".byte 0x0f, 0xc7, 0xf0; setc %1" : "=a"(r1), "=q"(ok) :: "cc"); // rdrand %eax
  132|       |        if (ok) break;
  133|       |    }
  134|       |    for (int i = 0; i < 10; ++i) {
  135|       |        __asm__ volatile (".byte 0x0f, 0xc7, 0xf0; setc %1" : "=a"(r2), "=q"(ok) :: "cc"); // rdrand %eax
  136|       |        if (ok) break;
  137|       |    }
  138|       |    return (((uint64_t)r2) << 32) | r1;
  139|       |#elif defined(__x86_64__) || defined(__amd64__)
  140|       |    uint8_t ok = 0;
  141|  10.3k|    uint64_t r1 = 0; // See above why we initialize to 0.
  142|  10.3k|    for (int i = 0; i < 10; ++i) {
  ------------------
  |  Branch (142:21): [True: 10.3k, False: 0]
  ------------------
  143|  10.3k|        __asm__ volatile (".byte 0x48, 0x0f, 0xc7, 0xf0; setc %1" : "=a"(r1), "=q"(ok) :: "cc"); // rdrand %rax
  144|  10.3k|        if (ok) break;
  ------------------
  |  Branch (144:13): [True: 10.3k, False: 0]
  ------------------
  145|  10.3k|    }
  146|  10.3k|    return r1;
  147|       |#else
  148|       |#error "RdRand is only supported on x86 and x86_64"
  149|       |#endif
  150|  10.3k|}
random.cpp:_ZN12_GLOBAL__N_113SeedTimestampER7CSHA512:
  464|  10.3k|{
  465|  10.3k|    int64_t perfcounter = GetPerformanceCounter();
  466|  10.3k|    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));
  467|  10.3k|}
random.cpp:_ZN12_GLOBAL__N_121GetPerformanceCounterEv:
   61|  10.3k|{
   62|       |    // Read the hardware time stamp counter when available.
   63|       |    // See https://en.wikipedia.org/wiki/Time_Stamp_Counter for more information.
   64|       |#if defined(_MSC_VER) && (defined(_M_IX86) || defined(_M_X64))
   65|       |    return __rdtsc();
   66|       |#elif !defined(_MSC_VER) && defined(__i386__)
   67|       |    uint64_t r = 0;
   68|       |    __asm__ volatile ("rdtsc" : "=A"(r)); // Constrain the r variable to the eax:edx pair.
   69|       |    return r;
   70|       |#elif !defined(_MSC_VER) && (defined(__x86_64__) || defined(__amd64__))
   71|       |    uint64_t r1 = 0, r2 = 0;
   72|  10.3k|    __asm__ volatile ("rdtsc" : "=a"(r1), "=d"(r2)); // Constrain r1 to rax and r2 to rdx.
   73|  10.3k|    return (r2 << 32) | r1;
   74|       |#else
   75|       |    // Fall back to using standard library clock (usually microsecond or nanosecond precision)
   76|       |    return std::chrono::high_resolution_clock::now().time_since_epoch().count();
   77|       |#endif
   78|  10.3k|}
random.cpp:_ZN12_GLOBAL__N_18RNGState10MixExtractEPhmO7CSHA512bb:
  413|  10.3k|    {
  414|  10.3k|        assert(num <= 32);
  ------------------
  |  Branch (414:9): [True: 10.3k, False: 0]
  ------------------
  415|  10.3k|        unsigned char buf[64];
  416|  10.3k|        static_assert(sizeof(buf) == CSHA512::OUTPUT_SIZE, "Buffer needs to have hasher's output size");
  417|  10.3k|        bool ret;
  418|  10.3k|        {
  419|  10.3k|            LOCK(m_mutex);
  ------------------
  |  |  259|  10.3k|#define LOCK(cs) UniqueLock UNIQUE_NAME(criticalblock)(MaybeCheckNotHeld(cs), #cs, __FILE__, __LINE__)
  |  |  ------------------
  |  |  |  |   11|  10.3k|#define UNIQUE_NAME(name) PASTE2(name, __COUNTER__)
  |  |  |  |  ------------------
  |  |  |  |  |  |    9|  10.3k|#define PASTE2(x, y) PASTE(x, y)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |    8|  10.3k|#define PASTE(x, y) x ## y
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  420|  10.3k|            ret = (m_strongly_seeded |= strong_seed);
  421|       |            // Write the current state of the RNG into the hasher
  422|  10.3k|            hasher.Write(m_state, 32);
  423|       |            // Write a new counter number into the state
  424|  10.3k|            hasher.Write((const unsigned char*)&m_counter, sizeof(m_counter));
  425|  10.3k|            ++m_counter;
  426|       |            // Finalize the hasher
  427|  10.3k|            hasher.Finalize(buf);
  428|       |            // Store the last 32 bytes of the hash output as new RNG state.
  429|  10.3k|            memcpy(m_state, buf + 32, 32);
  430|       |            // Handle requests for deterministic randomness.
  431|  10.3k|            if (!always_use_real_rng && m_deterministic_prng.has_value()) [[unlikely]] {
  ------------------
  |  Branch (431:17): [True: 10.3k, False: 0]
  |  Branch (431:41): [True: 10.3k, False: 0]
  ------------------
  432|       |                // Overwrite the beginning of buf, which will be used for output.
  433|  10.3k|                m_deterministic_prng->Keystream(std::as_writable_bytes(std::span{buf, num}));
  434|       |                // Do not require strong seeding for deterministic output.
  435|  10.3k|                ret = true;
  436|  10.3k|            }
  437|  10.3k|        }
  438|       |        // If desired, copy (up to) the first 32 bytes of the hash output as output.
  439|  10.3k|        if (num) {
  ------------------
  |  Branch (439:13): [True: 10.3k, False: 0]
  ------------------
  440|  10.3k|            assert(out != nullptr);
  ------------------
  |  Branch (440:13): [True: 10.3k, False: 0]
  ------------------
  441|  10.3k|            memcpy(out, buf, num);
  442|  10.3k|        }
  443|       |        // Best effort cleanup of internal state
  444|  10.3k|        hasher.Reset();
  445|  10.3k|        memory_cleanse(buf, 64);
  446|  10.3k|        return ret;
  447|  10.3k|    }

_ZN21InsecureRandomContextC2Em:
  439|    806|        : m_s0(SplitMix64(seedval)), m_s1(SplitMix64(seedval)) {}
_ZN11RandomMixinI21InsecureRandomContextEC2Ev:
  195|    806|    constexpr RandomMixin() noexcept = default;
_ZN21InsecureRandomContext10SplitMix64ERm:
  430|  1.61k|    {
  431|  1.61k|        uint64_t z = (seedval += 0x9e3779b97f4a7c15);
  432|  1.61k|        z = (z ^ (z >> 30)) * 0xbf58476d1ce4e5b9;
  433|  1.61k|        z = (z ^ (z >> 27)) * 0x94d049bb133111eb;
  434|  1.61k|        return z ^ (z >> 31);
  435|  1.61k|    }
_ZN11RandomMixinI21InsecureRandomContextEclEv:
  376|   523M|    inline uint64_t operator()() noexcept { return Impl().rand64(); }
_ZN11RandomMixinI21InsecureRandomContextE4ImplEv:
  185|   523M|    RandomNumberGenerator auto& Impl() noexcept { return static_cast<T&>(*this); }
_ZN21InsecureRandomContext6rand64Ev:
  449|   523M|    {
  450|   523M|        uint64_t s0 = m_s0, s1 = m_s1;
  451|   523M|        const uint64_t result = std::rotl(s0 + s1, 17) + s0;
  452|   523M|        s1 ^= s0;
  453|   523M|        m_s0 = std::rotl(s0, 49) ^ s1 ^ (s1 << 21);
  454|   523M|        m_s1 = std::rotl(s1, 28);
  455|   523M|        return result;
  456|   523M|    }
_Z11GetRandHashv:
  464|  10.3k|{
  465|  10.3k|    uint256 hash;
  466|  10.3k|    GetRandBytes(hash);
  467|  10.3k|    return hash;
  468|  10.3k|}

secp256k1.c:secp256k1_eckey_pubkey_serialize:
   38|  47.5k|static int secp256k1_eckey_pubkey_serialize(secp256k1_ge *elem, unsigned char *pub, size_t *size, int compressed) {
   39|  47.5k|    VERIFY_CHECK(compressed == 0 || compressed == 1);
   40|       |
   41|  47.5k|    if (secp256k1_ge_is_infinity(elem)) {
  ------------------
  |  Branch (41:9): [True: 0, False: 47.5k]
  ------------------
   42|      0|        return 0;
   43|      0|    }
   44|  47.5k|    secp256k1_fe_normalize_var(&elem->x);
  ------------------
  |  |   80|  47.5k|#  define secp256k1_fe_normalize_var secp256k1_fe_impl_normalize_var
  ------------------
   45|  47.5k|    secp256k1_fe_normalize_var(&elem->y);
  ------------------
  |  |   80|  47.5k|#  define secp256k1_fe_normalize_var secp256k1_fe_impl_normalize_var
  ------------------
   46|  47.5k|    secp256k1_fe_get_b32(&pub[1], &elem->x);
  ------------------
  |  |   89|  47.5k|#  define secp256k1_fe_get_b32 secp256k1_fe_impl_get_b32
  ------------------
   47|  47.5k|    if (compressed) {
  ------------------
  |  Branch (47:9): [True: 47.5k, False: 0]
  ------------------
   48|  47.5k|        *size = 33;
   49|  47.5k|        pub[0] = secp256k1_fe_is_odd(&elem->y) ? SECP256K1_TAG_PUBKEY_ODD : SECP256K1_TAG_PUBKEY_EVEN;
  ------------------
  |  |   85|  47.5k|#  define secp256k1_fe_is_odd secp256k1_fe_impl_is_odd
  ------------------
                      pub[0] = secp256k1_fe_is_odd(&elem->y) ? SECP256K1_TAG_PUBKEY_ODD : SECP256K1_TAG_PUBKEY_EVEN;
  ------------------
  |  |  229|  24.1k|#define SECP256K1_TAG_PUBKEY_ODD 0x03
  ------------------
                      pub[0] = secp256k1_fe_is_odd(&elem->y) ? SECP256K1_TAG_PUBKEY_ODD : SECP256K1_TAG_PUBKEY_EVEN;
  ------------------
  |  |  228|  70.9k|#define SECP256K1_TAG_PUBKEY_EVEN 0x02
  ------------------
  |  Branch (49:18): [True: 24.1k, False: 23.3k]
  ------------------
   50|  47.5k|    } else {
   51|      0|        *size = 65;
   52|      0|        pub[0] = SECP256K1_TAG_PUBKEY_UNCOMPRESSED;
  ------------------
  |  |  230|      0|#define SECP256K1_TAG_PUBKEY_UNCOMPRESSED 0x04
  ------------------
   53|      0|        secp256k1_fe_get_b32(&pub[33], &elem->y);
  ------------------
  |  |   89|      0|#  define secp256k1_fe_get_b32 secp256k1_fe_impl_get_b32
  ------------------
   54|      0|    }
   55|  47.5k|    return 1;
   56|  47.5k|}
secp256k1.c:secp256k1_eckey_privkey_tweak_add:
   58|  18.1k|static int secp256k1_eckey_privkey_tweak_add(secp256k1_scalar *key, const secp256k1_scalar *tweak) {
   59|  18.1k|    secp256k1_scalar_add(key, key, tweak);
   60|  18.1k|    return !secp256k1_scalar_is_zero(key);
   61|  18.1k|}

secp256k1.c:secp256k1_ecmult_const_xonly:
  270|  9.89k|static int secp256k1_ecmult_const_xonly(secp256k1_fe* r, const secp256k1_fe *n, const secp256k1_fe *d, const secp256k1_scalar *q, int known_on_curve) {
  271|       |
  272|       |    /* This algorithm is a generalization of Peter Dettman's technique for
  273|       |     * avoiding the square root in a random-basepoint x-only multiplication
  274|       |     * on a Weierstrass curve:
  275|       |     * https://mailarchive.ietf.org/arch/msg/cfrg/7DyYY6gg32wDgHAhgSb6XxMDlJA/
  276|       |     *
  277|       |     *
  278|       |     * === Background: the effective affine technique ===
  279|       |     *
  280|       |     * Let phi_u be the isomorphism that maps (x, y) on secp256k1 curve y^2 = x^3 + 7 to
  281|       |     * x' = u^2*x, y' = u^3*y on curve y'^2 = x'^3 + u^6*7. This new curve has the same order as
  282|       |     * the original (it is isomorphic), but moreover, has the same addition/doubling formulas, as
  283|       |     * the curve b=7 coefficient does not appear in those formulas (or at least does not appear in
  284|       |     * the formulas implemented in this codebase, both affine and Jacobian). See also Example 9.5.2
  285|       |     * in https://www.math.auckland.ac.nz/~sgal018/crypto-book/ch9.pdf.
  286|       |     *
  287|       |     * This means any linear combination of secp256k1 points can be computed by applying phi_u
  288|       |     * (with non-zero u) on all input points (including the generator, if used), computing the
  289|       |     * linear combination on the isomorphic curve (using the same group laws), and then applying
  290|       |     * phi_u^{-1} to get back to secp256k1.
  291|       |     *
  292|       |     * Switching to Jacobian coordinates, note that phi_u applied to (X, Y, Z) is simply
  293|       |     * (X, Y, Z/u). Thus, if we want to compute (X1, Y1, Z) + (X2, Y2, Z), with identical Z
  294|       |     * coordinates, we can use phi_Z to transform it to (X1, Y1, 1) + (X2, Y2, 1) on an isomorphic
  295|       |     * curve where the affine addition formula can be used instead.
  296|       |     * If (X3, Y3, Z3) = (X1, Y1) + (X2, Y2) on that curve, then our answer on secp256k1 is
  297|       |     * (X3, Y3, Z3*Z).
  298|       |     *
  299|       |     * This is the effective affine technique: if we have a linear combination of group elements
  300|       |     * to compute, and all those group elements have the same Z coordinate, we can simply pretend
  301|       |     * that all those Z coordinates are 1, perform the computation that way, and then multiply the
  302|       |     * original Z coordinate back in.
  303|       |     *
  304|       |     * The technique works on any a=0 short Weierstrass curve. It is possible to generalize it to
  305|       |     * other curves too, but there the isomorphic curves will have different 'a' coefficients,
  306|       |     * which typically does affect the group laws.
  307|       |     *
  308|       |     *
  309|       |     * === Avoiding the square root for x-only point multiplication ===
  310|       |     *
  311|       |     * In this function, we want to compute the X coordinate of q*(n/d, y), for
  312|       |     * y = sqrt((n/d)^3 + 7). Its negation would also be a valid Y coordinate, but by convention
  313|       |     * we pick whatever sqrt returns (which we assume to be a deterministic function).
  314|       |     *
  315|       |     * Let g = y^2*d^3 = n^3 + 7*d^3. This also means y = sqrt(g/d^3).
  316|       |     * Further let v = sqrt(d*g), which must exist as d*g = y^2*d^4 = (y*d^2)^2.
  317|       |     *
  318|       |     * The input point (n/d, y) also has Jacobian coordinates:
  319|       |     *
  320|       |     *     (n/d, y, 1)
  321|       |     *   = (n/d * v^2, y * v^3, v)
  322|       |     *   = (n/d * d*g, y * sqrt(d^3*g^3), v)
  323|       |     *   = (n/d * d*g, sqrt(y^2 * d^3*g^3), v)
  324|       |     *   = (n*g, sqrt(g/d^3 * d^3*g^3), v)
  325|       |     *   = (n*g, sqrt(g^4), v)
  326|       |     *   = (n*g, g^2, v)
  327|       |     *
  328|       |     * It is easy to verify that both (n*g, g^2, v) and its negation (n*g, -g^2, v) have affine X
  329|       |     * coordinate n/d, and this holds even when the square root function doesn't have a
  330|       |     * deterministic sign. We choose the (n*g, g^2, v) version.
  331|       |     *
  332|       |     * Now switch to the effective affine curve using phi_v, where the input point has coordinates
  333|       |     * (n*g, g^2). Compute (X, Y, Z) = q * (n*g, g^2) there.
  334|       |     *
  335|       |     * Back on secp256k1, that means q * (n*g, g^2, v) = (X, Y, v*Z). This last point has affine X
  336|       |     * coordinate X / (v^2*Z^2) = X / (d*g*Z^2). Determining the affine Y coordinate would involve
  337|       |     * a square root, but as long as we only care about the resulting X coordinate, no square root
  338|       |     * is needed anywhere in this computation.
  339|       |     */
  340|       |
  341|  9.89k|    secp256k1_fe g, i;
  342|  9.89k|    secp256k1_ge p;
  343|  9.89k|    secp256k1_gej rj;
  344|       |
  345|       |    /* Compute g = (n^3 + B*d^3). */
  346|  9.89k|    secp256k1_fe_sqr(&g, n);
  ------------------
  |  |   94|  9.89k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  347|  9.89k|    secp256k1_fe_mul(&g, &g, n);
  ------------------
  |  |   93|  9.89k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  348|  9.89k|    if (d) {
  ------------------
  |  Branch (348:9): [True: 9.89k, False: 0]
  ------------------
  349|  9.89k|        secp256k1_fe b;
  350|  9.89k|        VERIFY_CHECK(!secp256k1_fe_normalizes_to_zero(d));
  351|  9.89k|        secp256k1_fe_sqr(&b, d);
  ------------------
  |  |   94|  9.89k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  352|  9.89k|        VERIFY_CHECK(SECP256K1_B <= 8); /* magnitude of b will be <= 8 after the next call */
  353|  9.89k|        secp256k1_fe_mul_int(&b, SECP256K1_B);
  ------------------
  |  |  233|  9.89k|#define secp256k1_fe_mul_int(r, a) ASSERT_INT_CONST_AND_DO(a, secp256k1_fe_mul_int_unchecked(r, a))
  |  |  ------------------
  |  |  |  |   77|  9.89k|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |   78|  9.89k|    switch(42) { \
  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:9): [True: 0, False: 9.89k]
  |  |  |  |  ------------------
  |  |  |  |   81|      0|            break; \
  |  |  |  |   82|  9.89k|        default: ; \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:9): [True: 9.89k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   83|  9.89k|    } \
  |  |  |  |   84|  9.89k|    stmt; \
  |  |  |  |   85|  9.89k|} while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (85:9): [Folded, False: 9.89k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  354|  9.89k|        secp256k1_fe_mul(&b, &b, d);
  ------------------
  |  |   93|  9.89k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  355|  9.89k|        secp256k1_fe_add(&g, &b);
  ------------------
  |  |   92|  9.89k|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  356|  9.89k|        if (!known_on_curve) {
  ------------------
  |  Branch (356:13): [True: 0, False: 9.89k]
  ------------------
  357|       |            /* We need to determine whether (n/d)^3 + 7 is square.
  358|       |             *
  359|       |             *     is_square((n/d)^3 + 7)
  360|       |             * <=> is_square(((n/d)^3 + 7) * d^4)
  361|       |             * <=> is_square((n^3 + 7*d^3) * d)
  362|       |             * <=> is_square(g * d)
  363|       |             */
  364|      0|            secp256k1_fe c;
  365|      0|            secp256k1_fe_mul(&c, &g, d);
  ------------------
  |  |   93|      0|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  366|      0|            if (!secp256k1_fe_is_square_var(&c)) return 0;
  ------------------
  |  |  103|      0|#  define secp256k1_fe_is_square_var secp256k1_fe_impl_is_square_var
  ------------------
  |  Branch (366:17): [True: 0, False: 0]
  ------------------
  367|      0|        }
  368|  9.89k|    } else {
  369|      0|        secp256k1_fe_add_int(&g, SECP256K1_B);
  ------------------
  |  |  102|      0|#  define secp256k1_fe_add_int secp256k1_fe_impl_add_int
  ------------------
                      secp256k1_fe_add_int(&g, SECP256K1_B);
  ------------------
  |  |   73|      0|#define SECP256K1_B 7
  ------------------
  370|      0|        if (!known_on_curve) {
  ------------------
  |  Branch (370:13): [True: 0, False: 0]
  ------------------
  371|       |            /* g at this point equals x^3 + 7. Test if it is square. */
  372|      0|            if (!secp256k1_fe_is_square_var(&g)) return 0;
  ------------------
  |  |  103|      0|#  define secp256k1_fe_is_square_var secp256k1_fe_impl_is_square_var
  ------------------
  |  Branch (372:17): [True: 0, False: 0]
  ------------------
  373|      0|        }
  374|      0|    }
  375|       |
  376|  9.89k|    SECP256K1_FE_VERIFY_MAGNITUDE(&g, 2);
  ------------------
  |  |  348|  9.89k|#define SECP256K1_FE_VERIFY_MAGNITUDE(a, m) secp256k1_fe_verify_magnitude(a, m)
  ------------------
  377|       |
  378|       |    /* Compute base point P = (n*g, g^2), the effective affine version of (n*g, g^2, v), which has
  379|       |     * corresponding affine X coordinate n/d. */
  380|  9.89k|    secp256k1_fe_mul(&p.x, &g, n);
  ------------------
  |  |   93|  9.89k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  381|  9.89k|    secp256k1_fe_sqr(&p.y, &g);
  ------------------
  |  |   94|  9.89k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  382|  9.89k|    p.infinity = 0;
  383|       |
  384|       |    /* Perform x-only EC multiplication of P with q. */
  385|  9.89k|    VERIFY_CHECK(!secp256k1_scalar_is_zero(q));
  386|  9.89k|    secp256k1_ecmult_const(&rj, &p, q);
  387|  9.89k|    VERIFY_CHECK(!secp256k1_gej_is_infinity(&rj));
  388|       |
  389|       |    /* The resulting (X, Y, Z) point on the effective-affine isomorphic curve corresponds to
  390|       |     * (X, Y, Z*v) on the secp256k1 curve. The affine version of that has X coordinate
  391|       |     * (X / (Z^2*d*g)). */
  392|  9.89k|    secp256k1_fe_sqr(&i, &rj.z);
  ------------------
  |  |   94|  9.89k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  393|  9.89k|    secp256k1_fe_mul(&i, &i, &g);
  ------------------
  |  |   93|  9.89k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  394|  9.89k|    if (d) secp256k1_fe_mul(&i, &i, d);
  ------------------
  |  |   93|  9.89k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  |  Branch (394:9): [True: 9.89k, False: 0]
  ------------------
  395|  9.89k|    secp256k1_fe_inv(&i, &i);
  ------------------
  |  |   98|  9.89k|#  define secp256k1_fe_inv secp256k1_fe_impl_inv
  ------------------
  396|  9.89k|    secp256k1_fe_mul(r, &rj.x, &i);
  ------------------
  |  |   93|  9.89k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  397|       |
  398|  9.89k|    return 1;
  399|  9.89k|}
secp256k1.c:secp256k1_ecmult_const:
  124|  9.89k|static void secp256k1_ecmult_const(secp256k1_gej *r, const secp256k1_ge *a, const secp256k1_scalar *q) {
  125|       |    /* The approach below combines the signed-digit logic from Mike Hamburg's
  126|       |     * "Fast and compact elliptic-curve cryptography" (https://eprint.iacr.org/2012/309)
  127|       |     * Section 3.3, with the GLV endomorphism.
  128|       |     *
  129|       |     * The idea there is to interpret the bits of a scalar as signs (1 = +, 0 = -), and compute a
  130|       |     * point multiplication in that fashion. Let v be an n-bit non-negative integer (0 <= v < 2^n),
  131|       |     * and v[i] its i'th bit (so v = sum(v[i] * 2^i, i=0..n-1)). Then define:
  132|       |     *
  133|       |     *   C_l(v, A) = sum((2*v[i] - 1) * 2^i*A, i=0..l-1)
  134|       |     *
  135|       |     * Then it holds that C_l(v, A) = sum((2*v[i] - 1) * 2^i*A, i=0..l-1)
  136|       |     *                              = (2*sum(v[i] * 2^i, i=0..l-1) + 1 - 2^l) * A
  137|       |     *                              = (2*v + 1 - 2^l) * A
  138|       |     *
  139|       |     * Thus, one can compute q*A as C_256((q + 2^256 - 1) / 2, A). This is the basis for the
  140|       |     * paper's signed-digit multi-comb algorithm for multiplication using a precomputed table.
  141|       |     *
  142|       |     * It is appealing to try to combine this with the GLV optimization: the idea that a scalar
  143|       |     * s can be written as s1 + lambda*s2, where lambda is a curve-specific constant such that
  144|       |     * lambda*A is easy to compute, and where s1 and s2 are small. In particular we have the
  145|       |     * secp256k1_scalar_split_lambda function which performs such a split with the resulting s1
  146|       |     * and s2 in range (-2^128, 2^128) mod n. This does work, but is uninteresting:
  147|       |     *
  148|       |     *   To compute q*A:
  149|       |     *   - Let s1, s2 = split_lambda(q)
  150|       |     *   - Let R1 = C_256((s1 + 2^256 - 1) / 2, A)
  151|       |     *   - Let R2 = C_256((s2 + 2^256 - 1) / 2, lambda*A)
  152|       |     *   - Return R1 + R2
  153|       |     *
  154|       |     * The issue is that while s1 and s2 are small-range numbers, (s1 + 2^256 - 1) / 2 (mod n)
  155|       |     * and (s2 + 2^256 - 1) / 2 (mod n) are not, undoing the benefit of the splitting.
  156|       |     *
  157|       |     * To make it work, we want to modify the input scalar q first, before splitting, and then only
  158|       |     * add a 2^128 offset of the split results (so that they end up in the single 129-bit range
  159|       |     * [0,2^129]). A slightly smaller offset would work due to the bounds on the split, but we pick
  160|       |     * 2^128 for simplicity. Let s be the scalar fed to split_lambda, and f(q) the function to
  161|       |     * compute it from q:
  162|       |     *
  163|       |     *   To compute q*A:
  164|       |     *   - Compute s = f(q)
  165|       |     *   - Let s1, s2 = split_lambda(s)
  166|       |     *   - Let v1 = s1 + 2^128 (mod n)
  167|       |     *   - Let v2 = s2 + 2^128 (mod n)
  168|       |     *   - Let R1 = C_l(v1, A)
  169|       |     *   - Let R2 = C_l(v2, lambda*A)
  170|       |     *   - Return R1 + R2
  171|       |     *
  172|       |     * l will thus need to be at least 129, but we may overshoot by a few bits (see
  173|       |     * further), so keep it as a variable.
  174|       |     *
  175|       |     * To solve for s, we reason:
  176|       |     *     q*A  = R1 + R2
  177|       |     * <=> q*A  = C_l(s1 + 2^128, A) + C_l(s2 + 2^128, lambda*A)
  178|       |     * <=> q*A  = (2*(s1 + 2^128) + 1 - 2^l) * A + (2*(s2 + 2^128) + 1 - 2^l) * lambda*A
  179|       |     * <=> q*A  = (2*(s1 + s2*lambda) + (2^129 + 1 - 2^l) * (1 + lambda)) * A
  180|       |     * <=> q    = 2*(s1 + s2*lambda) + (2^129 + 1 - 2^l) * (1 + lambda) (mod n)
  181|       |     * <=> q    = 2*s + (2^129 + 1 - 2^l) * (1 + lambda) (mod n)
  182|       |     * <=> s    = (q + (2^l - 2^129 - 1) * (1 + lambda)) / 2 (mod n)
  183|       |     * <=> f(q) = (q + K) / 2 (mod n)
  184|       |     *            where K = (2^l - 2^129 - 1)*(1 + lambda) (mod n)
  185|       |     *
  186|       |     * We will process the computation of C_l(v1, A) and C_l(v2, lambda*A) in groups of
  187|       |     * ECMULT_CONST_GROUP_SIZE, so we set l to the smallest multiple of ECMULT_CONST_GROUP_SIZE
  188|       |     * that is not less than 129; this equals ECMULT_CONST_BITS.
  189|       |     */
  190|       |
  191|       |    /* The offset to add to s1 and s2 to make them non-negative. Equal to 2^128. */
  192|  9.89k|    static const secp256k1_scalar S_OFFSET = SECP256K1_SCALAR_CONST(0, 0, 0, 1, 0, 0, 0, 0);
  ------------------
  |  |   17|  9.89k|#define SECP256K1_SCALAR_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {{((uint64_t)(d1)) << 32 | (d0), ((uint64_t)(d3)) << 32 | (d2), ((uint64_t)(d5)) << 32 | (d4), ((uint64_t)(d7)) << 32 | (d6)}}
  ------------------
  193|  9.89k|    secp256k1_scalar s, v1, v2;
  194|  9.89k|    secp256k1_ge pre_a[ECMULT_CONST_TABLE_SIZE];
  195|  9.89k|    secp256k1_ge pre_a_lam[ECMULT_CONST_TABLE_SIZE];
  196|  9.89k|    secp256k1_fe global_z;
  197|  9.89k|    int group, i;
  198|       |
  199|       |    /* We're allowed to be non-constant time in the point, and the code below (in particular,
  200|       |     * secp256k1_ecmult_const_odd_multiples_table_globalz) cannot deal with infinity in a
  201|       |     * constant-time manner anyway. */
  202|  9.89k|    if (secp256k1_ge_is_infinity(a)) {
  ------------------
  |  Branch (202:9): [True: 0, False: 9.89k]
  ------------------
  203|      0|        secp256k1_gej_set_infinity(r);
  204|      0|        return;
  205|      0|    }
  206|       |
  207|       |    /* Compute v1 and v2. */
  208|  9.89k|    secp256k1_scalar_add(&s, q, &secp256k1_ecmult_const_K);
  209|  9.89k|    secp256k1_scalar_half(&s, &s);
  210|  9.89k|    secp256k1_scalar_split_lambda(&v1, &v2, &s);
  211|  9.89k|    secp256k1_scalar_add(&v1, &v1, &S_OFFSET);
  212|  9.89k|    secp256k1_scalar_add(&v2, &v2, &S_OFFSET);
  213|       |
  214|       |#ifdef VERIFY
  215|       |    /* Verify that v1 and v2 are in range [0, 2^129-1]. */
  216|       |    for (i = 129; i < 256; ++i) {
  217|       |        VERIFY_CHECK(secp256k1_scalar_get_bits_limb32(&v1, i, 1) == 0);
  218|       |        VERIFY_CHECK(secp256k1_scalar_get_bits_limb32(&v2, i, 1) == 0);
  219|       |    }
  220|       |#endif
  221|       |
  222|       |    /* Calculate odd multiples of A and A*lambda.
  223|       |     * All multiples are brought to the same Z 'denominator', which is stored
  224|       |     * in global_z. Due to secp256k1' isomorphism we can do all operations pretending
  225|       |     * that the Z coordinate was 1, use affine addition formulae, and correct
  226|       |     * the Z coordinate of the result once at the end.
  227|       |     */
  228|  9.89k|    secp256k1_gej_set_ge(r, a);
  229|  9.89k|    secp256k1_ecmult_const_odd_multiples_table_globalz(pre_a, &global_z, r);
  230|   168k|    for (i = 0; i < ECMULT_CONST_TABLE_SIZE; i++) {
  ------------------
  |  |   33|   168k|#define ECMULT_CONST_TABLE_SIZE (1L << (ECMULT_CONST_GROUP_SIZE - 1))
  |  |  ------------------
  |  |  |  |   30|   168k|#  define ECMULT_CONST_GROUP_SIZE 5
  |  |  ------------------
  ------------------
  |  Branch (230:17): [True: 158k, False: 9.89k]
  ------------------
  231|   158k|        secp256k1_ge_mul_lambda(&pre_a_lam[i], &pre_a[i]);
  232|   158k|    }
  233|       |
  234|       |    /* Next, we compute r = C_l(v1, A) + C_l(v2, lambda*A).
  235|       |     *
  236|       |     * We proceed in groups of ECMULT_CONST_GROUP_SIZE bits, operating on that many bits
  237|       |     * at a time, from high in v1, v2 to low. Call these bits1 (from v1) and bits2 (from v2).
  238|       |     *
  239|       |     * Now note that ECMULT_CONST_TABLE_GET_GE(&t, pre_a, bits1) loads into t a point equal
  240|       |     * to C_{ECMULT_CONST_GROUP_SIZE}(bits1, A), and analogously for pre_lam_a / bits2.
  241|       |     * This means that all we need to do is add these looked up values together, multiplied
  242|       |     * by 2^(ECMULT_GROUP_SIZE * group).
  243|       |     */
  244|   267k|    for (group = ECMULT_CONST_GROUPS - 1; group >= 0; --group) {
  ------------------
  |  |   34|  9.89k|#define ECMULT_CONST_GROUPS ((129 + ECMULT_CONST_GROUP_SIZE - 1) / ECMULT_CONST_GROUP_SIZE)
  |  |  ------------------
  |  |  |  |   30|  9.89k|#  define ECMULT_CONST_GROUP_SIZE 5
  |  |  ------------------
  |  |               #define ECMULT_CONST_GROUPS ((129 + ECMULT_CONST_GROUP_SIZE - 1) / ECMULT_CONST_GROUP_SIZE)
  |  |  ------------------
  |  |  |  |   30|  9.89k|#  define ECMULT_CONST_GROUP_SIZE 5
  |  |  ------------------
  ------------------
  |  Branch (244:43): [True: 257k, False: 9.89k]
  ------------------
  245|       |        /* Using the _var get_bits function is ok here, since it's only variable in offset and count, not in the scalar. */
  246|   257k|        unsigned int bits1 = secp256k1_scalar_get_bits_var(&v1, group * ECMULT_CONST_GROUP_SIZE, ECMULT_CONST_GROUP_SIZE);
  ------------------
  |  |   30|   257k|#  define ECMULT_CONST_GROUP_SIZE 5
  ------------------
                      unsigned int bits1 = secp256k1_scalar_get_bits_var(&v1, group * ECMULT_CONST_GROUP_SIZE, ECMULT_CONST_GROUP_SIZE);
  ------------------
  |  |   30|   257k|#  define ECMULT_CONST_GROUP_SIZE 5
  ------------------
  247|   257k|        unsigned int bits2 = secp256k1_scalar_get_bits_var(&v2, group * ECMULT_CONST_GROUP_SIZE, ECMULT_CONST_GROUP_SIZE);
  ------------------
  |  |   30|   257k|#  define ECMULT_CONST_GROUP_SIZE 5
  ------------------
                      unsigned int bits2 = secp256k1_scalar_get_bits_var(&v2, group * ECMULT_CONST_GROUP_SIZE, ECMULT_CONST_GROUP_SIZE);
  ------------------
  |  |   30|   257k|#  define ECMULT_CONST_GROUP_SIZE 5
  ------------------
  248|   257k|        secp256k1_ge t;
  249|   257k|        int j;
  250|       |
  251|   257k|        ECMULT_CONST_TABLE_GET_GE(&t, pre_a, bits1);
  ------------------
  |  |   61|   257k|#define ECMULT_CONST_TABLE_GET_GE(r,pre,n) do { \
  |  |   62|   257k|    unsigned int m = 0; \
  |  |   63|   257k|    /* If the top bit of n is 0, we want the negation. */ \
  |  |   64|   257k|    volatile unsigned int negative = ((n) >> (ECMULT_CONST_GROUP_SIZE - 1)) ^ 1; \
  |  |  ------------------
  |  |  |  |   30|   257k|#  define ECMULT_CONST_GROUP_SIZE 5
  |  |  ------------------
  |  |   65|   257k|    /* Let n[i] be the i-th bit of n, then the index is
  |  |   66|   257k|     *     sum(cnot(n[i]) * 2^i, i=0..l-2)
  |  |   67|   257k|     * where cnot(b) = b if n[l-1] = 1 and 1 - b otherwise.
  |  |   68|   257k|     * For example, if n = 4, in binary 0100, the index is 3, in binary 011.
  |  |   69|   257k|     *
  |  |   70|   257k|     * Proof:
  |  |   71|   257k|     *     Let
  |  |   72|   257k|     *         x = sum((2*n[i] - 1)*2^i, i=0..l-1)
  |  |   73|   257k|     *           = 2*sum(n[i] * 2^i, i=0..l-1) - 2^l + 1
  |  |   74|   257k|     *     be the value represented by n.
  |  |   75|   257k|     *     The index is (x - 1)/2 if x > 0 and -(x + 1)/2 otherwise.
  |  |   76|   257k|     *     Case x > 0:
  |  |   77|   257k|     *         n[l-1] = 1
  |  |   78|   257k|     *         index = sum(n[i] * 2^i, i=0..l-1) - 2^(l-1)
  |  |   79|   257k|     *               = sum(n[i] * 2^i, i=0..l-2)
  |  |   80|   257k|     *     Case x <= 0:
  |  |   81|   257k|     *         n[l-1] = 0
  |  |   82|   257k|     *          index = -(2*sum(n[i] * 2^i, i=0..l-1) - 2^l + 2)/2
  |  |   83|   257k|     *                = 2^(l-1) - 1 - sum(n[i] * 2^i, i=0..l-1)
  |  |   84|   257k|     *                = sum((1 - n[i]) * 2^i, i=0..l-2)
  |  |   85|   257k|     */ \
  |  |   86|   257k|    unsigned int index = ((unsigned int)(-negative) ^ n) & ((1U << (ECMULT_CONST_GROUP_SIZE - 1)) - 1U); \
  |  |  ------------------
  |  |  |  |   30|   257k|#  define ECMULT_CONST_GROUP_SIZE 5
  |  |  ------------------
  |  |   87|   257k|    secp256k1_fe neg_y; \
  |  |   88|   257k|    VERIFY_CHECK((n) < (1U << ECMULT_CONST_GROUP_SIZE)); \
  |  |   89|   257k|    VERIFY_CHECK(index < (1U << (ECMULT_CONST_GROUP_SIZE - 1))); \
  |  |   90|   257k|    /* Unconditionally set r->x = (pre)[m].x. r->y = (pre)[m].y. because it's either the correct one
  |  |   91|   257k|     * or will get replaced in the later iterations, this is needed to make sure `r` is initialized. */ \
  |  |   92|   257k|    (r)->x = (pre)[m].x; \
  |  |   93|   257k|    (r)->y = (pre)[m].y; \
  |  |   94|  4.11M|    for (m = 1; m < ECMULT_CONST_TABLE_SIZE; m++) { \
  |  |  ------------------
  |  |  |  |   33|  4.11M|#define ECMULT_CONST_TABLE_SIZE (1L << (ECMULT_CONST_GROUP_SIZE - 1))
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|  4.11M|#  define ECMULT_CONST_GROUP_SIZE 5
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (94:17): [True: 3.85M, False: 257k]
  |  |  ------------------
  |  |   95|  3.85M|        /* This loop is used to avoid secret data in array indices. See
  |  |   96|  3.85M|         * the comment in ecmult_gen_impl.h for rationale. */ \
  |  |   97|  3.85M|        secp256k1_fe_cmov(&(r)->x, &(pre)[m].x, m == index); \
  |  |  ------------------
  |  |  |  |   95|  3.85M|#  define secp256k1_fe_cmov secp256k1_fe_impl_cmov
  |  |  ------------------
  |  |   98|  3.85M|        secp256k1_fe_cmov(&(r)->y, &(pre)[m].y, m == index); \
  |  |  ------------------
  |  |  |  |   95|  3.85M|#  define secp256k1_fe_cmov secp256k1_fe_impl_cmov
  |  |  ------------------
  |  |   99|  3.85M|    } \
  |  |  100|   257k|    (r)->infinity = 0; \
  |  |  101|   257k|    secp256k1_fe_negate(&neg_y, &(r)->y, 1); \
  |  |  ------------------
  |  |  |  |  211|   257k|#define secp256k1_fe_negate(r, a, m) ASSERT_INT_CONST_AND_DO(m, secp256k1_fe_negate_unchecked(r, a, m))
  |  |  |  |  ------------------
  |  |  |  |  |  |   77|   257k|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |  |  |   78|   257k|    switch(42) { \
  |  |  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (80:9): [True: 0, False: 257k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |   81|      0|            break; \
  |  |  |  |  |  |   82|   257k|        default: ; \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (82:9): [True: 257k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |   83|   257k|    } \
  |  |  |  |  |  |   84|   257k|    stmt; \
  |  |  |  |  |  |   85|   257k|} while(0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (85:9): [Folded, False: 257k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  102|   257k|    secp256k1_fe_cmov(&(r)->y, &neg_y, negative); \
  |  |  ------------------
  |  |  |  |   95|   257k|#  define secp256k1_fe_cmov secp256k1_fe_impl_cmov
  |  |  ------------------
  |  |  103|   257k|} while(0)
  |  |  ------------------
  |  |  |  Branch (103:9): [Folded, False: 257k]
  |  |  ------------------
  ------------------
  252|   257k|        if (group == ECMULT_CONST_GROUPS - 1) {
  ------------------
  |  |   34|   257k|#define ECMULT_CONST_GROUPS ((129 + ECMULT_CONST_GROUP_SIZE - 1) / ECMULT_CONST_GROUP_SIZE)
  |  |  ------------------
  |  |  |  |   30|   257k|#  define ECMULT_CONST_GROUP_SIZE 5
  |  |  ------------------
  |  |               #define ECMULT_CONST_GROUPS ((129 + ECMULT_CONST_GROUP_SIZE - 1) / ECMULT_CONST_GROUP_SIZE)
  |  |  ------------------
  |  |  |  |   30|   257k|#  define ECMULT_CONST_GROUP_SIZE 5
  |  |  ------------------
  ------------------
  |  Branch (252:13): [True: 9.89k, False: 247k]
  ------------------
  253|       |            /* Directly set r in the first iteration. */
  254|  9.89k|            secp256k1_gej_set_ge(r, &t);
  255|   247k|        } else {
  256|       |            /* Shift the result so far up. */
  257|  1.48M|            for (j = 0; j < ECMULT_CONST_GROUP_SIZE; ++j) {
  ------------------
  |  |   30|  1.48M|#  define ECMULT_CONST_GROUP_SIZE 5
  ------------------
  |  Branch (257:25): [True: 1.23M, False: 247k]
  ------------------
  258|  1.23M|                secp256k1_gej_double(r, r);
  259|  1.23M|            }
  260|   247k|            secp256k1_gej_add_ge(r, r, &t);
  261|   247k|        }
  262|   257k|        ECMULT_CONST_TABLE_GET_GE(&t, pre_a_lam, bits2);
  ------------------
  |  |   61|   257k|#define ECMULT_CONST_TABLE_GET_GE(r,pre,n) do { \
  |  |   62|   257k|    unsigned int m = 0; \
  |  |   63|   257k|    /* If the top bit of n is 0, we want the negation. */ \
  |  |   64|   257k|    volatile unsigned int negative = ((n) >> (ECMULT_CONST_GROUP_SIZE - 1)) ^ 1; \
  |  |  ------------------
  |  |  |  |   30|   257k|#  define ECMULT_CONST_GROUP_SIZE 5
  |  |  ------------------
  |  |   65|   257k|    /* Let n[i] be the i-th bit of n, then the index is
  |  |   66|   257k|     *     sum(cnot(n[i]) * 2^i, i=0..l-2)
  |  |   67|   257k|     * where cnot(b) = b if n[l-1] = 1 and 1 - b otherwise.
  |  |   68|   257k|     * For example, if n = 4, in binary 0100, the index is 3, in binary 011.
  |  |   69|   257k|     *
  |  |   70|   257k|     * Proof:
  |  |   71|   257k|     *     Let
  |  |   72|   257k|     *         x = sum((2*n[i] - 1)*2^i, i=0..l-1)
  |  |   73|   257k|     *           = 2*sum(n[i] * 2^i, i=0..l-1) - 2^l + 1
  |  |   74|   257k|     *     be the value represented by n.
  |  |   75|   257k|     *     The index is (x - 1)/2 if x > 0 and -(x + 1)/2 otherwise.
  |  |   76|   257k|     *     Case x > 0:
  |  |   77|   257k|     *         n[l-1] = 1
  |  |   78|   257k|     *         index = sum(n[i] * 2^i, i=0..l-1) - 2^(l-1)
  |  |   79|   257k|     *               = sum(n[i] * 2^i, i=0..l-2)
  |  |   80|   257k|     *     Case x <= 0:
  |  |   81|   257k|     *         n[l-1] = 0
  |  |   82|   257k|     *          index = -(2*sum(n[i] * 2^i, i=0..l-1) - 2^l + 2)/2
  |  |   83|   257k|     *                = 2^(l-1) - 1 - sum(n[i] * 2^i, i=0..l-1)
  |  |   84|   257k|     *                = sum((1 - n[i]) * 2^i, i=0..l-2)
  |  |   85|   257k|     */ \
  |  |   86|   257k|    unsigned int index = ((unsigned int)(-negative) ^ n) & ((1U << (ECMULT_CONST_GROUP_SIZE - 1)) - 1U); \
  |  |  ------------------
  |  |  |  |   30|   257k|#  define ECMULT_CONST_GROUP_SIZE 5
  |  |  ------------------
  |  |   87|   257k|    secp256k1_fe neg_y; \
  |  |   88|   257k|    VERIFY_CHECK((n) < (1U << ECMULT_CONST_GROUP_SIZE)); \
  |  |   89|   257k|    VERIFY_CHECK(index < (1U << (ECMULT_CONST_GROUP_SIZE - 1))); \
  |  |   90|   257k|    /* Unconditionally set r->x = (pre)[m].x. r->y = (pre)[m].y. because it's either the correct one
  |  |   91|   257k|     * or will get replaced in the later iterations, this is needed to make sure `r` is initialized. */ \
  |  |   92|   257k|    (r)->x = (pre)[m].x; \
  |  |   93|   257k|    (r)->y = (pre)[m].y; \
  |  |   94|  4.11M|    for (m = 1; m < ECMULT_CONST_TABLE_SIZE; m++) { \
  |  |  ------------------
  |  |  |  |   33|  4.11M|#define ECMULT_CONST_TABLE_SIZE (1L << (ECMULT_CONST_GROUP_SIZE - 1))
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|  4.11M|#  define ECMULT_CONST_GROUP_SIZE 5
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (94:17): [True: 3.85M, False: 257k]
  |  |  ------------------
  |  |   95|  3.85M|        /* This loop is used to avoid secret data in array indices. See
  |  |   96|  3.85M|         * the comment in ecmult_gen_impl.h for rationale. */ \
  |  |   97|  3.85M|        secp256k1_fe_cmov(&(r)->x, &(pre)[m].x, m == index); \
  |  |  ------------------
  |  |  |  |   95|  3.85M|#  define secp256k1_fe_cmov secp256k1_fe_impl_cmov
  |  |  ------------------
  |  |   98|  3.85M|        secp256k1_fe_cmov(&(r)->y, &(pre)[m].y, m == index); \
  |  |  ------------------
  |  |  |  |   95|  3.85M|#  define secp256k1_fe_cmov secp256k1_fe_impl_cmov
  |  |  ------------------
  |  |   99|  3.85M|    } \
  |  |  100|   257k|    (r)->infinity = 0; \
  |  |  101|   257k|    secp256k1_fe_negate(&neg_y, &(r)->y, 1); \
  |  |  ------------------
  |  |  |  |  211|   257k|#define secp256k1_fe_negate(r, a, m) ASSERT_INT_CONST_AND_DO(m, secp256k1_fe_negate_unchecked(r, a, m))
  |  |  |  |  ------------------
  |  |  |  |  |  |   77|   257k|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |  |  |   78|   257k|    switch(42) { \
  |  |  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (80:9): [True: 0, False: 257k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |   81|      0|            break; \
  |  |  |  |  |  |   82|   257k|        default: ; \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (82:9): [True: 257k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |   83|   257k|    } \
  |  |  |  |  |  |   84|   257k|    stmt; \
  |  |  |  |  |  |   85|   257k|} while(0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (85:9): [Folded, False: 257k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  102|   257k|    secp256k1_fe_cmov(&(r)->y, &neg_y, negative); \
  |  |  ------------------
  |  |  |  |   95|   257k|#  define secp256k1_fe_cmov secp256k1_fe_impl_cmov
  |  |  ------------------
  |  |  103|   257k|} while(0)
  |  |  ------------------
  |  |  |  Branch (103:9): [Folded, False: 257k]
  |  |  ------------------
  ------------------
  263|   257k|        secp256k1_gej_add_ge(r, r, &t);
  264|   257k|    }
  265|       |
  266|       |    /* Map the result back to the secp256k1 curve from the isomorphic curve. */
  267|  9.89k|    secp256k1_fe_mul(&r->z, &r->z, &global_z);
  ------------------
  |  |   93|  9.89k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  268|  9.89k|}
secp256k1.c:secp256k1_ecmult_const_odd_multiples_table_globalz:
   44|  9.89k|static void secp256k1_ecmult_const_odd_multiples_table_globalz(secp256k1_ge *pre, secp256k1_fe *globalz, const secp256k1_gej *a) {
   45|  9.89k|    secp256k1_fe zr[ECMULT_CONST_TABLE_SIZE];
   46|       |
   47|  9.89k|    secp256k1_ecmult_odd_multiples_table(ECMULT_CONST_TABLE_SIZE, pre, zr, globalz, a);
  ------------------
  |  |   33|  9.89k|#define ECMULT_CONST_TABLE_SIZE (1L << (ECMULT_CONST_GROUP_SIZE - 1))
  |  |  ------------------
  |  |  |  |   30|  9.89k|#  define ECMULT_CONST_GROUP_SIZE 5
  |  |  ------------------
  ------------------
   48|  9.89k|    secp256k1_ge_table_set_globalz(ECMULT_CONST_TABLE_SIZE, pre, zr);
  ------------------
  |  |   33|  9.89k|#define ECMULT_CONST_TABLE_SIZE (1L << (ECMULT_CONST_GROUP_SIZE - 1))
  |  |  ------------------
  |  |  |  |   30|  9.89k|#  define ECMULT_CONST_GROUP_SIZE 5
  |  |  ------------------
  ------------------
   49|  9.89k|}

secp256k1.c:secp256k1_ecmult_gen_context_clear:
   26|      2|static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx) {
   27|      2|    ctx->built = 0;
   28|      2|    secp256k1_scalar_clear(&ctx->scalar_offset);
   29|      2|    secp256k1_ge_clear(&ctx->ge_offset);
   30|      2|    secp256k1_fe_clear(&ctx->proj_blind);
   31|      2|}
secp256k1.c:secp256k1_ecmult_gen_context_is_built:
   22|  61.0k|static int secp256k1_ecmult_gen_context_is_built(const secp256k1_ecmult_gen_context* ctx) {
   23|  61.0k|    return ctx->built;
   24|  61.0k|}
secp256k1.c:secp256k1_ecmult_gen:
   54|  61.0k|static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {
   55|  61.0k|    uint32_t comb_off;
   56|  61.0k|    secp256k1_ge add;
   57|  61.0k|    secp256k1_fe neg;
   58|  61.0k|    secp256k1_ge_storage adds;
   59|  61.0k|    secp256k1_scalar d;
   60|       |    /* Array of uint32_t values large enough to store COMB_BITS bits. Only the bottom
   61|       |     * 8 are ever nonzero, but having the zero padding at the end if COMB_BITS>256
   62|       |     * avoids the need to deal with out-of-bounds reads from a scalar. */
   63|  61.0k|    uint32_t recoded[(COMB_BITS + 31) >> 5] = {0};
   64|  61.0k|    int first = 1, i;
   65|       |
   66|  61.0k|    memset(&adds, 0, sizeof(adds));
   67|       |
   68|       |    /* We want to compute R = gn*G.
   69|       |     *
   70|       |     * To blind the scalar used in the computation, we rewrite this to be
   71|       |     * R = (gn - b)*G + b*G, with a blinding value b determined by the context.
   72|       |     *
   73|       |     * The multiplication (gn-b)*G will be performed using a signed-digit multi-comb (see Section
   74|       |     * 3.3 of "Fast and compact elliptic-curve cryptography" by Mike Hamburg,
   75|       |     * https://eprint.iacr.org/2012/309).
   76|       |     *
   77|       |     * Let comb(s, P) = sum((2*s[i]-1)*2^i*P for i=0..COMB_BITS-1), where s[i] is the i'th bit of
   78|       |     * the binary representation of scalar s. So the s[i] values determine whether -2^i*P (s[i]=0)
   79|       |     * or +2^i*P (s[i]=1) are added together. COMB_BITS is at least 256, so all bits of s are
   80|       |     * covered. By manipulating:
   81|       |     *
   82|       |     *     comb(s, P) = sum((2*s[i]-1)*2^i*P for i=0..COMB_BITS-1)
   83|       |     * <=> comb(s, P) = sum((2*s[i]-1)*2^i for i=0..COMB_BITS-1) * P
   84|       |     * <=> comb(s, P) = (2*sum(s[i]*2^i for i=0..COMB_BITS-1) - sum(2^i for i=0..COMB_BITS-1)) * P
   85|       |     * <=> comb(s, P) = (2*s - (2^COMB_BITS - 1)) * P
   86|       |     *
   87|       |     * If we wanted to compute (gn-b)*G as comb(s, G), it would need to hold that
   88|       |     *
   89|       |     *     (gn - b) * G = (2*s - (2^COMB_BITS - 1)) * G
   90|       |     * <=> s = (gn - b + (2^COMB_BITS - 1))/2 (mod order)
   91|       |     *
   92|       |     * We use an alternative here that avoids the modular division by two: instead we compute
   93|       |     * (gn-b)*G as comb(d, G/2). For that to hold it must be the case that
   94|       |     *
   95|       |     *     (gn - b) * G = (2*d - (2^COMB_BITS - 1)) * (G/2)
   96|       |     * <=> d = gn - b + (2^COMB_BITS - 1)/2 (mod order)
   97|       |     *
   98|       |     * Adding precomputation, our final equations become:
   99|       |     *
  100|       |     *     ctx->scalar_offset = (2^COMB_BITS - 1)/2 - b (mod order)
  101|       |     *     ctx->ge_offset = b*G
  102|       |     *     d = gn + ctx->scalar_offset (mod order)
  103|       |     *     R = comb(d, G/2) + ctx->ge_offset
  104|       |     *
  105|       |     * comb(d, G/2) function is then computed by summing + or - 2^(i-1)*G, for i=0..COMB_BITS-1,
  106|       |     * depending on the value of the bits d[i] of the binary representation of scalar d.
  107|       |     */
  108|       |
  109|       |    /* Compute the scalar d = (gn + ctx->scalar_offset). */
  110|  61.0k|    secp256k1_scalar_add(&d, &ctx->scalar_offset, gn);
  111|       |    /* Convert to recoded array. */
  112|   549k|    for (i = 0; i < 8 && i < ((COMB_BITS + 31) >> 5); ++i) {
  ------------------
  |  |   84|   488k|#define COMB_BITS (COMB_BLOCKS * COMB_TEETH * COMB_SPACING)
  |  |  ------------------
  |  |  |  |   78|   488k|#define COMB_SPACING CEIL_DIV(COMB_RANGE, COMB_BLOCKS * COMB_TEETH)
  |  |  |  |  ------------------
  |  |  |  |  |  |  180|   488k|#define CEIL_DIV(x, y) (1 + ((x) - 1) / (y))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (112:17): [True: 488k, False: 61.0k]
  |  Branch (112:26): [True: 488k, False: 0]
  ------------------
  113|   488k|        recoded[i] = secp256k1_scalar_get_bits_limb32(&d, 32 * i, 32);
  114|   488k|    }
  115|  61.0k|    secp256k1_scalar_clear(&d);
  116|       |
  117|       |    /* In secp256k1_ecmult_gen_prec_table we have precomputed sums of the
  118|       |     * (2*d[i]-1) * 2^(i-1) * G points, for various combinations of i positions.
  119|       |     * We rewrite our equation in terms of these table entries.
  120|       |     *
  121|       |     * Let mask(b) = sum(2^((b*COMB_TEETH + t)*COMB_SPACING) for t=0..COMB_TEETH-1),
  122|       |     * with b ranging from 0 to COMB_BLOCKS-1. So for example with COMB_BLOCKS=11,
  123|       |     * COMB_TEETH=6, COMB_SPACING=4, we would have:
  124|       |     *   mask(0)  = 2^0   + 2^4   + 2^8   + 2^12  + 2^16  + 2^20,
  125|       |     *   mask(1)  = 2^24  + 2^28  + 2^32  + 2^36  + 2^40  + 2^44,
  126|       |     *   mask(2)  = 2^48  + 2^52  + 2^56  + 2^60  + 2^64  + 2^68,
  127|       |     *   ...
  128|       |     *   mask(10) = 2^240 + 2^244 + 2^248 + 2^252 + 2^256 + 2^260
  129|       |     *
  130|       |     * We will split up the bits d[i] using these masks. Specifically, each mask is
  131|       |     * used COMB_SPACING times, with different shifts:
  132|       |     *
  133|       |     * d = (d & mask(0)<<0) + (d & mask(1)<<0) + ... + (d & mask(COMB_BLOCKS-1)<<0) +
  134|       |     *     (d & mask(0)<<1) + (d & mask(1)<<1) + ... + (d & mask(COMB_BLOCKS-1)<<1) +
  135|       |     *     ...
  136|       |     *     (d & mask(0)<<(COMB_SPACING-1)) + ...
  137|       |     *
  138|       |     * Now define table(b, m) = (m - mask(b)/2) * G, and we will precompute these values for
  139|       |     * b=0..COMB_BLOCKS-1, and for all values m which (d & mask(b)) can take (so m can take on
  140|       |     * 2^COMB_TEETH distinct values).
  141|       |     *
  142|       |     * If m=(d & mask(b)), then table(b, m) is the sum of 2^i * (2*d[i]-1) * G/2, with i
  143|       |     * iterating over the set bits in mask(b). In our example, table(2, 2^48 + 2^56 + 2^68)
  144|       |     * would equal (2^48 - 2^52 + 2^56 - 2^60 - 2^64 + 2^68) * G/2.
  145|       |     *
  146|       |     * With that, we can rewrite comb(d, G/2) as:
  147|       |     *
  148|       |     *     2^0 * (table(0, d>>0 & mask(0)) + ... + table(COMB_BLOCKS-1, d>>0 & mask(COMP_BLOCKS-1)))
  149|       |     *   + 2^1 * (table(0, d>>1 & mask(0)) + ... + table(COMB_BLOCKS-1, d>>1 & mask(COMP_BLOCKS-1)))
  150|       |     *   + 2^2 * (table(0, d>>2 & mask(0)) + ... + table(COMB_BLOCKS-1, d>>2 & mask(COMP_BLOCKS-1)))
  151|       |     *   + ...
  152|       |     *   + 2^(COMB_SPACING-1) * (table(0, d>>(COMB_SPACING-1) & mask(0)) + ...)
  153|       |     *
  154|       |     * Or more generically as
  155|       |     *
  156|       |     *   sum(2^i * sum(table(b, d>>i & mask(b)), b=0..COMB_BLOCKS-1), i=0..COMB_SPACING-1)
  157|       |     *
  158|       |     * This is implemented using an outer loop that runs in reverse order over the lines of this
  159|       |     * equation, which in each iteration runs an inner loop that adds the terms of that line and
  160|       |     * then doubles the result before proceeding to the next line.
  161|       |     *
  162|       |     * In pseudocode:
  163|       |     *   c = infinity
  164|       |     *   for comb_off in range(COMB_SPACING - 1, -1, -1):
  165|       |     *     for block in range(COMB_BLOCKS):
  166|       |     *       c += table(block, (d >> comb_off) & mask(block))
  167|       |     *     if comb_off > 0:
  168|       |     *       c = 2*c
  169|       |     *   return c
  170|       |     *
  171|       |     * This computes c = comb(d, G/2), and thus finally R = c + ctx->ge_offset. Note that it would
  172|       |     * be possible to apply an initial offset instead of a final offset (moving ge_offset to take
  173|       |     * the place of infinity above), but the chosen approach allows using (in a future improvement)
  174|       |     * an incomplete addition formula for most of the multiplication.
  175|       |     *
  176|       |     * The last question is how to implement the table(b, m) function. For any value of b,
  177|       |     * m=(d & mask(b)) can only take on at most 2^COMB_TEETH possible values (the last one may have
  178|       |     * fewer as there mask(b) may exceed the curve order). So we could create COMB_BLOCK tables
  179|       |     * which contain a value for each such m value.
  180|       |     *
  181|       |     * Now note that if m=(d & mask(b)), then flipping the relevant bits of m results in negating
  182|       |     * the result of table(b, m). This is because table(b,m XOR mask(b)) = table(b, mask(b) - m) =
  183|       |     * (mask(b) - m - mask(b)/2)*G = (-m + mask(b)/2)*G = -(m - mask(b)/2)*G = -table(b, m).
  184|       |     * Because of this it suffices to only store the first half of the m values for every b. If an
  185|       |     * entry from the second half is needed, we look up its bit-flipped version instead, and negate
  186|       |     * it.
  187|       |     *
  188|       |     * secp256k1_ecmult_gen_prec_table[b][index] stores the table(b, m) entries. Index
  189|       |     * is the relevant mask(b) bits of m packed together without gaps. */
  190|       |
  191|       |    /* Outer loop: iterate over comb_off from COMB_SPACING - 1 down to 0. */
  192|  61.0k|    comb_off = COMB_SPACING - 1;
  ------------------
  |  |   78|  61.0k|#define COMB_SPACING CEIL_DIV(COMB_RANGE, COMB_BLOCKS * COMB_TEETH)
  |  |  ------------------
  |  |  |  |  180|  61.0k|#define CEIL_DIV(x, y) (1 + ((x) - 1) / (y))
  |  |  ------------------
  ------------------
  193|  61.0k|    while (1) {
  ------------------
  |  Branch (193:12): [True: 61.0k, Folded]
  ------------------
  194|  61.0k|        uint32_t block;
  195|  61.0k|        uint32_t bit_pos = comb_off;
  196|       |        /* Inner loop: for each block, add table entries to the result. */
  197|  2.68M|        for (block = 0; block < COMB_BLOCKS; ++block) {
  ------------------
  |  Branch (197:25): [True: 2.62M, False: 61.0k]
  ------------------
  198|       |            /* Gather the mask(block)-selected bits of d into bits. They're packed:
  199|       |             * bits[tooth] = d[(block*COMB_TEETH + tooth)*COMB_SPACING + comb_off]. */
  200|  2.62M|            uint32_t bits = 0, sign, abs, index, tooth;
  201|       |            /* Instead of reading individual bits here to construct the bits variable,
  202|       |             * build up the result by xoring rotated reads together. In every iteration,
  203|       |             * one additional bit is made correct, starting at the bottom. The bits
  204|       |             * above that contain junk. This reduces leakage by avoiding computations
  205|       |             * on variables that can have only a low number of possible values (e.g.,
  206|       |             * just two values when reading a single bit into a variable.) See:
  207|       |             * https://www.usenix.org/system/files/conference/usenixsecurity18/sec18-alam.pdf
  208|       |             */
  209|  18.3M|            for (tooth = 0; tooth < COMB_TEETH; ++tooth) {
  ------------------
  |  Branch (209:29): [True: 15.7M, False: 2.62M]
  ------------------
  210|       |                /* Construct bitdata s.t. the bottom bit is the bit we'd like to read.
  211|       |                 *
  212|       |                 * We could just set bitdata = recoded[bit_pos >> 5] >> (bit_pos & 0x1f)
  213|       |                 * but this would simply discard the bits that fall off at the bottom,
  214|       |                 * and thus, for example, bitdata could still have only two values if we
  215|       |                 * happen to shift by exactly 31 positions. We use a rotation instead,
  216|       |                 * which ensures that bitdata doesn't loose entropy. This relies on the
  217|       |                 * rotation being atomic, i.e., the compiler emitting an actual rot
  218|       |                 * instruction. */
  219|  15.7M|                uint32_t bitdata = secp256k1_rotr32(recoded[bit_pos >> 5], bit_pos & 0x1f);
  220|       |
  221|       |                /* Clear the bit at position tooth, but sssh, don't tell clang. */
  222|  15.7M|                uint32_t volatile vmask = ~(1 << tooth);
  223|  15.7M|                bits &= vmask;
  224|       |
  225|       |                /* Write the bit into position tooth (and junk into higher bits). */
  226|  15.7M|                bits ^= bitdata << tooth;
  227|  15.7M|                bit_pos += COMB_SPACING;
  ------------------
  |  |   78|  15.7M|#define COMB_SPACING CEIL_DIV(COMB_RANGE, COMB_BLOCKS * COMB_TEETH)
  |  |  ------------------
  |  |  |  |  180|  15.7M|#define CEIL_DIV(x, y) (1 + ((x) - 1) / (y))
  |  |  ------------------
  ------------------
  228|  15.7M|            }
  229|       |
  230|       |            /* If the top bit of bits is 1, flip them all (corresponding to looking up
  231|       |             * the negated table value), and remember to negate the result in sign. */
  232|  2.62M|            sign = (bits >> (COMB_TEETH - 1)) & 1;
  233|  2.62M|            abs = (bits ^ -sign) & (COMB_POINTS - 1);
  ------------------
  |  |   86|  2.62M|#define COMB_POINTS (1 << (COMB_TEETH - 1))
  ------------------
  234|  2.62M|            VERIFY_CHECK(sign == 0 || sign == 1);
  235|  2.62M|            VERIFY_CHECK(abs < COMB_POINTS);
  236|       |
  237|       |            /** This uses a conditional move to avoid any secret data in array indexes.
  238|       |             *   _Any_ use of secret indexes has been demonstrated to result in timing
  239|       |             *   sidechannels, even when the cache-line access patterns are uniform.
  240|       |             *  See also:
  241|       |             *   "A word of warning", CHES 2013 Rump Session, by Daniel J. Bernstein and Peter Schwabe
  242|       |             *    (https://cryptojedi.org/peter/data/chesrump-20130822.pdf) and
  243|       |             *   "Cache Attacks and Countermeasures: the Case of AES", RSA 2006,
  244|       |             *    by Dag Arne Osvik, Adi Shamir, and Eran Tromer
  245|       |             *    (https://www.tau.ac.il/~tromer/papers/cache.pdf)
  246|       |             */
  247|  86.6M|            for (index = 0; index < COMB_POINTS; ++index) {
  ------------------
  |  |   86|  86.6M|#define COMB_POINTS (1 << (COMB_TEETH - 1))
  ------------------
  |  Branch (247:29): [True: 83.9M, False: 2.62M]
  ------------------
  248|  83.9M|                secp256k1_ge_storage_cmov(&adds, &secp256k1_ecmult_gen_prec_table[block][index], index == abs);
  249|  83.9M|            }
  250|       |
  251|       |            /* Set add=adds or add=-adds, in constant time, based on sign. */
  252|  2.62M|            secp256k1_ge_from_storage(&add, &adds);
  253|  2.62M|            secp256k1_fe_negate(&neg, &add.y, 1);
  ------------------
  |  |  211|  2.62M|#define secp256k1_fe_negate(r, a, m) ASSERT_INT_CONST_AND_DO(m, secp256k1_fe_negate_unchecked(r, a, m))
  |  |  ------------------
  |  |  |  |   77|  2.62M|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |   78|  2.62M|    switch(42) { \
  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:9): [True: 0, False: 2.62M]
  |  |  |  |  ------------------
  |  |  |  |   81|      0|            break; \
  |  |  |  |   82|  2.62M|        default: ; \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:9): [True: 2.62M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   83|  2.62M|    } \
  |  |  |  |   84|  2.62M|    stmt; \
  |  |  |  |   85|  2.62M|} while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (85:9): [Folded, False: 2.62M]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  254|  2.62M|            secp256k1_fe_cmov(&add.y, &neg, sign);
  ------------------
  |  |   95|  2.62M|#  define secp256k1_fe_cmov secp256k1_fe_impl_cmov
  ------------------
  255|       |
  256|       |            /* Add the looked up and conditionally negated value to r. */
  257|  2.62M|            if (EXPECT(first, 0)) {
  ------------------
  |  |  136|  2.62M|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  ------------------
  |  |  |  Branch (136:21): [True: 61.0k, False: 2.56M]
  |  |  ------------------
  ------------------
  258|       |                /* If this is the first table lookup, we can skip addition. */
  259|  61.0k|                secp256k1_gej_set_ge(r, &add);
  260|       |                /* Give the entry a random Z coordinate to blind intermediary results. */
  261|  61.0k|                secp256k1_gej_rescale(r, &ctx->proj_blind);
  262|  61.0k|                first = 0;
  263|  2.56M|            } else {
  264|  2.56M|                secp256k1_gej_add_ge(r, r, &add);
  265|  2.56M|            }
  266|  2.62M|        }
  267|       |
  268|       |        /* Double the result, except in the last iteration. */
  269|  61.0k|        if (comb_off-- == 0) break;
  ------------------
  |  Branch (269:13): [True: 61.0k, False: 0]
  ------------------
  270|      0|        secp256k1_gej_double(r, r);
  271|      0|    }
  272|       |
  273|       |    /* Correct for the scalar_offset added at the start (ge_offset = b*G, while b was
  274|       |     * subtracted from the input scalar gn). */
  275|  61.0k|    secp256k1_gej_add_ge(r, r, &ctx->ge_offset);
  276|       |
  277|       |    /* Cleanup. */
  278|  61.0k|    secp256k1_fe_clear(&neg);
  279|  61.0k|    secp256k1_ge_clear(&add);
  280|  61.0k|    secp256k1_memclear(&adds, sizeof(adds));
  281|  61.0k|    secp256k1_memclear(&recoded, sizeof(recoded));
  282|  61.0k|}

secp256k1.c:secp256k1_ecmult:
  349|  5.70k|static void secp256k1_ecmult(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_scalar *na, const secp256k1_scalar *ng) {
  350|  5.70k|    secp256k1_fe aux[ECMULT_TABLE_SIZE(WINDOW_A)];
  351|  5.70k|    secp256k1_ge pre_a[ECMULT_TABLE_SIZE(WINDOW_A)];
  352|  5.70k|    struct secp256k1_strauss_point_state ps[1];
  353|  5.70k|    struct secp256k1_strauss_state state;
  354|       |
  355|  5.70k|    state.aux = aux;
  356|  5.70k|    state.pre_a = pre_a;
  357|  5.70k|    state.ps = ps;
  358|  5.70k|    secp256k1_ecmult_strauss_wnaf(&state, r, 1, a, na, ng);
  359|  5.70k|}
secp256k1.c:secp256k1_ecmult_strauss_wnaf:
  237|  5.70k|static void secp256k1_ecmult_strauss_wnaf(const struct secp256k1_strauss_state *state, secp256k1_gej *r, size_t num, const secp256k1_gej *a, const secp256k1_scalar *na, const secp256k1_scalar *ng) {
  238|  5.70k|    secp256k1_ge tmpa;
  239|  5.70k|    secp256k1_fe Z;
  240|       |    /* Split G factors. */
  241|  5.70k|    secp256k1_scalar ng_1, ng_128;
  242|  5.70k|    int wnaf_ng_1[129];
  243|  5.70k|    int bits_ng_1 = 0;
  244|  5.70k|    int wnaf_ng_128[129];
  245|  5.70k|    int bits_ng_128 = 0;
  246|  5.70k|    int i;
  247|  5.70k|    int bits = 0;
  248|  5.70k|    size_t np;
  249|  5.70k|    size_t no = 0;
  250|       |
  251|  5.70k|    secp256k1_fe_set_int(&Z, 1);
  ------------------
  |  |   83|  5.70k|#  define secp256k1_fe_set_int secp256k1_fe_impl_set_int
  ------------------
  252|  11.4k|    for (np = 0; np < num; ++np) {
  ------------------
  |  Branch (252:18): [True: 5.70k, False: 5.70k]
  ------------------
  253|  5.70k|        secp256k1_gej tmp;
  254|  5.70k|        secp256k1_scalar na_1, na_lam;
  255|  5.70k|        if (secp256k1_scalar_is_zero(&na[np]) || secp256k1_gej_is_infinity(&a[np])) {
  ------------------
  |  Branch (255:13): [True: 0, False: 5.70k]
  |  Branch (255:50): [True: 0, False: 5.70k]
  ------------------
  256|      0|            continue;
  257|      0|        }
  258|       |        /* split na into na_1 and na_lam (where na = na_1 + na_lam*lambda, and na_1 and na_lam are ~128 bit) */
  259|  5.70k|        secp256k1_scalar_split_lambda(&na_1, &na_lam, &na[np]);
  260|       |
  261|       |        /* build wnaf representation for na_1 and na_lam. */
  262|  5.70k|        state->ps[no].bits_na_1   = secp256k1_ecmult_wnaf(state->ps[no].wnaf_na_1,   129, &na_1,   WINDOW_A);
  ------------------
  |  |   32|  5.70k|#  define WINDOW_A 5
  ------------------
  263|  5.70k|        state->ps[no].bits_na_lam = secp256k1_ecmult_wnaf(state->ps[no].wnaf_na_lam, 129, &na_lam, WINDOW_A);
  ------------------
  |  |   32|  5.70k|#  define WINDOW_A 5
  ------------------
  264|  5.70k|        VERIFY_CHECK(state->ps[no].bits_na_1 <= 129);
  265|  5.70k|        VERIFY_CHECK(state->ps[no].bits_na_lam <= 129);
  266|  5.70k|        if (state->ps[no].bits_na_1 > bits) {
  ------------------
  |  Branch (266:13): [True: 5.70k, False: 0]
  ------------------
  267|  5.70k|            bits = state->ps[no].bits_na_1;
  268|  5.70k|        }
  269|  5.70k|        if (state->ps[no].bits_na_lam > bits) {
  ------------------
  |  Branch (269:13): [True: 2.28k, False: 3.41k]
  ------------------
  270|  2.28k|            bits = state->ps[no].bits_na_lam;
  271|  2.28k|        }
  272|       |
  273|       |        /* Calculate odd multiples of a.
  274|       |         * All multiples are brought to the same Z 'denominator', which is stored
  275|       |         * in Z. Due to secp256k1' isomorphism we can do all operations pretending
  276|       |         * that the Z coordinate was 1, use affine addition formulae, and correct
  277|       |         * the Z coordinate of the result once at the end.
  278|       |         * The exception is the precomputed G table points, which are actually
  279|       |         * affine. Compared to the base used for other points, they have a Z ratio
  280|       |         * of 1/Z, so we can use secp256k1_gej_add_zinv_var, which uses the same
  281|       |         * isomorphism to efficiently add with a known Z inverse.
  282|       |         */
  283|  5.70k|        tmp = a[np];
  284|  5.70k|        if (no) {
  ------------------
  |  Branch (284:13): [True: 0, False: 5.70k]
  ------------------
  285|      0|            secp256k1_gej_rescale(&tmp, &Z);
  286|      0|        }
  287|  5.70k|        secp256k1_ecmult_odd_multiples_table(ECMULT_TABLE_SIZE(WINDOW_A), state->pre_a + no * ECMULT_TABLE_SIZE(WINDOW_A), state->aux + no * ECMULT_TABLE_SIZE(WINDOW_A), &Z, &tmp);
  ------------------
  |  |   41|  5.70k|#define ECMULT_TABLE_SIZE(w) (1L << ((w)-2))
  ------------------
                      secp256k1_ecmult_odd_multiples_table(ECMULT_TABLE_SIZE(WINDOW_A), state->pre_a + no * ECMULT_TABLE_SIZE(WINDOW_A), state->aux + no * ECMULT_TABLE_SIZE(WINDOW_A), &Z, &tmp);
  ------------------
  |  |   41|  5.70k|#define ECMULT_TABLE_SIZE(w) (1L << ((w)-2))
  ------------------
                      secp256k1_ecmult_odd_multiples_table(ECMULT_TABLE_SIZE(WINDOW_A), state->pre_a + no * ECMULT_TABLE_SIZE(WINDOW_A), state->aux + no * ECMULT_TABLE_SIZE(WINDOW_A), &Z, &tmp);
  ------------------
  |  |   41|  5.70k|#define ECMULT_TABLE_SIZE(w) (1L << ((w)-2))
  ------------------
  288|  5.70k|        if (no) secp256k1_fe_mul(state->aux + no * ECMULT_TABLE_SIZE(WINDOW_A), state->aux + no * ECMULT_TABLE_SIZE(WINDOW_A), &(a[np].z));
  ------------------
  |  |   93|      0|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
                      if (no) secp256k1_fe_mul(state->aux + no * ECMULT_TABLE_SIZE(WINDOW_A), state->aux + no * ECMULT_TABLE_SIZE(WINDOW_A), &(a[np].z));
  ------------------
  |  |   41|      0|#define ECMULT_TABLE_SIZE(w) (1L << ((w)-2))
  ------------------
                      if (no) secp256k1_fe_mul(state->aux + no * ECMULT_TABLE_SIZE(WINDOW_A), state->aux + no * ECMULT_TABLE_SIZE(WINDOW_A), &(a[np].z));
  ------------------
  |  |   41|      0|#define ECMULT_TABLE_SIZE(w) (1L << ((w)-2))
  ------------------
  |  Branch (288:13): [True: 0, False: 5.70k]
  ------------------
  289|       |
  290|  5.70k|        ++no;
  291|  5.70k|    }
  292|       |
  293|       |    /* Bring them to the same Z denominator. */
  294|  5.70k|    if (no) {
  ------------------
  |  Branch (294:9): [True: 5.70k, False: 0]
  ------------------
  295|  5.70k|        secp256k1_ge_table_set_globalz(ECMULT_TABLE_SIZE(WINDOW_A) * no, state->pre_a, state->aux);
  ------------------
  |  |   41|  5.70k|#define ECMULT_TABLE_SIZE(w) (1L << ((w)-2))
  ------------------
  296|  5.70k|    }
  297|       |
  298|  11.4k|    for (np = 0; np < no; ++np) {
  ------------------
  |  Branch (298:18): [True: 5.70k, False: 5.70k]
  ------------------
  299|  51.3k|        for (i = 0; i < ECMULT_TABLE_SIZE(WINDOW_A); i++) {
  ------------------
  |  |   41|  51.3k|#define ECMULT_TABLE_SIZE(w) (1L << ((w)-2))
  ------------------
  |  Branch (299:21): [True: 45.6k, False: 5.70k]
  ------------------
  300|  45.6k|            secp256k1_fe_mul(&state->aux[np * ECMULT_TABLE_SIZE(WINDOW_A) + i], &state->pre_a[np * ECMULT_TABLE_SIZE(WINDOW_A) + i].x, &secp256k1_const_beta);
  ------------------
  |  |   93|  45.6k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
                          secp256k1_fe_mul(&state->aux[np * ECMULT_TABLE_SIZE(WINDOW_A) + i], &state->pre_a[np * ECMULT_TABLE_SIZE(WINDOW_A) + i].x, &secp256k1_const_beta);
  ------------------
  |  |   41|  45.6k|#define ECMULT_TABLE_SIZE(w) (1L << ((w)-2))
  ------------------
                          secp256k1_fe_mul(&state->aux[np * ECMULT_TABLE_SIZE(WINDOW_A) + i], &state->pre_a[np * ECMULT_TABLE_SIZE(WINDOW_A) + i].x, &secp256k1_const_beta);
  ------------------
  |  |   41|  45.6k|#define ECMULT_TABLE_SIZE(w) (1L << ((w)-2))
  ------------------
  301|  45.6k|        }
  302|  5.70k|    }
  303|       |
  304|  5.70k|    if (ng) {
  ------------------
  |  Branch (304:9): [True: 5.70k, False: 0]
  ------------------
  305|       |        /* split ng into ng_1 and ng_128 (where gn = gn_1 + gn_128*2^128, and gn_1 and gn_128 are ~128 bit) */
  306|  5.70k|        secp256k1_scalar_split_128(&ng_1, &ng_128, ng);
  307|       |
  308|       |        /* Build wnaf representation for ng_1 and ng_128 */
  309|  5.70k|        bits_ng_1   = secp256k1_ecmult_wnaf(wnaf_ng_1,   129, &ng_1,   WINDOW_G);
  ------------------
  |  |   31|  5.70k|#    define WINDOW_G ECMULT_WINDOW_SIZE
  ------------------
  310|  5.70k|        bits_ng_128 = secp256k1_ecmult_wnaf(wnaf_ng_128, 129, &ng_128, WINDOW_G);
  ------------------
  |  |   31|  5.70k|#    define WINDOW_G ECMULT_WINDOW_SIZE
  ------------------
  311|  5.70k|        if (bits_ng_1 > bits) {
  ------------------
  |  Branch (311:13): [True: 1.42k, False: 4.27k]
  ------------------
  312|  1.42k|            bits = bits_ng_1;
  313|  1.42k|        }
  314|  5.70k|        if (bits_ng_128 > bits) {
  ------------------
  |  Branch (314:13): [True: 936, False: 4.76k]
  ------------------
  315|    936|            bits = bits_ng_128;
  316|    936|        }
  317|  5.70k|    }
  318|       |
  319|  5.70k|    secp256k1_gej_set_infinity(r);
  320|       |
  321|   732k|    for (i = bits - 1; i >= 0; i--) {
  ------------------
  |  Branch (321:24): [True: 726k, False: 5.70k]
  ------------------
  322|   726k|        int n;
  323|   726k|        secp256k1_gej_double_var(r, r, NULL);
  324|  1.45M|        for (np = 0; np < no; ++np) {
  ------------------
  |  Branch (324:22): [True: 726k, False: 726k]
  ------------------
  325|   726k|            if (i < state->ps[np].bits_na_1 && (n = state->ps[np].wnaf_na_1[i])) {
  ------------------
  |  Branch (325:17): [True: 714k, False: 11.4k]
  |  Branch (325:48): [True: 123k, False: 591k]
  ------------------
  326|   123k|                secp256k1_ecmult_table_get_ge(&tmpa, state->pre_a + np * ECMULT_TABLE_SIZE(WINDOW_A), n, WINDOW_A);
  ------------------
  |  |   41|   123k|#define ECMULT_TABLE_SIZE(w) (1L << ((w)-2))
  ------------------
                              secp256k1_ecmult_table_get_ge(&tmpa, state->pre_a + np * ECMULT_TABLE_SIZE(WINDOW_A), n, WINDOW_A);
  ------------------
  |  |   32|   123k|#  define WINDOW_A 5
  ------------------
  327|   123k|                secp256k1_gej_add_ge_var(r, r, &tmpa, NULL);
  328|   123k|            }
  329|   726k|            if (i < state->ps[np].bits_na_lam && (n = state->ps[np].wnaf_na_lam[i])) {
  ------------------
  |  Branch (329:17): [True: 713k, False: 12.4k]
  |  Branch (329:50): [True: 123k, False: 590k]
  ------------------
  330|   123k|                secp256k1_ecmult_table_get_ge_lambda(&tmpa, state->pre_a + np * ECMULT_TABLE_SIZE(WINDOW_A), state->aux + np * ECMULT_TABLE_SIZE(WINDOW_A), n, WINDOW_A);
  ------------------
  |  |   41|   123k|#define ECMULT_TABLE_SIZE(w) (1L << ((w)-2))
  ------------------
                              secp256k1_ecmult_table_get_ge_lambda(&tmpa, state->pre_a + np * ECMULT_TABLE_SIZE(WINDOW_A), state->aux + np * ECMULT_TABLE_SIZE(WINDOW_A), n, WINDOW_A);
  ------------------
  |  |   41|   123k|#define ECMULT_TABLE_SIZE(w) (1L << ((w)-2))
  ------------------
                              secp256k1_ecmult_table_get_ge_lambda(&tmpa, state->pre_a + np * ECMULT_TABLE_SIZE(WINDOW_A), state->aux + np * ECMULT_TABLE_SIZE(WINDOW_A), n, WINDOW_A);
  ------------------
  |  |   32|   123k|#  define WINDOW_A 5
  ------------------
  331|   123k|                secp256k1_gej_add_ge_var(r, r, &tmpa, NULL);
  332|   123k|            }
  333|   726k|        }
  334|   726k|        if (i < bits_ng_1 && (n = wnaf_ng_1[i])) {
  ------------------
  |  Branch (334:13): [True: 694k, False: 32.2k]
  |  Branch (334:30): [True: 48.4k, False: 645k]
  ------------------
  335|  48.4k|            secp256k1_ecmult_table_get_ge_storage(&tmpa, secp256k1_pre_g, n, WINDOW_G);
  ------------------
  |  |   31|  48.4k|#    define WINDOW_G ECMULT_WINDOW_SIZE
  ------------------
  336|  48.4k|            secp256k1_gej_add_zinv_var(r, r, &tmpa, &Z);
  337|  48.4k|        }
  338|   726k|        if (i < bits_ng_128 && (n = wnaf_ng_128[i])) {
  ------------------
  |  Branch (338:13): [True: 691k, False: 34.3k]
  |  Branch (338:32): [True: 48.2k, False: 643k]
  ------------------
  339|  48.2k|            secp256k1_ecmult_table_get_ge_storage(&tmpa, secp256k1_pre_g_128, n, WINDOW_G);
  ------------------
  |  |   31|  48.2k|#    define WINDOW_G ECMULT_WINDOW_SIZE
  ------------------
  340|  48.2k|            secp256k1_gej_add_zinv_var(r, r, &tmpa, &Z);
  341|  48.2k|        }
  342|   726k|    }
  343|       |
  344|  5.70k|    if (!r->infinity) {
  ------------------
  |  Branch (344:9): [True: 5.70k, False: 0]
  ------------------
  345|  5.70k|        secp256k1_fe_mul(&r->z, &r->z, &Z);
  ------------------
  |  |   93|  5.70k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  346|  5.70k|    }
  347|  5.70k|}
secp256k1.c:secp256k1_ecmult_wnaf:
  162|  22.8k|static int secp256k1_ecmult_wnaf(int *wnaf, int len, const secp256k1_scalar *a, int w) {
  163|  22.8k|    secp256k1_scalar s;
  164|  22.8k|    int last_set_bit = -1;
  165|  22.8k|    int bit = 0;
  166|  22.8k|    int sign = 1;
  167|  22.8k|    int carry = 0;
  168|       |
  169|  22.8k|    VERIFY_CHECK(wnaf != NULL);
  170|  22.8k|    VERIFY_CHECK(0 <= len && len <= 256);
  171|  22.8k|    VERIFY_CHECK(a != NULL);
  172|  22.8k|    VERIFY_CHECK(2 <= w && w <= 31);
  173|       |
  174|  2.96M|    for (bit = 0; bit < len; bit++) {
  ------------------
  |  Branch (174:19): [True: 2.94M, False: 22.8k]
  ------------------
  175|  2.94M|        wnaf[bit] = 0;
  176|  2.94M|    }
  177|       |
  178|  22.8k|    s = *a;
  179|  22.8k|    if (secp256k1_scalar_get_bits_limb32(&s, 255, 1)) {
  ------------------
  |  Branch (179:9): [True: 5.77k, False: 17.0k]
  ------------------
  180|  5.77k|        secp256k1_scalar_negate(&s, &s);
  181|  5.77k|        sign = -1;
  182|  5.77k|    }
  183|       |
  184|  22.8k|    bit = 0;
  185|   714k|    while (bit < len) {
  ------------------
  |  Branch (185:12): [True: 691k, False: 22.8k]
  ------------------
  186|   691k|        int now;
  187|   691k|        int word;
  188|   691k|        if (secp256k1_scalar_get_bits_limb32(&s, bit, 1) == (unsigned int)carry) {
  ------------------
  |  Branch (188:13): [True: 348k, False: 343k]
  ------------------
  189|   348k|            bit++;
  190|   348k|            continue;
  191|   348k|        }
  192|       |
  193|   343k|        now = w;
  194|   343k|        if (now > len - bit) {
  ------------------
  |  Branch (194:13): [True: 14.8k, False: 328k]
  ------------------
  195|  14.8k|            now = len - bit;
  196|  14.8k|        }
  197|       |
  198|   343k|        word = secp256k1_scalar_get_bits_var(&s, bit, now) + carry;
  199|       |
  200|   343k|        carry = (word >> (w-1)) & 1;
  201|   343k|        word -= carry << w;
  202|       |
  203|   343k|        wnaf[bit] = sign * word;
  204|   343k|        last_set_bit = bit;
  205|       |
  206|   343k|        bit += now;
  207|   343k|    }
  208|       |#ifdef VERIFY
  209|       |    {
  210|       |        int verify_bit = bit;
  211|       |
  212|       |        VERIFY_CHECK(carry == 0);
  213|       |
  214|       |        while (verify_bit < 256) {
  215|       |            VERIFY_CHECK(secp256k1_scalar_get_bits_limb32(&s, verify_bit, 1) == 0);
  216|       |            verify_bit++;
  217|       |        }
  218|       |    }
  219|       |#endif
  220|  22.8k|    return last_set_bit + 1;
  221|  22.8k|}
secp256k1.c:secp256k1_ecmult_odd_multiples_table:
   73|  15.5k|static void secp256k1_ecmult_odd_multiples_table(int n, secp256k1_ge *pre_a, secp256k1_fe *zr, secp256k1_fe *z, const secp256k1_gej *a) {
   74|  15.5k|    secp256k1_gej d, ai;
   75|  15.5k|    secp256k1_ge d_ge;
   76|  15.5k|    int i;
   77|       |
   78|  15.5k|    VERIFY_CHECK(!a->infinity);
   79|       |
   80|  15.5k|    secp256k1_gej_double_var(&d, a, NULL);
   81|       |
   82|       |    /*
   83|       |     * Perform the additions using an isomorphic curve Y^2 = X^3 + 7*C^6 where C := d.z.
   84|       |     * The isomorphism, phi, maps a secp256k1 point (x, y) to the point (x*C^2, y*C^3) on the other curve.
   85|       |     * In Jacobian coordinates phi maps (x, y, z) to (x*C^2, y*C^3, z) or, equivalently to (x, y, z/C).
   86|       |     *
   87|       |     *     phi(x, y, z) = (x*C^2, y*C^3, z) = (x, y, z/C)
   88|       |     *   d_ge := phi(d) = (d.x, d.y, 1)
   89|       |     *     ai := phi(a) = (a.x*C^2, a.y*C^3, a.z)
   90|       |     *
   91|       |     * The group addition functions work correctly on these isomorphic curves.
   92|       |     * In particular phi(d) is easy to represent in affine coordinates under this isomorphism.
   93|       |     * This lets us use the faster secp256k1_gej_add_ge_var group addition function that we wouldn't be able to use otherwise.
   94|       |     */
   95|  15.5k|    secp256k1_ge_set_xy(&d_ge, &d.x, &d.y);
   96|  15.5k|    secp256k1_ge_set_gej_zinv(&pre_a[0], a, &d.z);
   97|  15.5k|    secp256k1_gej_set_ge(&ai, &pre_a[0]);
   98|  15.5k|    ai.z = a->z;
   99|       |
  100|       |    /* pre_a[0] is the point (a.x*C^2, a.y*C^3, a.z*C) which is equivalent to a.
  101|       |     * Set zr[0] to C, which is the ratio between the omitted z(pre_a[0]) value and a.z.
  102|       |     */
  103|  15.5k|    zr[0] = d.z;
  104|       |
  105|   203k|    for (i = 1; i < n; i++) {
  ------------------
  |  Branch (105:17): [True: 188k, False: 15.5k]
  ------------------
  106|   188k|        secp256k1_gej_add_ge_var(&ai, &ai, &d_ge, &zr[i]);
  107|   188k|        secp256k1_ge_set_xy(&pre_a[i], &ai.x, &ai.y);
  108|   188k|    }
  109|       |
  110|       |    /* Multiply the last z-coordinate by C to undo the isomorphism.
  111|       |     * Since the z-coordinates of the pre_a values are implied by the zr array of z-coordinate ratios,
  112|       |     * undoing the isomorphism here undoes the isomorphism for all pre_a values.
  113|       |     */
  114|  15.5k|    secp256k1_fe_mul(z, &ai.z, &d.z);
  ------------------
  |  |   93|  15.5k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  115|  15.5k|}
secp256k1.c:secp256k1_ecmult_table_get_ge:
  125|   123k|SECP256K1_INLINE static void secp256k1_ecmult_table_get_ge(secp256k1_ge *r, const secp256k1_ge *pre, int n, int w) {
  126|   123k|    secp256k1_ecmult_table_verify(n,w);
  127|   123k|    if (n > 0) {
  ------------------
  |  Branch (127:9): [True: 61.0k, False: 62.0k]
  ------------------
  128|  61.0k|        *r = pre[(n-1)/2];
  129|  62.0k|    } else {
  130|  62.0k|        *r = pre[(-n-1)/2];
  131|  62.0k|        secp256k1_fe_negate(&(r->y), &(r->y), 1);
  ------------------
  |  |  211|  62.0k|#define secp256k1_fe_negate(r, a, m) ASSERT_INT_CONST_AND_DO(m, secp256k1_fe_negate_unchecked(r, a, m))
  |  |  ------------------
  |  |  |  |   77|  62.0k|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |   78|  62.0k|    switch(42) { \
  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:9): [True: 0, False: 62.0k]
  |  |  |  |  ------------------
  |  |  |  |   81|      0|            break; \
  |  |  |  |   82|  62.0k|        default: ; \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:9): [True: 62.0k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   83|  62.0k|    } \
  |  |  |  |   84|  62.0k|    stmt; \
  |  |  |  |   85|  62.0k|} while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (85:9): [Folded, False: 62.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  132|  62.0k|    }
  133|   123k|}
secp256k1.c:secp256k1_ecmult_table_verify:
  117|   343k|SECP256K1_INLINE static void secp256k1_ecmult_table_verify(int n, int w) {
  118|   343k|    (void)n;
  119|   343k|    (void)w;
  120|   343k|    VERIFY_CHECK(((n) & 1) == 1);
  121|   343k|    VERIFY_CHECK((n) >= -((1 << ((w)-1)) - 1));
  122|   343k|    VERIFY_CHECK((n) <=  ((1 << ((w)-1)) - 1));
  123|   343k|}
secp256k1.c:secp256k1_ecmult_table_get_ge_lambda:
  135|   123k|SECP256K1_INLINE static void secp256k1_ecmult_table_get_ge_lambda(secp256k1_ge *r, const secp256k1_ge *pre, const secp256k1_fe *x, int n, int w) {
  136|   123k|    secp256k1_ecmult_table_verify(n,w);
  137|   123k|    if (n > 0) {
  ------------------
  |  Branch (137:9): [True: 61.2k, False: 62.0k]
  ------------------
  138|  61.2k|        secp256k1_ge_set_xy(r, &x[(n-1)/2], &pre[(n-1)/2].y);
  139|  62.0k|    } else {
  140|  62.0k|        secp256k1_ge_set_xy(r, &x[(-n-1)/2], &pre[(-n-1)/2].y);
  141|  62.0k|        secp256k1_fe_negate(&(r->y), &(r->y), 1);
  ------------------
  |  |  211|  62.0k|#define secp256k1_fe_negate(r, a, m) ASSERT_INT_CONST_AND_DO(m, secp256k1_fe_negate_unchecked(r, a, m))
  |  |  ------------------
  |  |  |  |   77|  62.0k|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |   78|  62.0k|    switch(42) { \
  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:9): [True: 0, False: 62.0k]
  |  |  |  |  ------------------
  |  |  |  |   81|      0|            break; \
  |  |  |  |   82|  62.0k|        default: ; \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:9): [True: 62.0k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   83|  62.0k|    } \
  |  |  |  |   84|  62.0k|    stmt; \
  |  |  |  |   85|  62.0k|} while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (85:9): [Folded, False: 62.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  142|  62.0k|    }
  143|   123k|}
secp256k1.c:secp256k1_ecmult_table_get_ge_storage:
  145|  96.7k|SECP256K1_INLINE static void secp256k1_ecmult_table_get_ge_storage(secp256k1_ge *r, const secp256k1_ge_storage *pre, int n, int w) {
  146|  96.7k|    secp256k1_ecmult_table_verify(n,w);
  147|  96.7k|    if (n > 0) {
  ------------------
  |  Branch (147:9): [True: 53.8k, False: 42.8k]
  ------------------
  148|  53.8k|        secp256k1_ge_from_storage(r, &pre[(n-1)/2]);
  149|  53.8k|    } else {
  150|  42.8k|        secp256k1_ge_from_storage(r, &pre[(-n-1)/2]);
  151|  42.8k|        secp256k1_fe_negate(&(r->y), &(r->y), 1);
  ------------------
  |  |  211|  42.8k|#define secp256k1_fe_negate(r, a, m) ASSERT_INT_CONST_AND_DO(m, secp256k1_fe_negate_unchecked(r, a, m))
  |  |  ------------------
  |  |  |  |   77|  42.8k|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |   78|  42.8k|    switch(42) { \
  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:9): [True: 0, False: 42.8k]
  |  |  |  |  ------------------
  |  |  |  |   81|      0|            break; \
  |  |  |  |   82|  42.8k|        default: ; \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:9): [True: 42.8k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   83|  42.8k|    } \
  |  |  |  |   84|  42.8k|    stmt; \
  |  |  |  |   85|  42.8k|} while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (85:9): [Folded, False: 42.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  152|  42.8k|    }
  153|  96.7k|}

secp256k1.c:secp256k1_fe_impl_sqr:
  345|  30.9M|SECP256K1_INLINE static void secp256k1_fe_impl_sqr(secp256k1_fe *r, const secp256k1_fe *a) {
  346|  30.9M|    secp256k1_fe_sqr_inner(r->n, a->n);
  347|  30.9M|}
secp256k1.c:secp256k1_fe_impl_mul:
  341|  34.1M|SECP256K1_INLINE static void secp256k1_fe_impl_mul(secp256k1_fe *r, const secp256k1_fe *a, const secp256k1_fe * SECP256K1_RESTRICT b) {
  342|  34.1M|    secp256k1_fe_mul_inner(r->n, a->n, b->n);
  343|  34.1M|}
secp256k1.c:secp256k1_fe_impl_add_int:
  329|  55.3k|SECP256K1_INLINE static void secp256k1_fe_impl_add_int(secp256k1_fe *r, int a) {
  330|  55.3k|    r->n[0] += a;
  331|  55.3k|}
secp256k1.c:secp256k1_fe_impl_to_storage:
  428|   111k|static void secp256k1_fe_impl_to_storage(secp256k1_fe_storage *r, const secp256k1_fe *a) {
  429|   111k|    r->n[0] = a->n[0] | a->n[1] << 52;
  430|   111k|    r->n[1] = a->n[1] >> 12 | a->n[2] << 40;
  431|   111k|    r->n[2] = a->n[2] >> 24 | a->n[3] << 28;
  432|   111k|    r->n[3] = a->n[3] >> 36 | a->n[4] << 16;
  433|   111k|}
secp256k1.c:secp256k1_fe_impl_from_storage:
  435|  5.55M|static SECP256K1_INLINE void secp256k1_fe_impl_from_storage(secp256k1_fe *r, const secp256k1_fe_storage *a) {
  436|  5.55M|    r->n[0] = a->n[0] & 0xFFFFFFFFFFFFFULL;
  437|  5.55M|    r->n[1] = a->n[0] >> 52 | ((a->n[1] << 12) & 0xFFFFFFFFFFFFFULL);
  438|  5.55M|    r->n[2] = a->n[1] >> 40 | ((a->n[2] << 24) & 0xFFFFFFFFFFFFFULL);
  439|  5.55M|    r->n[3] = a->n[2] >> 28 | ((a->n[3] << 36) & 0xFFFFFFFFFFFFFULL);
  440|  5.55M|    r->n[4] = a->n[3] >> 16;
  441|  5.55M|}
secp256k1.c:secp256k1_fe_impl_is_zero:
  206|   132k|SECP256K1_INLINE static int secp256k1_fe_impl_is_zero(const secp256k1_fe *a) {
  207|   132k|    const uint64_t *t = a->n;
  208|   132k|    return (t[0] | t[1] | t[2] | t[3] | t[4]) == 0;
  209|   132k|}
secp256k1.c:secp256k1_fe_impl_add:
  333|  33.6M|SECP256K1_INLINE static void secp256k1_fe_impl_add(secp256k1_fe *r, const secp256k1_fe *a) {
  334|  33.6M|    r->n[0] += a->n[0];
  335|  33.6M|    r->n[1] += a->n[1];
  336|  33.6M|    r->n[2] += a->n[2];
  337|  33.6M|    r->n[3] += a->n[3];
  338|  33.6M|    r->n[4] += a->n[4];
  339|  33.6M|}
secp256k1.c:secp256k1_fe_storage_cmov:
  416|   167M|static SECP256K1_INLINE void secp256k1_fe_storage_cmov(secp256k1_fe_storage *r, const secp256k1_fe_storage *a, int flag) {
  417|   167M|    uint64_t mask0, mask1;
  418|   167M|    volatile int vflag = flag;
  419|   167M|    SECP256K1_CHECKMEM_CHECK_VERIFY(r->n, sizeof(r->n));
  ------------------
  |  |   99|   167M|#define SECP256K1_CHECKMEM_CHECK_VERIFY(p, len) SECP256K1_CHECKMEM_NOOP((p), (len))
  |  |  ------------------
  |  |  |  |   42|   167M|#define SECP256K1_CHECKMEM_NOOP(p, len) do { (void)(p); (void)(len); } while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (42:78): [Folded, False: 167M]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  420|   167M|    mask0 = vflag + ~((uint64_t)0);
  421|   167M|    mask1 = ~mask0;
  422|   167M|    r->n[0] = (r->n[0] & mask0) | (a->n[0] & mask1);
  423|   167M|    r->n[1] = (r->n[1] & mask0) | (a->n[1] & mask1);
  424|   167M|    r->n[2] = (r->n[2] & mask0) | (a->n[2] & mask1);
  425|   167M|    r->n[3] = (r->n[3] & mask0) | (a->n[3] & mask1);
  426|   167M|}
secp256k1.c:secp256k1_fe_impl_negate_unchecked:
  306|  18.3M|SECP256K1_INLINE static void secp256k1_fe_impl_negate_unchecked(secp256k1_fe *r, const secp256k1_fe *a, int m) {
  307|       |    /* For all legal values of m (0..31), the following properties hold: */
  308|  18.3M|    VERIFY_CHECK(0xFFFFEFFFFFC2FULL * 2 * (m + 1) >= 0xFFFFFFFFFFFFFULL * 2 * m);
  309|  18.3M|    VERIFY_CHECK(0xFFFFFFFFFFFFFULL * 2 * (m + 1) >= 0xFFFFFFFFFFFFFULL * 2 * m);
  310|  18.3M|    VERIFY_CHECK(0x0FFFFFFFFFFFFULL * 2 * (m + 1) >= 0x0FFFFFFFFFFFFULL * 2 * m);
  311|       |
  312|       |    /* Due to the properties above, the left hand in the subtractions below is never less than
  313|       |     * the right hand. */
  314|  18.3M|    r->n[0] = 0xFFFFEFFFFFC2FULL * 2 * (m + 1) - a->n[0];
  315|  18.3M|    r->n[1] = 0xFFFFFFFFFFFFFULL * 2 * (m + 1) - a->n[1];
  316|  18.3M|    r->n[2] = 0xFFFFFFFFFFFFFULL * 2 * (m + 1) - a->n[2];
  317|  18.3M|    r->n[3] = 0xFFFFFFFFFFFFFULL * 2 * (m + 1) - a->n[3];
  318|  18.3M|    r->n[4] = 0x0FFFFFFFFFFFFULL * 2 * (m + 1) - a->n[4];
  319|  18.3M|}
secp256k1.c:secp256k1_fe_impl_cmov:
  349|  37.3M|SECP256K1_INLINE static void secp256k1_fe_impl_cmov(secp256k1_fe *r, const secp256k1_fe *a, int flag) {
  350|  37.3M|    uint64_t mask0, mask1;
  351|  37.3M|    volatile int vflag = flag;
  352|  37.3M|    SECP256K1_CHECKMEM_CHECK_VERIFY(r->n, sizeof(r->n));
  ------------------
  |  |   99|  37.3M|#define SECP256K1_CHECKMEM_CHECK_VERIFY(p, len) SECP256K1_CHECKMEM_NOOP((p), (len))
  |  |  ------------------
  |  |  |  |   42|  37.3M|#define SECP256K1_CHECKMEM_NOOP(p, len) do { (void)(p); (void)(len); } while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (42:78): [Folded, False: 37.3M]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  353|  37.3M|    mask0 = vflag + ~((uint64_t)0);
  354|  37.3M|    mask1 = ~mask0;
  355|  37.3M|    r->n[0] = (r->n[0] & mask0) | (a->n[0] & mask1);
  356|  37.3M|    r->n[1] = (r->n[1] & mask0) | (a->n[1] & mask1);
  357|  37.3M|    r->n[2] = (r->n[2] & mask0) | (a->n[2] & mask1);
  358|  37.3M|    r->n[3] = (r->n[3] & mask0) | (a->n[3] & mask1);
  359|  37.3M|    r->n[4] = (r->n[4] & mask0) | (a->n[4] & mask1);
  360|  37.3M|}
secp256k1.c:secp256k1_fe_impl_mul_int_unchecked:
  321|  8.29M|SECP256K1_INLINE static void secp256k1_fe_impl_mul_int_unchecked(secp256k1_fe *r, int a) {
  322|  8.29M|    r->n[0] *= a;
  323|  8.29M|    r->n[1] *= a;
  324|  8.29M|    r->n[2] *= a;
  325|  8.29M|    r->n[3] *= a;
  326|  8.29M|    r->n[4] *= a;
  327|  8.29M|}
secp256k1.c:secp256k1_fe_impl_half:
  362|  5.10M|static SECP256K1_INLINE void secp256k1_fe_impl_half(secp256k1_fe *r) {
  363|  5.10M|    uint64_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4];
  364|  5.10M|    uint64_t one = (uint64_t)1;
  365|  5.10M|    uint64_t mask = -(t0 & one) >> 12;
  366|       |
  367|       |    /* Bounds analysis (over the rationals).
  368|       |     *
  369|       |     * Let m = r->magnitude
  370|       |     *     C = 0xFFFFFFFFFFFFFULL * 2
  371|       |     *     D = 0x0FFFFFFFFFFFFULL * 2
  372|       |     *
  373|       |     * Initial bounds: t0..t3 <= C * m
  374|       |     *                     t4 <= D * m
  375|       |     */
  376|       |
  377|  5.10M|    t0 += 0xFFFFEFFFFFC2FULL & mask;
  378|  5.10M|    t1 += mask;
  379|  5.10M|    t2 += mask;
  380|  5.10M|    t3 += mask;
  381|  5.10M|    t4 += mask >> 4;
  382|       |
  383|  5.10M|    VERIFY_CHECK((t0 & one) == 0);
  384|       |
  385|       |    /* t0..t3: added <= C/2
  386|       |     *     t4: added <= D/2
  387|       |     *
  388|       |     * Current bounds: t0..t3 <= C * (m + 1/2)
  389|       |     *                     t4 <= D * (m + 1/2)
  390|       |     */
  391|       |
  392|  5.10M|    r->n[0] = (t0 >> 1) + ((t1 & one) << 51);
  393|  5.10M|    r->n[1] = (t1 >> 1) + ((t2 & one) << 51);
  394|  5.10M|    r->n[2] = (t2 >> 1) + ((t3 & one) << 51);
  395|  5.10M|    r->n[3] = (t3 >> 1) + ((t4 & one) << 51);
  396|  5.10M|    r->n[4] = (t4 >> 1);
  397|       |
  398|       |    /* t0..t3: shifted right and added <= C/4 + 1/2
  399|       |     *     t4: shifted right
  400|       |     *
  401|       |     * Current bounds: t0..t3 <= C * (m/2 + 1/2)
  402|       |     *                     t4 <= D * (m/2 + 1/4)
  403|       |     *
  404|       |     * Therefore the output magnitude (M) has to be set such that:
  405|       |     *     t0..t3: C * M >= C * (m/2 + 1/2)
  406|       |     *         t4: D * M >= D * (m/2 + 1/4)
  407|       |     *
  408|       |     * It suffices for all limbs that, for any input magnitude m:
  409|       |     *     M >= m/2 + 1/2
  410|       |     *
  411|       |     * and since we want the smallest such integer value for M:
  412|       |     *     M == floor(m/2) + 1
  413|       |     */
  414|  5.10M|}
secp256k1.c:secp256k1_fe_impl_normalize_weak:
   80|  90.2k|static void secp256k1_fe_impl_normalize_weak(secp256k1_fe *r) {
   81|  90.2k|    uint64_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4];
   82|       |
   83|       |    /* Reduce t4 at the start so there will be at most a single carry from the first pass */
   84|  90.2k|    uint64_t x = t4 >> 48; t4 &= 0x0FFFFFFFFFFFFULL;
   85|       |
   86|       |    /* The first pass ensures the magnitude is 1, ... */
   87|  90.2k|    t0 += x * 0x1000003D1ULL;
   88|  90.2k|    t1 += (t0 >> 52); t0 &= 0xFFFFFFFFFFFFFULL;
   89|  90.2k|    t2 += (t1 >> 52); t1 &= 0xFFFFFFFFFFFFFULL;
   90|  90.2k|    t3 += (t2 >> 52); t2 &= 0xFFFFFFFFFFFFFULL;
   91|  90.2k|    t4 += (t3 >> 52); t3 &= 0xFFFFFFFFFFFFFULL;
   92|       |
   93|       |    /* ... except for a possible carry at bit 48 of t4 (i.e. bit 256 of the field element) */
   94|  90.2k|    VERIFY_CHECK(t4 >> 49 == 0);
   95|       |
   96|  90.2k|    r->n[0] = t0; r->n[1] = t1; r->n[2] = t2; r->n[3] = t3; r->n[4] = t4;
   97|  90.2k|}
secp256k1.c:secp256k1_fe_impl_normalizes_to_zero:
  137|  6.28M|static int secp256k1_fe_impl_normalizes_to_zero(const secp256k1_fe *r) {
  138|  6.28M|    uint64_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4];
  139|       |
  140|       |    /* z0 tracks a possible raw value of 0, z1 tracks a possible raw value of P */
  141|  6.28M|    uint64_t z0, z1;
  142|       |
  143|       |    /* Reduce t4 at the start so there will be at most a single carry from the first pass */
  144|  6.28M|    uint64_t x = t4 >> 48; t4 &= 0x0FFFFFFFFFFFFULL;
  145|       |
  146|       |    /* The first pass ensures the magnitude is 1, ... */
  147|  6.28M|    t0 += x * 0x1000003D1ULL;
  148|  6.28M|    t1 += (t0 >> 52); t0 &= 0xFFFFFFFFFFFFFULL; z0  = t0; z1  = t0 ^ 0x1000003D0ULL;
  149|  6.28M|    t2 += (t1 >> 52); t1 &= 0xFFFFFFFFFFFFFULL; z0 |= t1; z1 &= t1;
  150|  6.28M|    t3 += (t2 >> 52); t2 &= 0xFFFFFFFFFFFFFULL; z0 |= t2; z1 &= t2;
  151|  6.28M|    t4 += (t3 >> 52); t3 &= 0xFFFFFFFFFFFFFULL; z0 |= t3; z1 &= t3;
  152|  6.28M|                                                z0 |= t4; z1 &= t4 ^ 0xF000000000000ULL;
  153|       |
  154|       |    /* ... except for a possible carry at bit 48 of t4 (i.e. bit 256 of the field element) */
  155|  6.28M|    VERIFY_CHECK(t4 >> 49 == 0);
  156|       |
  157|  6.28M|    return (z0 == 0) | (z1 == 0xFFFFFFFFFFFFFULL);
  158|  6.28M|}
secp256k1.c:secp256k1_fe_impl_set_int:
  201|   214k|SECP256K1_INLINE static void secp256k1_fe_impl_set_int(secp256k1_fe *r, int a) {
  202|   214k|    r->n[0] = a;
  203|   214k|    r->n[1] = r->n[2] = r->n[3] = r->n[4] = 0;
  204|   214k|}
secp256k1.c:secp256k1_fe_impl_inv:
  479|  70.9k|static void secp256k1_fe_impl_inv(secp256k1_fe *r, const secp256k1_fe *x) {
  480|  70.9k|    secp256k1_fe tmp = *x;
  481|  70.9k|    secp256k1_modinv64_signed62 s;
  482|       |
  483|  70.9k|    secp256k1_fe_normalize(&tmp);
  ------------------
  |  |   78|  70.9k|#  define secp256k1_fe_normalize secp256k1_fe_impl_normalize
  ------------------
  484|  70.9k|    secp256k1_fe_to_signed62(&s, &tmp);
  485|  70.9k|    secp256k1_modinv64(&s, &secp256k1_const_modinfo_fe);
  486|  70.9k|    secp256k1_fe_from_signed62(r, &s);
  487|  70.9k|}
secp256k1.c:secp256k1_fe_to_signed62:
  463|   163k|static void secp256k1_fe_to_signed62(secp256k1_modinv64_signed62 *r, const secp256k1_fe *a) {
  464|   163k|    const uint64_t M62 = UINT64_MAX >> 2;
  465|   163k|    const uint64_t a0 = a->n[0], a1 = a->n[1], a2 = a->n[2], a3 = a->n[3], a4 = a->n[4];
  466|       |
  467|   163k|    r->v[0] = (a0       | a1 << 52) & M62;
  468|   163k|    r->v[1] = (a1 >> 10 | a2 << 42) & M62;
  469|   163k|    r->v[2] = (a2 >> 20 | a3 << 32) & M62;
  470|   163k|    r->v[3] = (a3 >> 30 | a4 << 22) & M62;
  471|   163k|    r->v[4] =  a4 >> 40;
  472|   163k|}
secp256k1.c:secp256k1_fe_from_signed62:
  443|  89.0k|static void secp256k1_fe_from_signed62(secp256k1_fe *r, const secp256k1_modinv64_signed62 *a) {
  444|  89.0k|    const uint64_t M52 = UINT64_MAX >> 12;
  445|  89.0k|    const uint64_t a0 = a->v[0], a1 = a->v[1], a2 = a->v[2], a3 = a->v[3], a4 = a->v[4];
  446|       |
  447|       |    /* The output from secp256k1_modinv64{_var} should be normalized to range [0,modulus), and
  448|       |     * have limbs in [0,2^62). The modulus is < 2^256, so the top limb must be below 2^(256-62*4).
  449|       |     */
  450|  89.0k|    VERIFY_CHECK(a0 >> 62 == 0);
  451|  89.0k|    VERIFY_CHECK(a1 >> 62 == 0);
  452|  89.0k|    VERIFY_CHECK(a2 >> 62 == 0);
  453|  89.0k|    VERIFY_CHECK(a3 >> 62 == 0);
  454|  89.0k|    VERIFY_CHECK(a4 >> 8 == 0);
  455|       |
  456|  89.0k|    r->n[0] =  a0                   & M52;
  457|  89.0k|    r->n[1] = (a0 >> 52 | a1 << 10) & M52;
  458|  89.0k|    r->n[2] = (a1 >> 42 | a2 << 20) & M52;
  459|  89.0k|    r->n[3] = (a2 >> 32 | a3 << 30) & M52;
  460|  89.0k|    r->n[4] = (a3 >> 22 | a4 << 40);
  461|  89.0k|}
secp256k1.c:secp256k1_fe_impl_set_b32_limit:
  265|  8.80k|static int secp256k1_fe_impl_set_b32_limit(secp256k1_fe *r, const unsigned char *a) {
  266|  8.80k|    secp256k1_fe_impl_set_b32_mod(r, a);
  267|  8.80k|    return !((r->n[4] == 0x0FFFFFFFFFFFFULL) & ((r->n[3] & r->n[2] & r->n[1]) == 0xFFFFFFFFFFFFFULL) & (r->n[0] >= 0xFFFFEFFFFFC2FULL));
  268|  8.80k|}
secp256k1.c:secp256k1_fe_impl_get_b32:
  271|  78.7k|static void secp256k1_fe_impl_get_b32(unsigned char *r, const secp256k1_fe *a) {
  272|  78.7k|    r[0] = (a->n[4] >> 40) & 0xFF;
  273|  78.7k|    r[1] = (a->n[4] >> 32) & 0xFF;
  274|  78.7k|    r[2] = (a->n[4] >> 24) & 0xFF;
  275|  78.7k|    r[3] = (a->n[4] >> 16) & 0xFF;
  276|  78.7k|    r[4] = (a->n[4] >> 8) & 0xFF;
  277|  78.7k|    r[5] = a->n[4] & 0xFF;
  278|  78.7k|    r[6] = (a->n[3] >> 44) & 0xFF;
  279|  78.7k|    r[7] = (a->n[3] >> 36) & 0xFF;
  280|  78.7k|    r[8] = (a->n[3] >> 28) & 0xFF;
  281|  78.7k|    r[9] = (a->n[3] >> 20) & 0xFF;
  282|  78.7k|    r[10] = (a->n[3] >> 12) & 0xFF;
  283|  78.7k|    r[11] = (a->n[3] >> 4) & 0xFF;
  284|  78.7k|    r[12] = ((a->n[2] >> 48) & 0xF) | ((a->n[3] & 0xF) << 4);
  285|  78.7k|    r[13] = (a->n[2] >> 40) & 0xFF;
  286|  78.7k|    r[14] = (a->n[2] >> 32) & 0xFF;
  287|  78.7k|    r[15] = (a->n[2] >> 24) & 0xFF;
  288|  78.7k|    r[16] = (a->n[2] >> 16) & 0xFF;
  289|  78.7k|    r[17] = (a->n[2] >> 8) & 0xFF;
  290|  78.7k|    r[18] = a->n[2] & 0xFF;
  291|  78.7k|    r[19] = (a->n[1] >> 44) & 0xFF;
  292|  78.7k|    r[20] = (a->n[1] >> 36) & 0xFF;
  293|  78.7k|    r[21] = (a->n[1] >> 28) & 0xFF;
  294|  78.7k|    r[22] = (a->n[1] >> 20) & 0xFF;
  295|  78.7k|    r[23] = (a->n[1] >> 12) & 0xFF;
  296|  78.7k|    r[24] = (a->n[1] >> 4) & 0xFF;
  297|  78.7k|    r[25] = ((a->n[0] >> 48) & 0xF) | ((a->n[1] & 0xF) << 4);
  298|  78.7k|    r[26] = (a->n[0] >> 40) & 0xFF;
  299|  78.7k|    r[27] = (a->n[0] >> 32) & 0xFF;
  300|  78.7k|    r[28] = (a->n[0] >> 24) & 0xFF;
  301|  78.7k|    r[29] = (a->n[0] >> 16) & 0xFF;
  302|  78.7k|    r[30] = (a->n[0] >> 8) & 0xFF;
  303|  78.7k|    r[31] = a->n[0] & 0xFF;
  304|  78.7k|}
secp256k1.c:secp256k1_fe_impl_normalize_var:
   99|   242k|static void secp256k1_fe_impl_normalize_var(secp256k1_fe *r) {
  100|   242k|    uint64_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4];
  101|       |
  102|       |    /* Reduce t4 at the start so there will be at most a single carry from the first pass */
  103|   242k|    uint64_t m;
  104|   242k|    uint64_t x = t4 >> 48; t4 &= 0x0FFFFFFFFFFFFULL;
  105|       |
  106|       |    /* The first pass ensures the magnitude is 1, ... */
  107|   242k|    t0 += x * 0x1000003D1ULL;
  108|   242k|    t1 += (t0 >> 52); t0 &= 0xFFFFFFFFFFFFFULL;
  109|   242k|    t2 += (t1 >> 52); t1 &= 0xFFFFFFFFFFFFFULL; m = t1;
  110|   242k|    t3 += (t2 >> 52); t2 &= 0xFFFFFFFFFFFFFULL; m &= t2;
  111|   242k|    t4 += (t3 >> 52); t3 &= 0xFFFFFFFFFFFFFULL; m &= t3;
  112|       |
  113|       |    /* ... except for a possible carry at bit 48 of t4 (i.e. bit 256 of the field element) */
  114|   242k|    VERIFY_CHECK(t4 >> 49 == 0);
  115|       |
  116|       |    /* At most a single final reduction is needed; check if the value is >= the field characteristic */
  117|   242k|    x = (t4 >> 48) | ((t4 == 0x0FFFFFFFFFFFFULL) & (m == 0xFFFFFFFFFFFFFULL)
  118|   242k|        & (t0 >= 0xFFFFEFFFFFC2FULL));
  119|       |
  120|   242k|    if (x) {
  ------------------
  |  Branch (120:9): [True: 0, False: 242k]
  ------------------
  121|      0|        t0 += 0x1000003D1ULL;
  122|      0|        t1 += (t0 >> 52); t0 &= 0xFFFFFFFFFFFFFULL;
  123|      0|        t2 += (t1 >> 52); t1 &= 0xFFFFFFFFFFFFFULL;
  124|      0|        t3 += (t2 >> 52); t2 &= 0xFFFFFFFFFFFFFULL;
  125|      0|        t4 += (t3 >> 52); t3 &= 0xFFFFFFFFFFFFFULL;
  126|       |
  127|       |        /* If t4 didn't carry to bit 48 already, then it should have after any final reduction */
  128|      0|        VERIFY_CHECK(t4 >> 48 == x);
  129|       |
  130|       |        /* Mask off the possible multiple of 2^256 from the final reduction */
  131|      0|        t4 &= 0x0FFFFFFFFFFFFULL;
  132|      0|    }
  133|       |
  134|   242k|    r->n[0] = t0; r->n[1] = t1; r->n[2] = t2; r->n[3] = t3; r->n[4] = t4;
  135|   242k|}
secp256k1.c:secp256k1_fe_impl_is_odd:
  211|  89.0k|SECP256K1_INLINE static int secp256k1_fe_impl_is_odd(const secp256k1_fe *a) {
  212|  89.0k|    return a->n[0] & 1;
  213|  89.0k|}
secp256k1.c:secp256k1_fe_impl_normalizes_to_zero_var:
  160|   569k|static int secp256k1_fe_impl_normalizes_to_zero_var(const secp256k1_fe *r) {
  161|   569k|    uint64_t t0, t1, t2, t3, t4;
  162|   569k|    uint64_t z0, z1;
  163|   569k|    uint64_t x;
  164|       |
  165|   569k|    t0 = r->n[0];
  166|   569k|    t4 = r->n[4];
  167|       |
  168|       |    /* Reduce t4 at the start so there will be at most a single carry from the first pass */
  169|   569k|    x = t4 >> 48;
  170|       |
  171|       |    /* The first pass ensures the magnitude is 1, ... */
  172|   569k|    t0 += x * 0x1000003D1ULL;
  173|       |
  174|       |    /* z0 tracks a possible raw value of 0, z1 tracks a possible raw value of P */
  175|   569k|    z0 = t0 & 0xFFFFFFFFFFFFFULL;
  176|   569k|    z1 = z0 ^ 0x1000003D0ULL;
  177|       |
  178|       |    /* Fast return path should catch the majority of cases */
  179|   569k|    if ((z0 != 0ULL) & (z1 != 0xFFFFFFFFFFFFFULL)) {
  ------------------
  |  Branch (179:9): [True: 569k, False: 0]
  ------------------
  180|   569k|        return 0;
  181|   569k|    }
  182|       |
  183|      0|    t1 = r->n[1];
  184|      0|    t2 = r->n[2];
  185|      0|    t3 = r->n[3];
  186|       |
  187|      0|    t4 &= 0x0FFFFFFFFFFFFULL;
  188|       |
  189|      0|    t1 += (t0 >> 52);
  190|      0|    t2 += (t1 >> 52); t1 &= 0xFFFFFFFFFFFFFULL; z0 |= t1; z1 &= t1;
  191|      0|    t3 += (t2 >> 52); t2 &= 0xFFFFFFFFFFFFFULL; z0 |= t2; z1 &= t2;
  192|      0|    t4 += (t3 >> 52); t3 &= 0xFFFFFFFFFFFFFULL; z0 |= t3; z1 &= t3;
  193|      0|                                                z0 |= t4; z1 &= t4 ^ 0xF000000000000ULL;
  194|       |
  195|       |    /* ... except for a possible carry at bit 48 of t4 (i.e. bit 256 of the field element) */
  196|      0|    VERIFY_CHECK(t4 >> 49 == 0);
  197|       |
  198|      0|    return (z0 == 0) | (z1 == 0xFFFFFFFFFFFFFULL);
  199|   569k|}
secp256k1.c:secp256k1_fe_impl_inv_var:
  489|  18.1k|static void secp256k1_fe_impl_inv_var(secp256k1_fe *r, const secp256k1_fe *x) {
  490|  18.1k|    secp256k1_fe tmp = *x;
  491|  18.1k|    secp256k1_modinv64_signed62 s;
  492|       |
  493|  18.1k|    secp256k1_fe_normalize_var(&tmp);
  ------------------
  |  |   80|  18.1k|#  define secp256k1_fe_normalize_var secp256k1_fe_impl_normalize_var
  ------------------
  494|  18.1k|    secp256k1_fe_to_signed62(&s, &tmp);
  495|  18.1k|    secp256k1_modinv64_var(&s, &secp256k1_const_modinfo_fe);
  496|  18.1k|    secp256k1_fe_from_signed62(r, &s);
  497|  18.1k|}
secp256k1.c:secp256k1_fe_impl_is_square_var:
  499|  74.4k|static int secp256k1_fe_impl_is_square_var(const secp256k1_fe *x) {
  500|  74.4k|    secp256k1_fe tmp;
  501|  74.4k|    secp256k1_modinv64_signed62 s;
  502|  74.4k|    int jac, ret;
  503|       |
  504|  74.4k|    tmp = *x;
  505|  74.4k|    secp256k1_fe_normalize_var(&tmp);
  ------------------
  |  |   80|  74.4k|#  define secp256k1_fe_normalize_var secp256k1_fe_impl_normalize_var
  ------------------
  506|       |    /* secp256k1_jacobi64_maybe_var cannot deal with input 0. */
  507|  74.4k|    if (secp256k1_fe_is_zero(&tmp)) return 1;
  ------------------
  |  |   84|  74.4k|#  define secp256k1_fe_is_zero secp256k1_fe_impl_is_zero
  ------------------
  |  Branch (507:9): [True: 0, False: 74.4k]
  ------------------
  508|  74.4k|    secp256k1_fe_to_signed62(&s, &tmp);
  509|  74.4k|    jac = secp256k1_jacobi64_maybe_var(&s, &secp256k1_const_modinfo_fe);
  510|  74.4k|    if (jac == 0) {
  ------------------
  |  Branch (510:9): [True: 0, False: 74.4k]
  ------------------
  511|       |        /* secp256k1_jacobi64_maybe_var failed to compute the Jacobi symbol. Fall back
  512|       |         * to computing a square root. This should be extremely rare with random
  513|       |         * input (except in VERIFY mode, where a lower iteration count is used). */
  514|      0|        secp256k1_fe dummy;
  515|      0|        ret = secp256k1_fe_sqrt(&dummy, &tmp);
  516|  74.4k|    } else {
  517|  74.4k|        ret = jac >= 0;
  518|  74.4k|    }
  519|  74.4k|    return ret;
  520|  74.4k|}
secp256k1.c:secp256k1_fe_impl_set_b32_mod:
  228|  70.0k|static void secp256k1_fe_impl_set_b32_mod(secp256k1_fe *r, const unsigned char *a) {
  229|  70.0k|    r->n[0] = (uint64_t)a[31]
  230|  70.0k|            | ((uint64_t)a[30] << 8)
  231|  70.0k|            | ((uint64_t)a[29] << 16)
  232|  70.0k|            | ((uint64_t)a[28] << 24)
  233|  70.0k|            | ((uint64_t)a[27] << 32)
  234|  70.0k|            | ((uint64_t)a[26] << 40)
  235|  70.0k|            | ((uint64_t)(a[25] & 0xF)  << 48);
  236|  70.0k|    r->n[1] = (uint64_t)((a[25] >> 4) & 0xF)
  237|  70.0k|            | ((uint64_t)a[24] << 4)
  238|  70.0k|            | ((uint64_t)a[23] << 12)
  239|  70.0k|            | ((uint64_t)a[22] << 20)
  240|  70.0k|            | ((uint64_t)a[21] << 28)
  241|  70.0k|            | ((uint64_t)a[20] << 36)
  242|  70.0k|            | ((uint64_t)a[19] << 44);
  243|  70.0k|    r->n[2] = (uint64_t)a[18]
  244|  70.0k|            | ((uint64_t)a[17] << 8)
  245|  70.0k|            | ((uint64_t)a[16] << 16)
  246|  70.0k|            | ((uint64_t)a[15] << 24)
  247|  70.0k|            | ((uint64_t)a[14] << 32)
  248|  70.0k|            | ((uint64_t)a[13] << 40)
  249|  70.0k|            | ((uint64_t)(a[12] & 0xF) << 48);
  250|  70.0k|    r->n[3] = (uint64_t)((a[12] >> 4) & 0xF)
  251|  70.0k|            | ((uint64_t)a[11] << 4)
  252|  70.0k|            | ((uint64_t)a[10] << 12)
  253|  70.0k|            | ((uint64_t)a[9]  << 20)
  254|  70.0k|            | ((uint64_t)a[8]  << 28)
  255|  70.0k|            | ((uint64_t)a[7]  << 36)
  256|  70.0k|            | ((uint64_t)a[6]  << 44);
  257|  70.0k|    r->n[4] = (uint64_t)a[5]
  258|  70.0k|            | ((uint64_t)a[4] << 8)
  259|  70.0k|            | ((uint64_t)a[3] << 16)
  260|  70.0k|            | ((uint64_t)a[2] << 24)
  261|  70.0k|            | ((uint64_t)a[1] << 32)
  262|  70.0k|            | ((uint64_t)a[0] << 40);
  263|  70.0k|}
secp256k1.c:secp256k1_fe_impl_normalize:
   43|   192k|static void secp256k1_fe_impl_normalize(secp256k1_fe *r) {
   44|   192k|    uint64_t t0 = r->n[0], t1 = r->n[1], t2 = r->n[2], t3 = r->n[3], t4 = r->n[4];
   45|       |
   46|       |    /* Reduce t4 at the start so there will be at most a single carry from the first pass */
   47|   192k|    uint64_t m;
   48|   192k|    uint64_t x = t4 >> 48; t4 &= 0x0FFFFFFFFFFFFULL;
   49|       |
   50|       |    /* The first pass ensures the magnitude is 1, ... */
   51|   192k|    t0 += x * 0x1000003D1ULL;
   52|   192k|    t1 += (t0 >> 52); t0 &= 0xFFFFFFFFFFFFFULL;
   53|   192k|    t2 += (t1 >> 52); t1 &= 0xFFFFFFFFFFFFFULL; m = t1;
   54|   192k|    t3 += (t2 >> 52); t2 &= 0xFFFFFFFFFFFFFULL; m &= t2;
   55|   192k|    t4 += (t3 >> 52); t3 &= 0xFFFFFFFFFFFFFULL; m &= t3;
   56|       |
   57|       |    /* ... except for a possible carry at bit 48 of t4 (i.e. bit 256 of the field element) */
   58|   192k|    VERIFY_CHECK(t4 >> 49 == 0);
   59|       |
   60|       |    /* At most a single final reduction is needed; check if the value is >= the field characteristic */
   61|   192k|    x = (t4 >> 48) | ((t4 == 0x0FFFFFFFFFFFFULL) & (m == 0xFFFFFFFFFFFFFULL)
   62|   192k|        & (t0 >= 0xFFFFEFFFFFC2FULL));
   63|       |
   64|       |    /* Apply the final reduction (for constant-time behaviour, we do it always) */
   65|   192k|    t0 += x * 0x1000003D1ULL;
   66|   192k|    t1 += (t0 >> 52); t0 &= 0xFFFFFFFFFFFFFULL;
   67|   192k|    t2 += (t1 >> 52); t1 &= 0xFFFFFFFFFFFFFULL;
   68|   192k|    t3 += (t2 >> 52); t2 &= 0xFFFFFFFFFFFFFULL;
   69|   192k|    t4 += (t3 >> 52); t3 &= 0xFFFFFFFFFFFFFULL;
   70|       |
   71|       |    /* If t4 didn't carry to bit 48 already, then it should have after any final reduction */
   72|   192k|    VERIFY_CHECK(t4 >> 48 == x);
   73|       |
   74|       |    /* Mask off the possible multiple of 2^256 from the final reduction */
   75|   192k|    t4 &= 0x0FFFFFFFFFFFFULL;
   76|       |
   77|   192k|    r->n[0] = t0; r->n[1] = t1; r->n[2] = t2; r->n[3] = t3; r->n[4] = t4;
   78|   192k|}

secp256k1.c:secp256k1_fe_sqr_inner:
  154|  30.9M|SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint64_t *r, const uint64_t *a) {
  155|  30.9M|    secp256k1_uint128 c, d;
  156|  30.9M|    uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];
  157|  30.9M|    uint64_t t3, t4, tx, u0;
  158|  30.9M|    const uint64_t M = 0xFFFFFFFFFFFFFULL, R = 0x1000003D10ULL;
  159|       |
  160|  30.9M|    VERIFY_BITS(a[0], 56);
  161|  30.9M|    VERIFY_BITS(a[1], 56);
  162|  30.9M|    VERIFY_BITS(a[2], 56);
  163|  30.9M|    VERIFY_BITS(a[3], 56);
  164|  30.9M|    VERIFY_BITS(a[4], 52);
  165|       |
  166|       |    /**  [... a b c] is a shorthand for ... + a<<104 + b<<52 + c<<0 mod n.
  167|       |     *  px is a shorthand for sum(a[i]*a[x-i], i=0..x).
  168|       |     *  Note that [x 0 0 0 0 0] = [x*R].
  169|       |     */
  170|       |
  171|  30.9M|    secp256k1_u128_mul(&d, a0*2, a3);
  172|  30.9M|    secp256k1_u128_accum_mul(&d, a1*2, a2);
  173|  30.9M|    VERIFY_BITS_128(&d, 114);
  174|       |    /* [d 0 0 0] = [p3 0 0 0] */
  175|  30.9M|    secp256k1_u128_mul(&c, a4, a4);
  176|  30.9M|    VERIFY_BITS_128(&c, 112);
  177|       |    /* [c 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */
  178|  30.9M|    secp256k1_u128_accum_mul(&d, R, secp256k1_u128_to_u64(&c)); secp256k1_u128_rshift(&c, 64);
  179|  30.9M|    VERIFY_BITS_128(&d, 115);
  180|  30.9M|    VERIFY_BITS_128(&c, 48);
  181|       |    /* [(c<<12) 0 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */
  182|  30.9M|    t3 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);
  183|  30.9M|    VERIFY_BITS(t3, 52);
  184|  30.9M|    VERIFY_BITS_128(&d, 63);
  185|       |    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */
  186|       |
  187|  30.9M|    a4 *= 2;
  188|  30.9M|    secp256k1_u128_accum_mul(&d, a0, a4);
  189|  30.9M|    secp256k1_u128_accum_mul(&d, a1*2, a3);
  190|  30.9M|    secp256k1_u128_accum_mul(&d, a2, a2);
  191|  30.9M|    VERIFY_BITS_128(&d, 115);
  192|       |    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */
  193|  30.9M|    secp256k1_u128_accum_mul(&d, R << 12, secp256k1_u128_to_u64(&c));
  194|  30.9M|    VERIFY_BITS_128(&d, 116);
  195|       |    /* [d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */
  196|  30.9M|    t4 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);
  197|  30.9M|    VERIFY_BITS(t4, 52);
  198|  30.9M|    VERIFY_BITS_128(&d, 64);
  199|       |    /* [d t4 t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */
  200|  30.9M|    tx = (t4 >> 48); t4 &= (M >> 4);
  201|  30.9M|    VERIFY_BITS(tx, 4);
  202|  30.9M|    VERIFY_BITS(t4, 48);
  203|       |    /* [d t4+(tx<<48) t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */
  204|       |
  205|  30.9M|    secp256k1_u128_mul(&c, a0, a0);
  206|  30.9M|    VERIFY_BITS_128(&c, 112);
  207|       |    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 0 p4 p3 0 0 p0] */
  208|  30.9M|    secp256k1_u128_accum_mul(&d, a1, a4);
  209|  30.9M|    secp256k1_u128_accum_mul(&d, a2*2, a3);
  210|  30.9M|    VERIFY_BITS_128(&d, 114);
  211|       |    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */
  212|  30.9M|    u0 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);
  213|  30.9M|    VERIFY_BITS(u0, 52);
  214|  30.9M|    VERIFY_BITS_128(&d, 62);
  215|       |    /* [d u0 t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */
  216|       |    /* [d 0 t4+(tx<<48)+(u0<<52) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */
  217|  30.9M|    u0 = (u0 << 4) | tx;
  218|  30.9M|    VERIFY_BITS(u0, 56);
  219|       |    /* [d 0 t4+(u0<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */
  220|  30.9M|    secp256k1_u128_accum_mul(&c, u0, R >> 4);
  221|  30.9M|    VERIFY_BITS_128(&c, 113);
  222|       |    /* [d 0 t4 t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */
  223|  30.9M|    r[0] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);
  224|  30.9M|    VERIFY_BITS(r[0], 52);
  225|  30.9M|    VERIFY_BITS_128(&c, 61);
  226|       |    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 0 p0] */
  227|       |
  228|  30.9M|    a0 *= 2;
  229|  30.9M|    secp256k1_u128_accum_mul(&c, a0, a1);
  230|  30.9M|    VERIFY_BITS_128(&c, 114);
  231|       |    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 p1 p0] */
  232|  30.9M|    secp256k1_u128_accum_mul(&d, a2, a4);
  233|  30.9M|    secp256k1_u128_accum_mul(&d, a3, a3);
  234|  30.9M|    VERIFY_BITS_128(&d, 114);
  235|       |    /* [d 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */
  236|  30.9M|    secp256k1_u128_accum_mul(&c, secp256k1_u128_to_u64(&d) & M, R); secp256k1_u128_rshift(&d, 52);
  237|  30.9M|    VERIFY_BITS_128(&c, 115);
  238|  30.9M|    VERIFY_BITS_128(&d, 62);
  239|       |    /* [d 0 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */
  240|  30.9M|    r[1] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);
  241|  30.9M|    VERIFY_BITS(r[1], 52);
  242|  30.9M|    VERIFY_BITS_128(&c, 63);
  243|       |    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */
  244|       |
  245|  30.9M|    secp256k1_u128_accum_mul(&c, a0, a2);
  246|  30.9M|    secp256k1_u128_accum_mul(&c, a1, a1);
  247|  30.9M|    VERIFY_BITS_128(&c, 114);
  248|       |    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 p2 p1 p0] */
  249|  30.9M|    secp256k1_u128_accum_mul(&d, a3, a4);
  250|  30.9M|    VERIFY_BITS_128(&d, 114);
  251|       |    /* [d 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */
  252|  30.9M|    secp256k1_u128_accum_mul(&c, R, secp256k1_u128_to_u64(&d)); secp256k1_u128_rshift(&d, 64);
  253|  30.9M|    VERIFY_BITS_128(&c, 115);
  254|  30.9M|    VERIFY_BITS_128(&d, 50);
  255|       |    /* [(d<<12) 0 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */
  256|  30.9M|    r[2] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);
  257|  30.9M|    VERIFY_BITS(r[2], 52);
  258|  30.9M|    VERIFY_BITS_128(&c, 63);
  259|       |    /* [(d<<12) 0 0 0 t4 t3+c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */
  260|       |
  261|  30.9M|    secp256k1_u128_accum_mul(&c, R << 12, secp256k1_u128_to_u64(&d));
  262|  30.9M|    secp256k1_u128_accum_u64(&c, t3);
  263|  30.9M|    VERIFY_BITS_128(&c, 100);
  264|       |    /* [t4 c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */
  265|  30.9M|    r[3] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);
  266|  30.9M|    VERIFY_BITS(r[3], 52);
  267|  30.9M|    VERIFY_BITS_128(&c, 48);
  268|       |    /* [t4+c r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */
  269|  30.9M|    r[4] = secp256k1_u128_to_u64(&c) + t4;
  270|  30.9M|    VERIFY_BITS(r[4], 49);
  271|       |    /* [r4 r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */
  272|  30.9M|}
secp256k1.c:secp256k1_fe_mul_inner:
   18|  34.1M|SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint64_t *r, const uint64_t *a, const uint64_t * SECP256K1_RESTRICT b) {
   19|  34.1M|    secp256k1_uint128 c, d;
   20|  34.1M|    uint64_t t3, t4, tx, u0;
   21|  34.1M|    uint64_t a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4];
   22|  34.1M|    const uint64_t M = 0xFFFFFFFFFFFFFULL, R = 0x1000003D10ULL;
   23|       |
   24|  34.1M|    VERIFY_BITS(a[0], 56);
   25|  34.1M|    VERIFY_BITS(a[1], 56);
   26|  34.1M|    VERIFY_BITS(a[2], 56);
   27|  34.1M|    VERIFY_BITS(a[3], 56);
   28|  34.1M|    VERIFY_BITS(a[4], 52);
   29|  34.1M|    VERIFY_BITS(b[0], 56);
   30|  34.1M|    VERIFY_BITS(b[1], 56);
   31|  34.1M|    VERIFY_BITS(b[2], 56);
   32|  34.1M|    VERIFY_BITS(b[3], 56);
   33|  34.1M|    VERIFY_BITS(b[4], 52);
   34|  34.1M|    VERIFY_CHECK(r != b);
   35|  34.1M|    VERIFY_CHECK(a != b);
   36|       |
   37|       |    /*  [... a b c] is a shorthand for ... + a<<104 + b<<52 + c<<0 mod n.
   38|       |     *  for 0 <= x <= 4, px is a shorthand for sum(a[i]*b[x-i], i=0..x).
   39|       |     *  for 4 <= x <= 8, px is a shorthand for sum(a[i]*b[x-i], i=(x-4)..4)
   40|       |     *  Note that [x 0 0 0 0 0] = [x*R].
   41|       |     */
   42|       |
   43|  34.1M|    secp256k1_u128_mul(&d, a0, b[3]);
   44|  34.1M|    secp256k1_u128_accum_mul(&d, a1, b[2]);
   45|  34.1M|    secp256k1_u128_accum_mul(&d, a2, b[1]);
   46|  34.1M|    secp256k1_u128_accum_mul(&d, a3, b[0]);
   47|  34.1M|    VERIFY_BITS_128(&d, 114);
   48|       |    /* [d 0 0 0] = [p3 0 0 0] */
   49|  34.1M|    secp256k1_u128_mul(&c, a4, b[4]);
   50|  34.1M|    VERIFY_BITS_128(&c, 112);
   51|       |    /* [c 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */
   52|  34.1M|    secp256k1_u128_accum_mul(&d, R, secp256k1_u128_to_u64(&c)); secp256k1_u128_rshift(&c, 64);
   53|  34.1M|    VERIFY_BITS_128(&d, 115);
   54|  34.1M|    VERIFY_BITS_128(&c, 48);
   55|       |    /* [(c<<12) 0 0 0 0 0 d 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */
   56|  34.1M|    t3 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);
   57|  34.1M|    VERIFY_BITS(t3, 52);
   58|  34.1M|    VERIFY_BITS_128(&d, 63);
   59|       |    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 0 p3 0 0 0] */
   60|       |
   61|  34.1M|    secp256k1_u128_accum_mul(&d, a0, b[4]);
   62|  34.1M|    secp256k1_u128_accum_mul(&d, a1, b[3]);
   63|  34.1M|    secp256k1_u128_accum_mul(&d, a2, b[2]);
   64|  34.1M|    secp256k1_u128_accum_mul(&d, a3, b[1]);
   65|  34.1M|    secp256k1_u128_accum_mul(&d, a4, b[0]);
   66|  34.1M|    VERIFY_BITS_128(&d, 115);
   67|       |    /* [(c<<12) 0 0 0 0 d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */
   68|  34.1M|    secp256k1_u128_accum_mul(&d, R << 12, secp256k1_u128_to_u64(&c));
   69|  34.1M|    VERIFY_BITS_128(&d, 116);
   70|       |    /* [d t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */
   71|  34.1M|    t4 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);
   72|  34.1M|    VERIFY_BITS(t4, 52);
   73|  34.1M|    VERIFY_BITS_128(&d, 64);
   74|       |    /* [d t4 t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */
   75|  34.1M|    tx = (t4 >> 48); t4 &= (M >> 4);
   76|  34.1M|    VERIFY_BITS(tx, 4);
   77|  34.1M|    VERIFY_BITS(t4, 48);
   78|       |    /* [d t4+(tx<<48) t3 0 0 0] = [p8 0 0 0 p4 p3 0 0 0] */
   79|       |
   80|  34.1M|    secp256k1_u128_mul(&c, a0, b[0]);
   81|  34.1M|    VERIFY_BITS_128(&c, 112);
   82|       |    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 0 p4 p3 0 0 p0] */
   83|  34.1M|    secp256k1_u128_accum_mul(&d, a1, b[4]);
   84|  34.1M|    secp256k1_u128_accum_mul(&d, a2, b[3]);
   85|  34.1M|    secp256k1_u128_accum_mul(&d, a3, b[2]);
   86|  34.1M|    secp256k1_u128_accum_mul(&d, a4, b[1]);
   87|  34.1M|    VERIFY_BITS_128(&d, 114);
   88|       |    /* [d t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */
   89|  34.1M|    u0 = secp256k1_u128_to_u64(&d) & M; secp256k1_u128_rshift(&d, 52);
   90|  34.1M|    VERIFY_BITS(u0, 52);
   91|  34.1M|    VERIFY_BITS_128(&d, 62);
   92|       |    /* [d u0 t4+(tx<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */
   93|       |    /* [d 0 t4+(tx<<48)+(u0<<52) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */
   94|  34.1M|    u0 = (u0 << 4) | tx;
   95|  34.1M|    VERIFY_BITS(u0, 56);
   96|       |    /* [d 0 t4+(u0<<48) t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */
   97|  34.1M|    secp256k1_u128_accum_mul(&c, u0, R >> 4);
   98|  34.1M|    VERIFY_BITS_128(&c, 113);
   99|       |    /* [d 0 t4 t3 0 0 c] = [p8 0 0 p5 p4 p3 0 0 p0] */
  100|  34.1M|    r[0] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);
  101|  34.1M|    VERIFY_BITS(r[0], 52);
  102|  34.1M|    VERIFY_BITS_128(&c, 61);
  103|       |    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 0 p0] */
  104|       |
  105|  34.1M|    secp256k1_u128_accum_mul(&c, a0, b[1]);
  106|  34.1M|    secp256k1_u128_accum_mul(&c, a1, b[0]);
  107|  34.1M|    VERIFY_BITS_128(&c, 114);
  108|       |    /* [d 0 t4 t3 0 c r0] = [p8 0 0 p5 p4 p3 0 p1 p0] */
  109|  34.1M|    secp256k1_u128_accum_mul(&d, a2, b[4]);
  110|  34.1M|    secp256k1_u128_accum_mul(&d, a3, b[3]);
  111|  34.1M|    secp256k1_u128_accum_mul(&d, a4, b[2]);
  112|  34.1M|    VERIFY_BITS_128(&d, 114);
  113|       |    /* [d 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */
  114|  34.1M|    secp256k1_u128_accum_mul(&c, secp256k1_u128_to_u64(&d) & M, R); secp256k1_u128_rshift(&d, 52);
  115|  34.1M|    VERIFY_BITS_128(&c, 115);
  116|  34.1M|    VERIFY_BITS_128(&d, 62);
  117|       |    /* [d 0 0 t4 t3 0 c r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */
  118|  34.1M|    r[1] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);
  119|  34.1M|    VERIFY_BITS(r[1], 52);
  120|  34.1M|    VERIFY_BITS_128(&c, 63);
  121|       |    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 0 p1 p0] */
  122|       |
  123|  34.1M|    secp256k1_u128_accum_mul(&c, a0, b[2]);
  124|  34.1M|    secp256k1_u128_accum_mul(&c, a1, b[1]);
  125|  34.1M|    secp256k1_u128_accum_mul(&c, a2, b[0]);
  126|  34.1M|    VERIFY_BITS_128(&c, 114);
  127|       |    /* [d 0 0 t4 t3 c r1 r0] = [p8 0 p6 p5 p4 p3 p2 p1 p0] */
  128|  34.1M|    secp256k1_u128_accum_mul(&d, a3, b[4]);
  129|  34.1M|    secp256k1_u128_accum_mul(&d, a4, b[3]);
  130|  34.1M|    VERIFY_BITS_128(&d, 114);
  131|       |    /* [d 0 0 t4 t3 c t1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */
  132|  34.1M|    secp256k1_u128_accum_mul(&c, R, secp256k1_u128_to_u64(&d)); secp256k1_u128_rshift(&d, 64);
  133|  34.1M|    VERIFY_BITS_128(&c, 115);
  134|  34.1M|    VERIFY_BITS_128(&d, 50);
  135|       |    /* [(d<<12) 0 0 0 t4 t3 c r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */
  136|       |
  137|  34.1M|    r[2] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);
  138|  34.1M|    VERIFY_BITS(r[2], 52);
  139|  34.1M|    VERIFY_BITS_128(&c, 63);
  140|       |    /* [(d<<12) 0 0 0 t4 t3+c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */
  141|  34.1M|    secp256k1_u128_accum_mul(&c, R << 12, secp256k1_u128_to_u64(&d));
  142|  34.1M|    secp256k1_u128_accum_u64(&c, t3);
  143|  34.1M|    VERIFY_BITS_128(&c, 100);
  144|       |    /* [t4 c r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */
  145|  34.1M|    r[3] = secp256k1_u128_to_u64(&c) & M; secp256k1_u128_rshift(&c, 52);
  146|  34.1M|    VERIFY_BITS(r[3], 52);
  147|  34.1M|    VERIFY_BITS_128(&c, 48);
  148|       |    /* [t4+c r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */
  149|  34.1M|    r[4] = secp256k1_u128_to_u64(&c) + t4;
  150|  34.1M|    VERIFY_BITS(r[4], 49);
  151|       |    /* [r4 r3 r2 r1 r0] = [p8 p7 p6 p5 p4 p3 p2 p1 p0] */
  152|  34.1M|}

secp256k1.c:secp256k1_fe_verify:
  149|  56.2M|static void secp256k1_fe_verify(const secp256k1_fe *a) { (void)a; }
secp256k1.c:secp256k1_fe_verify_magnitude:
  150|  55.0M|static void secp256k1_fe_verify_magnitude(const secp256k1_fe *a, int m) { (void)a; (void)m; }
secp256k1.c:secp256k1_fe_sqrt:
   37|  20.8k|static int secp256k1_fe_sqrt(secp256k1_fe * SECP256K1_RESTRICT r, const secp256k1_fe * SECP256K1_RESTRICT a) {
   38|       |    /** Given that p is congruent to 3 mod 4, we can compute the square root of
   39|       |     *  a mod p as the (p+1)/4'th power of a.
   40|       |     *
   41|       |     *  As (p+1)/4 is an even number, it will have the same result for a and for
   42|       |     *  (-a). Only one of these two numbers actually has a square root however,
   43|       |     *  so we test at the end by squaring and comparing to the input.
   44|       |     *  Also because (p+1)/4 is an even number, the computed square root is
   45|       |     *  itself always a square (a ** ((p+1)/4) is the square of a ** ((p+1)/8)).
   46|       |     */
   47|  20.8k|    secp256k1_fe x2, x3, x6, x9, x11, x22, x44, x88, x176, x220, x223, t1;
   48|  20.8k|    int j, ret;
   49|       |
   50|  20.8k|    VERIFY_CHECK(r != a);
   51|  20.8k|    SECP256K1_FE_VERIFY(a);
  ------------------
  |  |  344|  20.8k|#define SECP256K1_FE_VERIFY(a) secp256k1_fe_verify(a)
  ------------------
   52|  20.8k|    SECP256K1_FE_VERIFY_MAGNITUDE(a, 8);
  ------------------
  |  |  348|  20.8k|#define SECP256K1_FE_VERIFY_MAGNITUDE(a, m) secp256k1_fe_verify_magnitude(a, m)
  ------------------
   53|       |
   54|       |    /** The binary representation of (p + 1)/4 has 3 blocks of 1s, with lengths in
   55|       |     *  { 2, 22, 223 }. Use an addition chain to calculate 2^n - 1 for each block:
   56|       |     *  1, [2], 3, 6, 9, 11, [22], 44, 88, 176, 220, [223]
   57|       |     */
   58|       |
   59|  20.8k|    secp256k1_fe_sqr(&x2, a);
  ------------------
  |  |   94|  20.8k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
   60|  20.8k|    secp256k1_fe_mul(&x2, &x2, a);
  ------------------
  |  |   93|  20.8k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
   61|       |
   62|  20.8k|    secp256k1_fe_sqr(&x3, &x2);
  ------------------
  |  |   94|  20.8k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
   63|  20.8k|    secp256k1_fe_mul(&x3, &x3, a);
  ------------------
  |  |   93|  20.8k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
   64|       |
   65|  20.8k|    x6 = x3;
   66|  83.4k|    for (j=0; j<3; j++) {
  ------------------
  |  Branch (66:15): [True: 62.5k, False: 20.8k]
  ------------------
   67|  62.5k|        secp256k1_fe_sqr(&x6, &x6);
  ------------------
  |  |   94|  62.5k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
   68|  62.5k|    }
   69|  20.8k|    secp256k1_fe_mul(&x6, &x6, &x3);
  ------------------
  |  |   93|  20.8k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
   70|       |
   71|  20.8k|    x9 = x6;
   72|  83.4k|    for (j=0; j<3; j++) {
  ------------------
  |  Branch (72:15): [True: 62.5k, False: 20.8k]
  ------------------
   73|  62.5k|        secp256k1_fe_sqr(&x9, &x9);
  ------------------
  |  |   94|  62.5k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
   74|  62.5k|    }
   75|  20.8k|    secp256k1_fe_mul(&x9, &x9, &x3);
  ------------------
  |  |   93|  20.8k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
   76|       |
   77|  20.8k|    x11 = x9;
   78|  62.5k|    for (j=0; j<2; j++) {
  ------------------
  |  Branch (78:15): [True: 41.7k, False: 20.8k]
  ------------------
   79|  41.7k|        secp256k1_fe_sqr(&x11, &x11);
  ------------------
  |  |   94|  41.7k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
   80|  41.7k|    }
   81|  20.8k|    secp256k1_fe_mul(&x11, &x11, &x2);
  ------------------
  |  |   93|  20.8k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
   82|       |
   83|  20.8k|    x22 = x11;
   84|   250k|    for (j=0; j<11; j++) {
  ------------------
  |  Branch (84:15): [True: 229k, False: 20.8k]
  ------------------
   85|   229k|        secp256k1_fe_sqr(&x22, &x22);
  ------------------
  |  |   94|   229k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
   86|   229k|    }
   87|  20.8k|    secp256k1_fe_mul(&x22, &x22, &x11);
  ------------------
  |  |   93|  20.8k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
   88|       |
   89|  20.8k|    x44 = x22;
   90|   479k|    for (j=0; j<22; j++) {
  ------------------
  |  Branch (90:15): [True: 458k, False: 20.8k]
  ------------------
   91|   458k|        secp256k1_fe_sqr(&x44, &x44);
  ------------------
  |  |   94|   458k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
   92|   458k|    }
   93|  20.8k|    secp256k1_fe_mul(&x44, &x44, &x22);
  ------------------
  |  |   93|  20.8k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
   94|       |
   95|  20.8k|    x88 = x44;
   96|   938k|    for (j=0; j<44; j++) {
  ------------------
  |  Branch (96:15): [True: 917k, False: 20.8k]
  ------------------
   97|   917k|        secp256k1_fe_sqr(&x88, &x88);
  ------------------
  |  |   94|   917k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
   98|   917k|    }
   99|  20.8k|    secp256k1_fe_mul(&x88, &x88, &x44);
  ------------------
  |  |   93|  20.8k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  100|       |
  101|  20.8k|    x176 = x88;
  102|  1.85M|    for (j=0; j<88; j++) {
  ------------------
  |  Branch (102:15): [True: 1.83M, False: 20.8k]
  ------------------
  103|  1.83M|        secp256k1_fe_sqr(&x176, &x176);
  ------------------
  |  |   94|  1.83M|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  104|  1.83M|    }
  105|  20.8k|    secp256k1_fe_mul(&x176, &x176, &x88);
  ------------------
  |  |   93|  20.8k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  106|       |
  107|  20.8k|    x220 = x176;
  108|   938k|    for (j=0; j<44; j++) {
  ------------------
  |  Branch (108:15): [True: 917k, False: 20.8k]
  ------------------
  109|   917k|        secp256k1_fe_sqr(&x220, &x220);
  ------------------
  |  |   94|   917k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  110|   917k|    }
  111|  20.8k|    secp256k1_fe_mul(&x220, &x220, &x44);
  ------------------
  |  |   93|  20.8k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  112|       |
  113|  20.8k|    x223 = x220;
  114|  83.4k|    for (j=0; j<3; j++) {
  ------------------
  |  Branch (114:15): [True: 62.5k, False: 20.8k]
  ------------------
  115|  62.5k|        secp256k1_fe_sqr(&x223, &x223);
  ------------------
  |  |   94|  62.5k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  116|  62.5k|    }
  117|  20.8k|    secp256k1_fe_mul(&x223, &x223, &x3);
  ------------------
  |  |   93|  20.8k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  118|       |
  119|       |    /* The final result is then assembled using a sliding window over the blocks. */
  120|       |
  121|  20.8k|    t1 = x223;
  122|   500k|    for (j=0; j<23; j++) {
  ------------------
  |  Branch (122:15): [True: 479k, False: 20.8k]
  ------------------
  123|   479k|        secp256k1_fe_sqr(&t1, &t1);
  ------------------
  |  |   94|   479k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  124|   479k|    }
  125|  20.8k|    secp256k1_fe_mul(&t1, &t1, &x22);
  ------------------
  |  |   93|  20.8k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  126|   146k|    for (j=0; j<6; j++) {
  ------------------
  |  Branch (126:15): [True: 125k, False: 20.8k]
  ------------------
  127|   125k|        secp256k1_fe_sqr(&t1, &t1);
  ------------------
  |  |   94|   125k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  128|   125k|    }
  129|  20.8k|    secp256k1_fe_mul(&t1, &t1, &x2);
  ------------------
  |  |   93|  20.8k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  130|  20.8k|    secp256k1_fe_sqr(&t1, &t1);
  ------------------
  |  |   94|  20.8k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  131|  20.8k|    secp256k1_fe_sqr(r, &t1);
  ------------------
  |  |   94|  20.8k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  132|       |
  133|       |    /* Check that a square root was actually calculated */
  134|       |
  135|  20.8k|    secp256k1_fe_sqr(&t1, r);
  ------------------
  |  |   94|  20.8k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  136|  20.8k|    ret = secp256k1_fe_equal(&t1, a);
  137|       |
  138|       |#ifdef VERIFY
  139|       |    if (!ret) {
  140|       |        secp256k1_fe_negate(&t1, &t1, 1);
  141|       |        secp256k1_fe_normalize_var(&t1);
  142|       |        VERIFY_CHECK(secp256k1_fe_equal(&t1, a));
  143|       |    }
  144|       |#endif
  145|  20.8k|    return ret;
  146|  20.8k|}
secp256k1.c:secp256k1_fe_equal:
   25|  25.9k|SECP256K1_INLINE static int secp256k1_fe_equal(const secp256k1_fe *a, const secp256k1_fe *b) {
   26|  25.9k|    secp256k1_fe na;
   27|  25.9k|    SECP256K1_FE_VERIFY(a);
  ------------------
  |  |  344|  25.9k|#define SECP256K1_FE_VERIFY(a) secp256k1_fe_verify(a)
  ------------------
   28|  25.9k|    SECP256K1_FE_VERIFY(b);
  ------------------
  |  |  344|  25.9k|#define SECP256K1_FE_VERIFY(a) secp256k1_fe_verify(a)
  ------------------
   29|  25.9k|    SECP256K1_FE_VERIFY_MAGNITUDE(a, 1);
  ------------------
  |  |  348|  25.9k|#define SECP256K1_FE_VERIFY_MAGNITUDE(a, m) secp256k1_fe_verify_magnitude(a, m)
  ------------------
   30|  25.9k|    SECP256K1_FE_VERIFY_MAGNITUDE(b, 31);
  ------------------
  |  |  348|  25.9k|#define SECP256K1_FE_VERIFY_MAGNITUDE(a, m) secp256k1_fe_verify_magnitude(a, m)
  ------------------
   31|       |
   32|  25.9k|    secp256k1_fe_negate(&na, a, 1);
  ------------------
  |  |  211|  25.9k|#define secp256k1_fe_negate(r, a, m) ASSERT_INT_CONST_AND_DO(m, secp256k1_fe_negate_unchecked(r, a, m))
  |  |  ------------------
  |  |  |  |   77|  25.9k|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |   78|  25.9k|    switch(42) { \
  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:9): [True: 0, False: 25.9k]
  |  |  |  |  ------------------
  |  |  |  |   81|      0|            break; \
  |  |  |  |   82|  25.9k|        default: ; \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:9): [True: 25.9k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   83|  25.9k|    } \
  |  |  |  |   84|  25.9k|    stmt; \
  |  |  |  |   85|  25.9k|} while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (85:9): [Folded, False: 25.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   33|  25.9k|    secp256k1_fe_add(&na, b);
  ------------------
  |  |   92|  25.9k|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
   34|  25.9k|    return secp256k1_fe_normalizes_to_zero(&na);
  ------------------
  |  |   81|  25.9k|#  define secp256k1_fe_normalizes_to_zero secp256k1_fe_impl_normalizes_to_zero
  ------------------
   35|  25.9k|}
secp256k1.c:secp256k1_fe_clear:
   21|  70.9k|SECP256K1_INLINE static void secp256k1_fe_clear(secp256k1_fe *a) {
   22|  70.9k|    secp256k1_memclear(a, sizeof(secp256k1_fe));
   23|  70.9k|}

secp256k1.c:secp256k1_ge_set_xy:
  132|   332k|static void secp256k1_ge_set_xy(secp256k1_ge *r, const secp256k1_fe *x, const secp256k1_fe *y) {
  133|   332k|    SECP256K1_FE_VERIFY(x);
  ------------------
  |  |  344|   332k|#define SECP256K1_FE_VERIFY(a) secp256k1_fe_verify(a)
  ------------------
  134|   332k|    SECP256K1_FE_VERIFY(y);
  ------------------
  |  |  344|   332k|#define SECP256K1_FE_VERIFY(a) secp256k1_fe_verify(a)
  ------------------
  135|       |
  136|   332k|    r->infinity = 0;
  137|   332k|    r->x = *x;
  138|   332k|    r->y = *y;
  139|       |
  140|   332k|    SECP256K1_GE_VERIFY(r);
  ------------------
  |  |  210|   332k|#define SECP256K1_GE_VERIFY(a) secp256k1_ge_verify(a)
  ------------------
  141|   332k|}
secp256k1.c:secp256k1_ge_verify:
   78|  7.78M|static void secp256k1_ge_verify(const secp256k1_ge *a) {
   79|  7.78M|    SECP256K1_FE_VERIFY(&a->x);
  ------------------
  |  |  344|  7.78M|#define SECP256K1_FE_VERIFY(a) secp256k1_fe_verify(a)
  ------------------
   80|  7.78M|    SECP256K1_FE_VERIFY(&a->y);
  ------------------
  |  |  344|  7.78M|#define SECP256K1_FE_VERIFY(a) secp256k1_fe_verify(a)
  ------------------
   81|  7.78M|    SECP256K1_FE_VERIFY_MAGNITUDE(&a->x, SECP256K1_GE_X_MAGNITUDE_MAX);
  ------------------
  |  |  348|  7.78M|#define SECP256K1_FE_VERIFY_MAGNITUDE(a, m) secp256k1_fe_verify_magnitude(a, m)
  ------------------
   82|  7.78M|    SECP256K1_FE_VERIFY_MAGNITUDE(&a->y, SECP256K1_GE_Y_MAGNITUDE_MAX);
  ------------------
  |  |  348|  7.78M|#define SECP256K1_FE_VERIFY_MAGNITUDE(a, m) secp256k1_fe_verify_magnitude(a, m)
  ------------------
   83|  7.78M|    VERIFY_CHECK(a->infinity == 0 || a->infinity == 1);
   84|  7.78M|    (void)a;
   85|  7.78M|}
secp256k1.c:secp256k1_ge_is_in_correct_subgroup:
  924|  3.10k|static int secp256k1_ge_is_in_correct_subgroup(const secp256k1_ge* ge) {
  925|       |#ifdef EXHAUSTIVE_TEST_ORDER
  926|       |    secp256k1_gej out;
  927|       |    int i;
  928|       |    SECP256K1_GE_VERIFY(ge);
  929|       |
  930|       |    /* A very simple EC multiplication ladder that avoids a dependency on ecmult. */
  931|       |    secp256k1_gej_set_infinity(&out);
  932|       |    for (i = 0; i < 32; ++i) {
  933|       |        secp256k1_gej_double_var(&out, &out, NULL);
  934|       |        if ((((uint32_t)EXHAUSTIVE_TEST_ORDER) >> (31 - i)) & 1) {
  935|       |            secp256k1_gej_add_ge_var(&out, &out, ge, NULL);
  936|       |        }
  937|       |    }
  938|       |    return secp256k1_gej_is_infinity(&out);
  939|       |#else
  940|  3.10k|    SECP256K1_GE_VERIFY(ge);
  ------------------
  |  |  210|  3.10k|#define SECP256K1_GE_VERIFY(a) secp256k1_ge_verify(a)
  ------------------
  941|       |
  942|  3.10k|    (void)ge;
  943|       |    /* The real secp256k1 group has cofactor 1, so the subgroup is the entire curve. */
  944|  3.10k|    return 1;
  945|  3.10k|#endif
  946|  3.10k|}
secp256k1.c:secp256k1_ge_to_bytes:
  975|  55.8k|static void secp256k1_ge_to_bytes(unsigned char *buf, const secp256k1_ge *a) {
  976|  55.8k|    secp256k1_ge_storage s;
  977|       |
  978|       |    /* We require that the secp256k1_ge_storage type is exactly 64 bytes.
  979|       |     * This is formally not guaranteed by the C standard, but should hold on any
  980|       |     * sane compiler in the real world. */
  981|  55.8k|    STATIC_ASSERT(sizeof(secp256k1_ge_storage) == 64);
  ------------------
  |  |   64|  55.8k|#define STATIC_ASSERT(expr) do { \
  |  |   65|  55.8k|    switch(0) { \
  |  |  ------------------
  |  |  |  Branch (65:12): [Folded, False: 0]
  |  |  ------------------
  |  |   66|  55.8k|        case 0: \
  |  |  ------------------
  |  |  |  Branch (66:9): [True: 55.8k, False: 0]
  |  |  ------------------
  |  |   67|  55.8k|        /* If expr evaluates to 0, we have two case labels "0", which is illegal. */ \
  |  |   68|  55.8k|        case /* ERROR: static assertion failed */ (expr): \
  |  |  ------------------
  |  |  |  Branch (68:9): [True: 0, False: 55.8k]
  |  |  ------------------
  |  |   69|  55.8k|        ; \
  |  |   70|  55.8k|    } \
  |  |   71|  55.8k|} while(0)
  |  |  ------------------
  |  |  |  Branch (71:9): [Folded, False: 55.8k]
  |  |  ------------------
  ------------------
  982|  55.8k|    VERIFY_CHECK(!secp256k1_ge_is_infinity(a));
  983|  55.8k|    secp256k1_ge_to_storage(&s, a);
  984|  55.8k|    memcpy(buf, &s, 64);
  985|  55.8k|}
secp256k1.c:secp256k1_ge_to_storage:
  877|  55.8k|static void secp256k1_ge_to_storage(secp256k1_ge_storage *r, const secp256k1_ge *a) {
  878|  55.8k|    secp256k1_fe x, y;
  879|  55.8k|    SECP256K1_GE_VERIFY(a);
  ------------------
  |  |  210|  55.8k|#define SECP256K1_GE_VERIFY(a) secp256k1_ge_verify(a)
  ------------------
  880|  55.8k|    VERIFY_CHECK(!a->infinity);
  881|       |
  882|  55.8k|    x = a->x;
  883|  55.8k|    secp256k1_fe_normalize(&x);
  ------------------
  |  |   78|  55.8k|#  define secp256k1_fe_normalize secp256k1_fe_impl_normalize
  ------------------
  884|  55.8k|    y = a->y;
  885|  55.8k|    secp256k1_fe_normalize(&y);
  ------------------
  |  |   78|  55.8k|#  define secp256k1_fe_normalize secp256k1_fe_impl_normalize
  ------------------
  886|  55.8k|    secp256k1_fe_to_storage(&r->x, &x);
  ------------------
  |  |   96|  55.8k|#  define secp256k1_fe_to_storage secp256k1_fe_impl_to_storage
  ------------------
  887|  55.8k|    secp256k1_fe_to_storage(&r->y, &y);
  ------------------
  |  |   96|  55.8k|#  define secp256k1_fe_to_storage secp256k1_fe_impl_to_storage
  ------------------
  888|  55.8k|}
secp256k1.c:secp256k1_ge_clear:
  343|  61.0k|static void secp256k1_ge_clear(secp256k1_ge *r) {
  344|  61.0k|    secp256k1_memclear(r, sizeof(secp256k1_ge));
  345|  61.0k|}
secp256k1.c:secp256k1_ge_from_bytes:
  987|  58.4k|static void secp256k1_ge_from_bytes(secp256k1_ge *r, const unsigned char *buf) {
  988|  58.4k|    secp256k1_ge_storage s;
  989|       |
  990|  58.4k|    STATIC_ASSERT(sizeof(secp256k1_ge_storage) == 64);
  ------------------
  |  |   64|  58.4k|#define STATIC_ASSERT(expr) do { \
  |  |   65|  58.4k|    switch(0) { \
  |  |  ------------------
  |  |  |  Branch (65:12): [Folded, False: 0]
  |  |  ------------------
  |  |   66|  58.4k|        case 0: \
  |  |  ------------------
  |  |  |  Branch (66:9): [True: 58.4k, False: 0]
  |  |  ------------------
  |  |   67|  58.4k|        /* If expr evaluates to 0, we have two case labels "0", which is illegal. */ \
  |  |   68|  58.4k|        case /* ERROR: static assertion failed */ (expr): \
  |  |  ------------------
  |  |  |  Branch (68:9): [True: 0, False: 58.4k]
  |  |  ------------------
  |  |   69|  58.4k|        ; \
  |  |   70|  58.4k|    } \
  |  |   71|  58.4k|} while(0)
  |  |  ------------------
  |  |  |  Branch (71:9): [Folded, False: 58.4k]
  |  |  ------------------
  ------------------
  991|  58.4k|    memcpy(&s, buf, 64);
  992|  58.4k|    secp256k1_ge_from_storage(r, &s);
  993|  58.4k|}
secp256k1.c:secp256k1_ge_from_storage:
  890|  2.77M|static void secp256k1_ge_from_storage(secp256k1_ge *r, const secp256k1_ge_storage *a) {
  891|  2.77M|    secp256k1_fe_from_storage(&r->x, &a->x);
  ------------------
  |  |   97|  2.77M|#  define secp256k1_fe_from_storage secp256k1_fe_impl_from_storage
  ------------------
  892|  2.77M|    secp256k1_fe_from_storage(&r->y, &a->y);
  ------------------
  |  |   97|  2.77M|#  define secp256k1_fe_from_storage secp256k1_fe_impl_from_storage
  ------------------
  893|  2.77M|    r->infinity = 0;
  894|       |
  895|  2.77M|    SECP256K1_GE_VERIFY(r);
  ------------------
  |  |  210|  2.77M|#define SECP256K1_GE_VERIFY(a) secp256k1_ge_verify(a)
  ------------------
  896|  2.77M|}
secp256k1.c:secp256k1_gej_verify:
   87|  13.1M|static void secp256k1_gej_verify(const secp256k1_gej *a) {
   88|  13.1M|    SECP256K1_FE_VERIFY(&a->x);
  ------------------
  |  |  344|  13.1M|#define SECP256K1_FE_VERIFY(a) secp256k1_fe_verify(a)
  ------------------
   89|  13.1M|    SECP256K1_FE_VERIFY(&a->y);
  ------------------
  |  |  344|  13.1M|#define SECP256K1_FE_VERIFY(a) secp256k1_fe_verify(a)
  ------------------
   90|  13.1M|    SECP256K1_FE_VERIFY(&a->z);
  ------------------
  |  |  344|  13.1M|#define SECP256K1_FE_VERIFY(a) secp256k1_fe_verify(a)
  ------------------
   91|  13.1M|    SECP256K1_FE_VERIFY_MAGNITUDE(&a->x, SECP256K1_GEJ_X_MAGNITUDE_MAX);
  ------------------
  |  |  348|  13.1M|#define SECP256K1_FE_VERIFY_MAGNITUDE(a, m) secp256k1_fe_verify_magnitude(a, m)
  ------------------
   92|  13.1M|    SECP256K1_FE_VERIFY_MAGNITUDE(&a->y, SECP256K1_GEJ_Y_MAGNITUDE_MAX);
  ------------------
  |  |  348|  13.1M|#define SECP256K1_FE_VERIFY_MAGNITUDE(a, m) secp256k1_fe_verify_magnitude(a, m)
  ------------------
   93|  13.1M|    SECP256K1_FE_VERIFY_MAGNITUDE(&a->z, SECP256K1_GEJ_Z_MAGNITUDE_MAX);
  ------------------
  |  |  348|  13.1M|#define SECP256K1_FE_VERIFY_MAGNITUDE(a, m) secp256k1_fe_verify_magnitude(a, m)
  ------------------
   94|  13.1M|    VERIFY_CHECK(a->infinity == 0 || a->infinity == 1);
   95|  13.1M|    (void)a;
   96|  13.1M|}
secp256k1.c:secp256k1_ge_storage_cmov:
  910|  83.9M|static SECP256K1_INLINE void secp256k1_ge_storage_cmov(secp256k1_ge_storage *r, const secp256k1_ge_storage *a, int flag) {
  911|  83.9M|    secp256k1_fe_storage_cmov(&r->x, &a->x, flag);
  912|  83.9M|    secp256k1_fe_storage_cmov(&r->y, &a->y, flag);
  913|  83.9M|}
secp256k1.c:secp256k1_gej_rescale:
  861|  61.0k|static void secp256k1_gej_rescale(secp256k1_gej *r, const secp256k1_fe *s) {
  862|       |    /* Operations: 4 mul, 1 sqr */
  863|  61.0k|    secp256k1_fe zz;
  864|  61.0k|    SECP256K1_GEJ_VERIFY(r);
  ------------------
  |  |  214|  61.0k|#define SECP256K1_GEJ_VERIFY(a) secp256k1_gej_verify(a)
  ------------------
  865|  61.0k|    SECP256K1_FE_VERIFY(s);
  ------------------
  |  |  344|  61.0k|#define SECP256K1_FE_VERIFY(a) secp256k1_fe_verify(a)
  ------------------
  866|  61.0k|    VERIFY_CHECK(!secp256k1_fe_normalizes_to_zero_var(s));
  867|       |
  868|  61.0k|    secp256k1_fe_sqr(&zz, s);
  ------------------
  |  |   94|  61.0k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  869|  61.0k|    secp256k1_fe_mul(&r->x, &r->x, &zz);                /* r->x *= s^2 */
  ------------------
  |  |   93|  61.0k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  870|  61.0k|    secp256k1_fe_mul(&r->y, &r->y, &zz);
  ------------------
  |  |   93|  61.0k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  871|  61.0k|    secp256k1_fe_mul(&r->y, &r->y, s);                  /* r->y *= s^3 */
  ------------------
  |  |   93|  61.0k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  872|  61.0k|    secp256k1_fe_mul(&r->z, &r->z, s);                  /* r->z *= s   */
  ------------------
  |  |   93|  61.0k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  873|       |
  874|  61.0k|    SECP256K1_GEJ_VERIFY(r);
  ------------------
  |  |  214|  61.0k|#define SECP256K1_GEJ_VERIFY(a) secp256k1_gej_verify(a)
  ------------------
  875|  61.0k|}
secp256k1.c:secp256k1_gej_double:
  460|  1.97M|static SECP256K1_INLINE void secp256k1_gej_double(secp256k1_gej *r, const secp256k1_gej *a) {
  461|       |    /* Operations: 3 mul, 4 sqr, 8 add/half/mul_int/negate */
  462|  1.97M|    secp256k1_fe l, s, t;
  463|  1.97M|    SECP256K1_GEJ_VERIFY(a);
  ------------------
  |  |  214|  1.97M|#define SECP256K1_GEJ_VERIFY(a) secp256k1_gej_verify(a)
  ------------------
  464|       |
  465|  1.97M|    r->infinity = a->infinity;
  466|       |
  467|       |    /* Formula used:
  468|       |     * L = (3/2) * X1^2
  469|       |     * S = Y1^2
  470|       |     * T = -X1*S
  471|       |     * X3 = L^2 + 2*T
  472|       |     * Y3 = -(L*(X3 + T) + S^2)
  473|       |     * Z3 = Y1*Z1
  474|       |     */
  475|       |
  476|  1.97M|    secp256k1_fe_mul(&r->z, &a->z, &a->y); /* Z3 = Y1*Z1 (1) */
  ------------------
  |  |   93|  1.97M|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  477|  1.97M|    secp256k1_fe_sqr(&s, &a->y);           /* S = Y1^2 (1) */
  ------------------
  |  |   94|  1.97M|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  478|  1.97M|    secp256k1_fe_sqr(&l, &a->x);           /* L = X1^2 (1) */
  ------------------
  |  |   94|  1.97M|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  479|  1.97M|    secp256k1_fe_mul_int(&l, 3);           /* L = 3*X1^2 (3) */
  ------------------
  |  |  233|  1.97M|#define secp256k1_fe_mul_int(r, a) ASSERT_INT_CONST_AND_DO(a, secp256k1_fe_mul_int_unchecked(r, a))
  |  |  ------------------
  |  |  |  |   77|  1.97M|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |   78|  1.97M|    switch(42) { \
  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:9): [True: 0, False: 1.97M]
  |  |  |  |  ------------------
  |  |  |  |   81|      0|            break; \
  |  |  |  |   82|  1.97M|        default: ; \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:9): [True: 1.97M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   83|  1.97M|    } \
  |  |  |  |   84|  1.97M|    stmt; \
  |  |  |  |   85|  1.97M|} while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (85:9): [Folded, False: 1.97M]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  480|  1.97M|    secp256k1_fe_half(&l);                 /* L = 3/2*X1^2 (2) */
  ------------------
  |  |  101|  1.97M|#  define secp256k1_fe_half secp256k1_fe_impl_half
  ------------------
  481|  1.97M|    secp256k1_fe_negate(&t, &s, 1);        /* T = -S (2) */
  ------------------
  |  |  211|  1.97M|#define secp256k1_fe_negate(r, a, m) ASSERT_INT_CONST_AND_DO(m, secp256k1_fe_negate_unchecked(r, a, m))
  |  |  ------------------
  |  |  |  |   77|  1.97M|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |   78|  1.97M|    switch(42) { \
  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:9): [True: 0, False: 1.97M]
  |  |  |  |  ------------------
  |  |  |  |   81|      0|            break; \
  |  |  |  |   82|  1.97M|        default: ; \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:9): [True: 1.97M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   83|  1.97M|    } \
  |  |  |  |   84|  1.97M|    stmt; \
  |  |  |  |   85|  1.97M|} while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (85:9): [Folded, False: 1.97M]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  482|  1.97M|    secp256k1_fe_mul(&t, &t, &a->x);       /* T = -X1*S (1) */
  ------------------
  |  |   93|  1.97M|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  483|  1.97M|    secp256k1_fe_sqr(&r->x, &l);           /* X3 = L^2 (1) */
  ------------------
  |  |   94|  1.97M|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  484|  1.97M|    secp256k1_fe_add(&r->x, &t);           /* X3 = L^2 + T (2) */
  ------------------
  |  |   92|  1.97M|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  485|  1.97M|    secp256k1_fe_add(&r->x, &t);           /* X3 = L^2 + 2*T (3) */
  ------------------
  |  |   92|  1.97M|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  486|  1.97M|    secp256k1_fe_sqr(&s, &s);              /* S' = S^2 (1) */
  ------------------
  |  |   94|  1.97M|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  487|  1.97M|    secp256k1_fe_add(&t, &r->x);           /* T' = X3 + T (4) */
  ------------------
  |  |   92|  1.97M|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  488|  1.97M|    secp256k1_fe_mul(&r->y, &t, &l);       /* Y3 = L*(X3 + T) (1) */
  ------------------
  |  |   93|  1.97M|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  489|  1.97M|    secp256k1_fe_add(&r->y, &s);           /* Y3 = L*(X3 + T) + S^2 (2) */
  ------------------
  |  |   92|  1.97M|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  490|  1.97M|    secp256k1_fe_negate(&r->y, &r->y, 2);  /* Y3 = -(L*(X3 + T) + S^2) (3) */
  ------------------
  |  |  211|  1.97M|#define secp256k1_fe_negate(r, a, m) ASSERT_INT_CONST_AND_DO(m, secp256k1_fe_negate_unchecked(r, a, m))
  |  |  ------------------
  |  |  |  |   77|  1.97M|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |   78|  1.97M|    switch(42) { \
  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:9): [True: 0, False: 1.97M]
  |  |  |  |  ------------------
  |  |  |  |   81|      0|            break; \
  |  |  |  |   82|  1.97M|        default: ; \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:9): [True: 1.97M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   83|  1.97M|    } \
  |  |  |  |   84|  1.97M|    stmt; \
  |  |  |  |   85|  1.97M|} while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (85:9): [Folded, False: 1.97M]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  491|       |
  492|  1.97M|    SECP256K1_GEJ_VERIFY(r);
  ------------------
  |  |  214|  1.97M|#define SECP256K1_GEJ_VERIFY(a) secp256k1_gej_verify(a)
  ------------------
  493|  1.97M|}
secp256k1.c:secp256k1_gej_clear:
  339|  61.0k|static void secp256k1_gej_clear(secp256k1_gej *r) {
  340|  61.0k|    secp256k1_memclear(r, sizeof(secp256k1_gej));
  341|  61.0k|}
secp256k1.c:secp256k1_gej_set_infinity:
  322|  11.4k|static void secp256k1_gej_set_infinity(secp256k1_gej *r) {
  323|  11.4k|    r->infinity = 1;
  324|  11.4k|    secp256k1_fe_set_int(&r->x, 0);
  ------------------
  |  |   83|  11.4k|#  define secp256k1_fe_set_int secp256k1_fe_impl_set_int
  ------------------
  325|  11.4k|    secp256k1_fe_set_int(&r->y, 0);
  ------------------
  |  |   83|  11.4k|#  define secp256k1_fe_set_int secp256k1_fe_impl_set_int
  ------------------
  326|  11.4k|    secp256k1_fe_set_int(&r->z, 0);
  ------------------
  |  |   83|  11.4k|#  define secp256k1_fe_set_int secp256k1_fe_impl_set_int
  ------------------
  327|       |
  328|  11.4k|    SECP256K1_GEJ_VERIFY(r);
  ------------------
  |  |  214|  11.4k|#define SECP256K1_GEJ_VERIFY(a) secp256k1_gej_verify(a)
  ------------------
  329|  11.4k|}
secp256k1.c:secp256k1_gej_add_ge:
  724|  3.12M|static void secp256k1_gej_add_ge(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_ge *b) {
  725|       |    /* Operations: 7 mul, 5 sqr, 21 add/cmov/half/mul_int/negate/normalizes_to_zero */
  726|  3.12M|    secp256k1_fe zz, u1, u2, s1, s2, t, tt, m, n, q, rr;
  727|  3.12M|    secp256k1_fe m_alt, rr_alt;
  728|  3.12M|    int degenerate;
  729|  3.12M|    SECP256K1_GEJ_VERIFY(a);
  ------------------
  |  |  214|  3.12M|#define SECP256K1_GEJ_VERIFY(a) secp256k1_gej_verify(a)
  ------------------
  730|  3.12M|    SECP256K1_GE_VERIFY(b);
  ------------------
  |  |  210|  3.12M|#define SECP256K1_GE_VERIFY(a) secp256k1_ge_verify(a)
  ------------------
  731|  3.12M|    VERIFY_CHECK(!b->infinity);
  732|       |
  733|       |    /*  In:
  734|       |     *    Eric Brier and Marc Joye, Weierstrass Elliptic Curves and Side-Channel Attacks.
  735|       |     *    In D. Naccache and P. Paillier, Eds., Public Key Cryptography, vol. 2274 of Lecture Notes in Computer Science, pages 335-345. Springer-Verlag, 2002.
  736|       |     *  we find as solution for a unified addition/doubling formula:
  737|       |     *    lambda = ((x1 + x2)^2 - x1 * x2 + a) / (y1 + y2), with a = 0 for secp256k1's curve equation.
  738|       |     *    x3 = lambda^2 - (x1 + x2)
  739|       |     *    2*y3 = lambda * (x1 + x2 - 2 * x3) - (y1 + y2).
  740|       |     *
  741|       |     *  Substituting x_i = Xi / Zi^2 and yi = Yi / Zi^3, for i=1,2,3, gives:
  742|       |     *    U1 = X1*Z2^2, U2 = X2*Z1^2
  743|       |     *    S1 = Y1*Z2^3, S2 = Y2*Z1^3
  744|       |     *    Z = Z1*Z2
  745|       |     *    T = U1+U2
  746|       |     *    M = S1+S2
  747|       |     *    Q = -T*M^2
  748|       |     *    R = T^2-U1*U2
  749|       |     *    X3 = R^2+Q
  750|       |     *    Y3 = -(R*(2*X3+Q)+M^4)/2
  751|       |     *    Z3 = M*Z
  752|       |     *  (Note that the paper uses xi = Xi / Zi and yi = Yi / Zi instead.)
  753|       |     *
  754|       |     *  This formula has the benefit of being the same for both addition
  755|       |     *  of distinct points and doubling. However, it breaks down in the
  756|       |     *  case that either point is infinity, or that y1 = -y2. We handle
  757|       |     *  these cases in the following ways:
  758|       |     *
  759|       |     *    - If b is infinity we simply bail by means of a VERIFY_CHECK.
  760|       |     *
  761|       |     *    - If a is infinity, we detect this, and at the end of the
  762|       |     *      computation replace the result (which will be meaningless,
  763|       |     *      but we compute to be constant-time) with b.x : b.y : 1.
  764|       |     *
  765|       |     *    - If a = -b, we have y1 = -y2, which is a degenerate case.
  766|       |     *      But here the answer is infinity, so we simply set the
  767|       |     *      infinity flag of the result, overriding the computed values
  768|       |     *      without even needing to cmov.
  769|       |     *
  770|       |     *    - If y1 = -y2 but x1 != x2, which does occur thanks to certain
  771|       |     *      properties of our curve (specifically, 1 has nontrivial cube
  772|       |     *      roots in our field, and the curve equation has no x coefficient)
  773|       |     *      then the answer is not infinity but also not given by the above
  774|       |     *      equation. In this case, we cmov in place an alternate expression
  775|       |     *      for lambda. Specifically (y1 - y2)/(x1 - x2). Where both these
  776|       |     *      expressions for lambda are defined, they are equal, and can be
  777|       |     *      obtained from each other by multiplication by (y1 + y2)/(y1 + y2)
  778|       |     *      then substitution of x^3 + 7 for y^2 (using the curve equation).
  779|       |     *      For all pairs of nonzero points (a, b) at least one is defined,
  780|       |     *      so this covers everything.
  781|       |     */
  782|       |
  783|  3.12M|    secp256k1_fe_sqr(&zz, &a->z);                       /* z = Z1^2 */
  ------------------
  |  |   94|  3.12M|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  784|  3.12M|    u1 = a->x;                                          /* u1 = U1 = X1*Z2^2 (GEJ_X_M) */
  785|  3.12M|    secp256k1_fe_mul(&u2, &b->x, &zz);                  /* u2 = U2 = X2*Z1^2 (1) */
  ------------------
  |  |   93|  3.12M|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  786|  3.12M|    s1 = a->y;                                          /* s1 = S1 = Y1*Z2^3 (GEJ_Y_M) */
  787|  3.12M|    secp256k1_fe_mul(&s2, &b->y, &zz);                  /* s2 = Y2*Z1^2 (1) */
  ------------------
  |  |   93|  3.12M|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  788|  3.12M|    secp256k1_fe_mul(&s2, &s2, &a->z);                  /* s2 = S2 = Y2*Z1^3 (1) */
  ------------------
  |  |   93|  3.12M|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  789|  3.12M|    t = u1; secp256k1_fe_add(&t, &u2);                  /* t = T = U1+U2 (GEJ_X_M+1) */
  ------------------
  |  |   92|  3.12M|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  790|  3.12M|    m = s1; secp256k1_fe_add(&m, &s2);                  /* m = M = S1+S2 (GEJ_Y_M+1) */
  ------------------
  |  |   92|  3.12M|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  791|  3.12M|    secp256k1_fe_sqr(&rr, &t);                          /* rr = T^2 (1) */
  ------------------
  |  |   94|  3.12M|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  792|  3.12M|    secp256k1_fe_negate(&m_alt, &u2, 1);                /* Malt = -X2*Z1^2 (2) */
  ------------------
  |  |  211|  3.12M|#define secp256k1_fe_negate(r, a, m) ASSERT_INT_CONST_AND_DO(m, secp256k1_fe_negate_unchecked(r, a, m))
  |  |  ------------------
  |  |  |  |   77|  3.12M|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |   78|  3.12M|    switch(42) { \
  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:9): [True: 0, False: 3.12M]
  |  |  |  |  ------------------
  |  |  |  |   81|      0|            break; \
  |  |  |  |   82|  3.12M|        default: ; \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:9): [True: 3.12M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   83|  3.12M|    } \
  |  |  |  |   84|  3.12M|    stmt; \
  |  |  |  |   85|  3.12M|} while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (85:9): [Folded, False: 3.12M]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  793|  3.12M|    secp256k1_fe_mul(&tt, &u1, &m_alt);                 /* tt = -U1*U2 (1) */
  ------------------
  |  |   93|  3.12M|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  794|  3.12M|    secp256k1_fe_add(&rr, &tt);                         /* rr = R = T^2-U1*U2 (2) */
  ------------------
  |  |   92|  3.12M|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  795|       |    /* If lambda = R/M = R/0 we have a problem (except in the "trivial"
  796|       |     * case that Z = z1z2 = 0, and this is special-cased later on). */
  797|  3.12M|    degenerate = secp256k1_fe_normalizes_to_zero(&m);
  ------------------
  |  |   81|  3.12M|#  define secp256k1_fe_normalizes_to_zero secp256k1_fe_impl_normalizes_to_zero
  ------------------
  798|       |    /* This only occurs when y1 == -y2 and x1^3 == x2^3, but x1 != x2.
  799|       |     * This means either x1 == beta*x2 or beta*x1 == x2, where beta is
  800|       |     * a nontrivial cube root of one. In either case, an alternate
  801|       |     * non-indeterminate expression for lambda is (y1 - y2)/(x1 - x2),
  802|       |     * so we set R/M equal to this. */
  803|  3.12M|    rr_alt = s1;
  804|  3.12M|    secp256k1_fe_mul_int(&rr_alt, 2);       /* rr_alt = Y1*Z2^3 - Y2*Z1^3 (GEJ_Y_M*2) */
  ------------------
  |  |  233|  3.12M|#define secp256k1_fe_mul_int(r, a) ASSERT_INT_CONST_AND_DO(a, secp256k1_fe_mul_int_unchecked(r, a))
  |  |  ------------------
  |  |  |  |   77|  3.12M|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |   78|  3.12M|    switch(42) { \
  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:9): [True: 0, False: 3.12M]
  |  |  |  |  ------------------
  |  |  |  |   81|      0|            break; \
  |  |  |  |   82|  3.12M|        default: ; \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:9): [True: 3.12M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   83|  3.12M|    } \
  |  |  |  |   84|  3.12M|    stmt; \
  |  |  |  |   85|  3.12M|} while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (85:9): [Folded, False: 3.12M]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  805|  3.12M|    secp256k1_fe_add(&m_alt, &u1);          /* Malt = X1*Z2^2 - X2*Z1^2 (GEJ_X_M+2) */
  ------------------
  |  |   92|  3.12M|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  806|       |
  807|  3.12M|    secp256k1_fe_cmov(&rr_alt, &rr, !degenerate);       /* rr_alt (GEJ_Y_M*2) */
  ------------------
  |  |   95|  3.12M|#  define secp256k1_fe_cmov secp256k1_fe_impl_cmov
  ------------------
  808|  3.12M|    secp256k1_fe_cmov(&m_alt, &m, !degenerate);         /* m_alt (GEJ_X_M+2) */
  ------------------
  |  |   95|  3.12M|#  define secp256k1_fe_cmov secp256k1_fe_impl_cmov
  ------------------
  809|       |    /* Now Ralt / Malt = lambda and is guaranteed not to be Ralt / 0.
  810|       |     * From here on out Ralt and Malt represent the numerator
  811|       |     * and denominator of lambda; R and M represent the explicit
  812|       |     * expressions x1^2 + x2^2 + x1x2 and y1 + y2. */
  813|  3.12M|    secp256k1_fe_sqr(&n, &m_alt);                       /* n = Malt^2 (1) */
  ------------------
  |  |   94|  3.12M|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  814|  3.12M|    secp256k1_fe_negate(&q, &t,
  ------------------
  |  |  211|  3.12M|#define secp256k1_fe_negate(r, a, m) ASSERT_INT_CONST_AND_DO(m, secp256k1_fe_negate_unchecked(r, a, m))
  |  |  ------------------
  |  |  |  |   77|  3.12M|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |   78|  3.12M|    switch(42) { \
  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:9): [True: 0, False: 3.12M]
  |  |  |  |  ------------------
  |  |  |  |   81|      0|            break; \
  |  |  |  |   82|  3.12M|        default: ; \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:9): [True: 3.12M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   83|  3.12M|    } \
  |  |  |  |   84|  3.12M|    stmt; \
  |  |  |  |   85|  3.12M|} while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (85:9): [Folded, False: 3.12M]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  815|  3.12M|        SECP256K1_GEJ_X_MAGNITUDE_MAX + 1);             /* q = -T (GEJ_X_M+2) */
  816|  3.12M|    secp256k1_fe_mul(&q, &q, &n);                       /* q = Q = -T*Malt^2 (1) */
  ------------------
  |  |   93|  3.12M|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  817|       |    /* These two lines use the observation that either M == Malt or M == 0,
  818|       |     * so M^3 * Malt is either Malt^4 (which is computed by squaring), or
  819|       |     * zero (which is "computed" by cmov). So the cost is one squaring
  820|       |     * versus two multiplications. */
  821|  3.12M|    secp256k1_fe_sqr(&n, &n);                           /* n = Malt^4 (1) */
  ------------------
  |  |   94|  3.12M|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  822|  3.12M|    secp256k1_fe_cmov(&n, &m, degenerate);              /* n = M^3 * Malt (GEJ_Y_M+1) */
  ------------------
  |  |   95|  3.12M|#  define secp256k1_fe_cmov secp256k1_fe_impl_cmov
  ------------------
  823|  3.12M|    secp256k1_fe_sqr(&t, &rr_alt);                      /* t = Ralt^2 (1) */
  ------------------
  |  |   94|  3.12M|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  824|  3.12M|    secp256k1_fe_mul(&r->z, &a->z, &m_alt);             /* r->z = Z3 = Malt*Z (1) */
  ------------------
  |  |   93|  3.12M|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  825|  3.12M|    secp256k1_fe_add(&t, &q);                           /* t = Ralt^2 + Q (2) */
  ------------------
  |  |   92|  3.12M|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  826|  3.12M|    r->x = t;                                           /* r->x = X3 = Ralt^2 + Q (2) */
  827|  3.12M|    secp256k1_fe_mul_int(&t, 2);                        /* t = 2*X3 (4) */
  ------------------
  |  |  233|  3.12M|#define secp256k1_fe_mul_int(r, a) ASSERT_INT_CONST_AND_DO(a, secp256k1_fe_mul_int_unchecked(r, a))
  |  |  ------------------
  |  |  |  |   77|  3.12M|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |   78|  3.12M|    switch(42) { \
  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:9): [True: 0, False: 3.12M]
  |  |  |  |  ------------------
  |  |  |  |   81|      0|            break; \
  |  |  |  |   82|  3.12M|        default: ; \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:9): [True: 3.12M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   83|  3.12M|    } \
  |  |  |  |   84|  3.12M|    stmt; \
  |  |  |  |   85|  3.12M|} while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (85:9): [Folded, False: 3.12M]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  828|  3.12M|    secp256k1_fe_add(&t, &q);                           /* t = 2*X3 + Q (5) */
  ------------------
  |  |   92|  3.12M|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  829|  3.12M|    secp256k1_fe_mul(&t, &t, &rr_alt);                  /* t = Ralt*(2*X3 + Q) (1) */
  ------------------
  |  |   93|  3.12M|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  830|  3.12M|    secp256k1_fe_add(&t, &n);                           /* t = Ralt*(2*X3 + Q) + M^3*Malt (GEJ_Y_M+2) */
  ------------------
  |  |   92|  3.12M|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  831|  3.12M|    secp256k1_fe_negate(&r->y, &t,
  ------------------
  |  |  211|  3.12M|#define secp256k1_fe_negate(r, a, m) ASSERT_INT_CONST_AND_DO(m, secp256k1_fe_negate_unchecked(r, a, m))
  |  |  ------------------
  |  |  |  |   77|  3.12M|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |   78|  3.12M|    switch(42) { \
  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:9): [True: 0, False: 3.12M]
  |  |  |  |  ------------------
  |  |  |  |   81|      0|            break; \
  |  |  |  |   82|  3.12M|        default: ; \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:9): [True: 3.12M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   83|  3.12M|    } \
  |  |  |  |   84|  3.12M|    stmt; \
  |  |  |  |   85|  3.12M|} while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (85:9): [Folded, False: 3.12M]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  832|  3.12M|        SECP256K1_GEJ_Y_MAGNITUDE_MAX + 2);             /* r->y = -(Ralt*(2*X3 + Q) + M^3*Malt) (GEJ_Y_M+3) */
  833|  3.12M|    secp256k1_fe_half(&r->y);                           /* r->y = Y3 = -(Ralt*(2*X3 + Q) + M^3*Malt)/2 ((GEJ_Y_M+3)/2 + 1) */
  ------------------
  |  |  101|  3.12M|#  define secp256k1_fe_half secp256k1_fe_impl_half
  ------------------
  834|       |
  835|       |    /* In case a->infinity == 1, replace r with (b->x, b->y, 1). */
  836|  3.12M|    secp256k1_fe_cmov(&r->x, &b->x, a->infinity);
  ------------------
  |  |   95|  3.12M|#  define secp256k1_fe_cmov secp256k1_fe_impl_cmov
  ------------------
  837|  3.12M|    secp256k1_fe_cmov(&r->y, &b->y, a->infinity);
  ------------------
  |  |   95|  3.12M|#  define secp256k1_fe_cmov secp256k1_fe_impl_cmov
  ------------------
  838|  3.12M|    secp256k1_fe_cmov(&r->z, &secp256k1_fe_one, a->infinity);
  ------------------
  |  |   95|  3.12M|#  define secp256k1_fe_cmov secp256k1_fe_impl_cmov
  ------------------
  839|       |
  840|       |    /* Set r->infinity if r->z is 0.
  841|       |     *
  842|       |     * If a->infinity is set, then r->infinity = (r->z == 0) = (1 == 0) = false,
  843|       |     * which is correct because the function assumes that b is not infinity.
  844|       |     *
  845|       |     * Now assume !a->infinity. This implies Z = Z1 != 0.
  846|       |     *
  847|       |     * Case y1 = -y2:
  848|       |     * In this case we could have a = -b, namely if x1 = x2.
  849|       |     * We have degenerate = true, r->z = (x1 - x2) * Z.
  850|       |     * Then r->infinity = ((x1 - x2)Z == 0) = (x1 == x2) = (a == -b).
  851|       |     *
  852|       |     * Case y1 != -y2:
  853|       |     * In this case, we can't have a = -b.
  854|       |     * We have degenerate = false, r->z = (y1 + y2) * Z.
  855|       |     * Then r->infinity = ((y1 + y2)Z == 0) = (y1 == -y2) = false. */
  856|  3.12M|    r->infinity = secp256k1_fe_normalizes_to_zero(&r->z);
  ------------------
  |  |   81|  3.12M|#  define secp256k1_fe_normalizes_to_zero secp256k1_fe_impl_normalizes_to_zero
  ------------------
  857|       |
  858|  3.12M|    SECP256K1_GEJ_VERIFY(r);
  ------------------
  |  |  214|  3.12M|#define SECP256K1_GEJ_VERIFY(a) secp256k1_gej_verify(a)
  ------------------
  859|  3.12M|}
secp256k1.c:secp256k1_gej_is_infinity:
  440|  11.4k|static int secp256k1_gej_is_infinity(const secp256k1_gej *a) {
  441|  11.4k|    SECP256K1_GEJ_VERIFY(a);
  ------------------
  |  |  214|  11.4k|#define SECP256K1_GEJ_VERIFY(a) secp256k1_gej_verify(a)
  ------------------
  442|       |
  443|  11.4k|    return a->infinity;
  444|  11.4k|}
secp256k1.c:secp256k1_ge_set_gej:
  159|  61.0k|static void secp256k1_ge_set_gej(secp256k1_ge *r, secp256k1_gej *a) {
  160|  61.0k|    secp256k1_fe z2, z3;
  161|  61.0k|    SECP256K1_GEJ_VERIFY(a);
  ------------------
  |  |  214|  61.0k|#define SECP256K1_GEJ_VERIFY(a) secp256k1_gej_verify(a)
  ------------------
  162|       |
  163|  61.0k|    r->infinity = a->infinity;
  164|  61.0k|    secp256k1_fe_inv(&a->z, &a->z);
  ------------------
  |  |   98|  61.0k|#  define secp256k1_fe_inv secp256k1_fe_impl_inv
  ------------------
  165|  61.0k|    secp256k1_fe_sqr(&z2, &a->z);
  ------------------
  |  |   94|  61.0k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  166|  61.0k|    secp256k1_fe_mul(&z3, &a->z, &z2);
  ------------------
  |  |   93|  61.0k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  167|  61.0k|    secp256k1_fe_mul(&a->x, &a->x, &z2);
  ------------------
  |  |   93|  61.0k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  168|  61.0k|    secp256k1_fe_mul(&a->y, &a->y, &z3);
  ------------------
  |  |   93|  61.0k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  169|  61.0k|    secp256k1_fe_set_int(&a->z, 1);
  ------------------
  |  |   83|  61.0k|#  define secp256k1_fe_set_int secp256k1_fe_impl_set_int
  ------------------
  170|  61.0k|    r->x = a->x;
  171|  61.0k|    r->y = a->y;
  172|       |
  173|  61.0k|    SECP256K1_GEJ_VERIFY(a);
  ------------------
  |  |  214|  61.0k|#define SECP256K1_GEJ_VERIFY(a) secp256k1_gej_verify(a)
  ------------------
  174|  61.0k|    SECP256K1_GE_VERIFY(r);
  ------------------
  |  |  210|  61.0k|#define SECP256K1_GE_VERIFY(a) secp256k1_ge_verify(a)
  ------------------
  175|  61.0k|}
secp256k1.c:secp256k1_ge_set_xo_var:
  347|  5.17k|static int secp256k1_ge_set_xo_var(secp256k1_ge *r, const secp256k1_fe *x, int odd) {
  348|  5.17k|    secp256k1_fe x2, x3;
  349|  5.17k|    int ret;
  350|  5.17k|    SECP256K1_FE_VERIFY(x);
  ------------------
  |  |  344|  5.17k|#define SECP256K1_FE_VERIFY(a) secp256k1_fe_verify(a)
  ------------------
  351|       |
  352|  5.17k|    r->x = *x;
  353|  5.17k|    secp256k1_fe_sqr(&x2, x);
  ------------------
  |  |   94|  5.17k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  354|  5.17k|    secp256k1_fe_mul(&x3, x, &x2);
  ------------------
  |  |   93|  5.17k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  355|  5.17k|    r->infinity = 0;
  356|  5.17k|    secp256k1_fe_add_int(&x3, SECP256K1_B);
  ------------------
  |  |  102|  5.17k|#  define secp256k1_fe_add_int secp256k1_fe_impl_add_int
  ------------------
                  secp256k1_fe_add_int(&x3, SECP256K1_B);
  ------------------
  |  |   73|  5.17k|#define SECP256K1_B 7
  ------------------
  357|  5.17k|    ret = secp256k1_fe_sqrt(&r->y, &x3);
  358|  5.17k|    secp256k1_fe_normalize_var(&r->y);
  ------------------
  |  |   80|  5.17k|#  define secp256k1_fe_normalize_var secp256k1_fe_impl_normalize_var
  ------------------
  359|  5.17k|    if (secp256k1_fe_is_odd(&r->y) != odd) {
  ------------------
  |  |   85|  5.17k|#  define secp256k1_fe_is_odd secp256k1_fe_impl_is_odd
  ------------------
  |  Branch (359:9): [True: 2.68k, False: 2.49k]
  ------------------
  360|  2.68k|        secp256k1_fe_negate(&r->y, &r->y, 1);
  ------------------
  |  |  211|  2.68k|#define secp256k1_fe_negate(r, a, m) ASSERT_INT_CONST_AND_DO(m, secp256k1_fe_negate_unchecked(r, a, m))
  |  |  ------------------
  |  |  |  |   77|  2.68k|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |   78|  2.68k|    switch(42) { \
  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:9): [True: 0, False: 2.68k]
  |  |  |  |  ------------------
  |  |  |  |   81|      0|            break; \
  |  |  |  |   82|  2.68k|        default: ; \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:9): [True: 2.68k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   83|  2.68k|    } \
  |  |  |  |   84|  2.68k|    stmt; \
  |  |  |  |   85|  2.68k|} while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (85:9): [Folded, False: 2.68k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  361|  2.68k|    }
  362|       |
  363|  5.17k|    SECP256K1_GE_VERIFY(r);
  ------------------
  |  |  210|  5.17k|#define SECP256K1_GE_VERIFY(a) secp256k1_ge_verify(a)
  ------------------
  364|  5.17k|    return ret;
  365|  5.17k|}
secp256k1.c:secp256k1_gej_set_ge:
  367|   105k|static void secp256k1_gej_set_ge(secp256k1_gej *r, const secp256k1_ge *a) {
  368|   105k|   SECP256K1_GE_VERIFY(a);
  ------------------
  |  |  210|   105k|#define SECP256K1_GE_VERIFY(a) secp256k1_ge_verify(a)
  ------------------
  369|       |
  370|   105k|   r->infinity = a->infinity;
  371|   105k|   r->x = a->x;
  372|   105k|   r->y = a->y;
  373|   105k|   secp256k1_fe_set_int(&r->z, 1);
  ------------------
  |  |   83|   105k|#  define secp256k1_fe_set_int secp256k1_fe_impl_set_int
  ------------------
  374|       |
  375|   105k|   SECP256K1_GEJ_VERIFY(r);
  ------------------
  |  |  214|   105k|#define SECP256K1_GEJ_VERIFY(a) secp256k1_gej_verify(a)
  ------------------
  376|   105k|}
secp256k1.c:secp256k1_ge_set_gej_zinv:
   99|  15.5k|static void secp256k1_ge_set_gej_zinv(secp256k1_ge *r, const secp256k1_gej *a, const secp256k1_fe *zi) {
  100|  15.5k|    secp256k1_fe zi2;
  101|  15.5k|    secp256k1_fe zi3;
  102|  15.5k|    SECP256K1_GEJ_VERIFY(a);
  ------------------
  |  |  214|  15.5k|#define SECP256K1_GEJ_VERIFY(a) secp256k1_gej_verify(a)
  ------------------
  103|  15.5k|    SECP256K1_FE_VERIFY(zi);
  ------------------
  |  |  344|  15.5k|#define SECP256K1_FE_VERIFY(a) secp256k1_fe_verify(a)
  ------------------
  104|  15.5k|    VERIFY_CHECK(!a->infinity);
  105|       |
  106|  15.5k|    secp256k1_fe_sqr(&zi2, zi);
  ------------------
  |  |   94|  15.5k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  107|  15.5k|    secp256k1_fe_mul(&zi3, &zi2, zi);
  ------------------
  |  |   93|  15.5k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  108|  15.5k|    secp256k1_fe_mul(&r->x, &a->x, &zi2);
  ------------------
  |  |   93|  15.5k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  109|  15.5k|    secp256k1_fe_mul(&r->y, &a->y, &zi3);
  ------------------
  |  |   93|  15.5k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  110|  15.5k|    r->infinity = a->infinity;
  111|       |
  112|  15.5k|    SECP256K1_GE_VERIFY(r);
  ------------------
  |  |  210|  15.5k|#define SECP256K1_GE_VERIFY(a) secp256k1_ge_verify(a)
  ------------------
  113|  15.5k|}
secp256k1.c:secp256k1_ge_table_set_globalz:
  289|  15.5k|static void secp256k1_ge_table_set_globalz(size_t len, secp256k1_ge *a, const secp256k1_fe *zr) {
  290|  15.5k|    size_t i;
  291|  15.5k|    secp256k1_fe zs;
  292|       |#ifdef VERIFY
  293|       |    for (i = 0; i < len; i++) {
  294|       |        SECP256K1_GE_VERIFY(&a[i]);
  295|       |        SECP256K1_FE_VERIFY(&zr[i]);
  296|       |    }
  297|       |#endif
  298|       |
  299|  15.5k|    if (len > 0) {
  ------------------
  |  Branch (299:9): [True: 15.5k, False: 0]
  ------------------
  300|  15.5k|        i = len - 1;
  301|       |        /* Ensure all y values are in weak normal form for fast negation of points */
  302|  15.5k|        secp256k1_fe_normalize_weak(&a[i].y);
  ------------------
  |  |   79|  15.5k|#  define secp256k1_fe_normalize_weak secp256k1_fe_impl_normalize_weak
  ------------------
  303|  15.5k|        zs = zr[i];
  304|       |
  305|       |        /* Work our way backwards, using the z-ratios to scale the x/y values. */
  306|   203k|        while (i > 0) {
  ------------------
  |  Branch (306:16): [True: 188k, False: 15.5k]
  ------------------
  307|   188k|            if (i != len - 1) {
  ------------------
  |  Branch (307:17): [True: 172k, False: 15.5k]
  ------------------
  308|   172k|                secp256k1_fe_mul(&zs, &zs, &zr[i]);
  ------------------
  |  |   93|   172k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  309|   172k|            }
  310|   188k|            i--;
  311|   188k|            secp256k1_ge_set_ge_zinv(&a[i], &a[i], &zs);
  312|   188k|        }
  313|  15.5k|    }
  314|       |
  315|       |#ifdef VERIFY
  316|       |    for (i = 0; i < len; i++) {
  317|       |        SECP256K1_GE_VERIFY(&a[i]);
  318|       |    }
  319|       |#endif
  320|  15.5k|}
secp256k1.c:secp256k1_ge_set_ge_zinv:
  116|   188k|static void secp256k1_ge_set_ge_zinv(secp256k1_ge *r, const secp256k1_ge *a, const secp256k1_fe *zi) {
  117|   188k|    secp256k1_fe zi2;
  118|   188k|    secp256k1_fe zi3;
  119|   188k|    SECP256K1_GE_VERIFY(a);
  ------------------
  |  |  210|   188k|#define SECP256K1_GE_VERIFY(a) secp256k1_ge_verify(a)
  ------------------
  120|   188k|    SECP256K1_FE_VERIFY(zi);
  ------------------
  |  |  344|   188k|#define SECP256K1_FE_VERIFY(a) secp256k1_fe_verify(a)
  ------------------
  121|   188k|    VERIFY_CHECK(!a->infinity);
  122|       |
  123|   188k|    secp256k1_fe_sqr(&zi2, zi);
  ------------------
  |  |   94|   188k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  124|   188k|    secp256k1_fe_mul(&zi3, &zi2, zi);
  ------------------
  |  |   93|   188k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  125|   188k|    secp256k1_fe_mul(&r->x, &a->x, &zi2);
  ------------------
  |  |   93|   188k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  126|   188k|    secp256k1_fe_mul(&r->y, &a->y, &zi3);
  ------------------
  |  |   93|   188k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  127|   188k|    r->infinity = a->infinity;
  128|       |
  129|   188k|    SECP256K1_GE_VERIFY(r);
  ------------------
  |  |  210|   188k|#define SECP256K1_GE_VERIFY(a) secp256k1_ge_verify(a)
  ------------------
  130|   188k|}
secp256k1.c:secp256k1_gej_double_var:
  495|   741k|static void secp256k1_gej_double_var(secp256k1_gej *r, const secp256k1_gej *a, secp256k1_fe *rzr) {
  496|   741k|    SECP256K1_GEJ_VERIFY(a);
  ------------------
  |  |  214|   741k|#define SECP256K1_GEJ_VERIFY(a) secp256k1_gej_verify(a)
  ------------------
  497|       |
  498|       |    /** For secp256k1, 2Q is infinity if and only if Q is infinity. This is because if 2Q = infinity,
  499|       |     *  Q must equal -Q, or that Q.y == -(Q.y), or Q.y is 0. For a point on y^2 = x^3 + 7 to have
  500|       |     *  y=0, x^3 must be -7 mod p. However, -7 has no cube root mod p.
  501|       |     *
  502|       |     *  Having said this, if this function receives a point on a sextic twist, e.g. by
  503|       |     *  a fault attack, it is possible for y to be 0. This happens for y^2 = x^3 + 6,
  504|       |     *  since -6 does have a cube root mod p. For this point, this function will not set
  505|       |     *  the infinity flag even though the point doubles to infinity, and the result
  506|       |     *  point will be gibberish (z = 0 but infinity = 0).
  507|       |     */
  508|   741k|    if (a->infinity) {
  ------------------
  |  Branch (508:9): [True: 5.70k, False: 736k]
  ------------------
  509|  5.70k|        secp256k1_gej_set_infinity(r);
  510|  5.70k|        if (rzr != NULL) {
  ------------------
  |  Branch (510:13): [True: 0, False: 5.70k]
  ------------------
  511|      0|            secp256k1_fe_set_int(rzr, 1);
  ------------------
  |  |   83|      0|#  define secp256k1_fe_set_int secp256k1_fe_impl_set_int
  ------------------
  512|      0|        }
  513|  5.70k|        return;
  514|  5.70k|    }
  515|       |
  516|   736k|    if (rzr != NULL) {
  ------------------
  |  Branch (516:9): [True: 0, False: 736k]
  ------------------
  517|      0|        *rzr = a->y;
  518|      0|        secp256k1_fe_normalize_weak(rzr);
  ------------------
  |  |   79|      0|#  define secp256k1_fe_normalize_weak secp256k1_fe_impl_normalize_weak
  ------------------
  519|      0|    }
  520|       |
  521|   736k|    secp256k1_gej_double(r, a);
  522|       |
  523|   736k|    SECP256K1_GEJ_VERIFY(r);
  ------------------
  |  |  214|   736k|#define SECP256K1_GEJ_VERIFY(a) secp256k1_gej_verify(a)
  ------------------
  524|   736k|}
secp256k1.c:secp256k1_gej_add_ge_var:
  590|   434k|static void secp256k1_gej_add_ge_var(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_ge *b, secp256k1_fe *rzr) {
  591|       |    /* Operations: 8 mul, 3 sqr, 11 add/negate/normalizes_to_zero (ignoring special cases) */
  592|   434k|    secp256k1_fe z12, u1, u2, s1, s2, h, i, h2, h3, t;
  593|   434k|    SECP256K1_GEJ_VERIFY(a);
  ------------------
  |  |  214|   434k|#define SECP256K1_GEJ_VERIFY(a) secp256k1_gej_verify(a)
  ------------------
  594|   434k|    SECP256K1_GE_VERIFY(b);
  ------------------
  |  |  210|   434k|#define SECP256K1_GE_VERIFY(a) secp256k1_ge_verify(a)
  ------------------
  595|       |
  596|   434k|    if (a->infinity) {
  ------------------
  |  Branch (596:9): [True: 3.46k, False: 431k]
  ------------------
  597|  3.46k|        VERIFY_CHECK(rzr == NULL);
  598|  3.46k|        secp256k1_gej_set_ge(r, b);
  599|  3.46k|        return;
  600|  3.46k|    }
  601|   431k|    if (b->infinity) {
  ------------------
  |  Branch (601:9): [True: 0, False: 431k]
  ------------------
  602|      0|        if (rzr != NULL) {
  ------------------
  |  Branch (602:13): [True: 0, False: 0]
  ------------------
  603|      0|            secp256k1_fe_set_int(rzr, 1);
  ------------------
  |  |   83|      0|#  define secp256k1_fe_set_int secp256k1_fe_impl_set_int
  ------------------
  604|      0|        }
  605|      0|        *r = *a;
  606|      0|        return;
  607|      0|    }
  608|       |
  609|   431k|    secp256k1_fe_sqr(&z12, &a->z);
  ------------------
  |  |   94|   431k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  610|   431k|    u1 = a->x;
  611|   431k|    secp256k1_fe_mul(&u2, &b->x, &z12);
  ------------------
  |  |   93|   431k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  612|   431k|    s1 = a->y;
  613|   431k|    secp256k1_fe_mul(&s2, &b->y, &z12); secp256k1_fe_mul(&s2, &s2, &a->z);
  ------------------
  |  |   93|   431k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
                  secp256k1_fe_mul(&s2, &b->y, &z12); secp256k1_fe_mul(&s2, &s2, &a->z);
  ------------------
  |  |   93|   431k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  614|   431k|    secp256k1_fe_negate(&h, &u1, SECP256K1_GEJ_X_MAGNITUDE_MAX); secp256k1_fe_add(&h, &u2);
  ------------------
  |  |  211|   431k|#define secp256k1_fe_negate(r, a, m) ASSERT_INT_CONST_AND_DO(m, secp256k1_fe_negate_unchecked(r, a, m))
  |  |  ------------------
  |  |  |  |   77|   431k|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |   78|   431k|    switch(42) { \
  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:9): [True: 0, False: 431k]
  |  |  |  |  ------------------
  |  |  |  |   81|      0|            break; \
  |  |  |  |   82|   431k|        default: ; \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:9): [True: 431k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   83|   431k|    } \
  |  |  |  |   84|   431k|    stmt; \
  |  |  |  |   85|   431k|} while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (85:9): [Folded, False: 431k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  secp256k1_fe_negate(&h, &u1, SECP256K1_GEJ_X_MAGNITUDE_MAX); secp256k1_fe_add(&h, &u2);
  ------------------
  |  |   92|   431k|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  615|   431k|    secp256k1_fe_negate(&i, &s2, 1); secp256k1_fe_add(&i, &s1);
  ------------------
  |  |  211|   431k|#define secp256k1_fe_negate(r, a, m) ASSERT_INT_CONST_AND_DO(m, secp256k1_fe_negate_unchecked(r, a, m))
  |  |  ------------------
  |  |  |  |   77|   431k|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |   78|   431k|    switch(42) { \
  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:9): [True: 0, False: 431k]
  |  |  |  |  ------------------
  |  |  |  |   81|      0|            break; \
  |  |  |  |   82|   431k|        default: ; \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:9): [True: 431k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   83|   431k|    } \
  |  |  |  |   84|   431k|    stmt; \
  |  |  |  |   85|   431k|} while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (85:9): [Folded, False: 431k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  secp256k1_fe_negate(&i, &s2, 1); secp256k1_fe_add(&i, &s1);
  ------------------
  |  |   92|   431k|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  616|   431k|    if (secp256k1_fe_normalizes_to_zero_var(&h)) {
  ------------------
  |  |   82|   431k|#  define secp256k1_fe_normalizes_to_zero_var secp256k1_fe_impl_normalizes_to_zero_var
  ------------------
  |  Branch (616:9): [True: 0, False: 431k]
  ------------------
  617|      0|        if (secp256k1_fe_normalizes_to_zero_var(&i)) {
  ------------------
  |  |   82|      0|#  define secp256k1_fe_normalizes_to_zero_var secp256k1_fe_impl_normalizes_to_zero_var
  ------------------
  |  Branch (617:13): [True: 0, False: 0]
  ------------------
  618|      0|            secp256k1_gej_double_var(r, a, rzr);
  619|      0|        } else {
  620|      0|            if (rzr != NULL) {
  ------------------
  |  Branch (620:17): [True: 0, False: 0]
  ------------------
  621|      0|                secp256k1_fe_set_int(rzr, 0);
  ------------------
  |  |   83|      0|#  define secp256k1_fe_set_int secp256k1_fe_impl_set_int
  ------------------
  622|      0|            }
  623|      0|            secp256k1_gej_set_infinity(r);
  624|      0|        }
  625|      0|        return;
  626|      0|    }
  627|       |
  628|   431k|    r->infinity = 0;
  629|   431k|    if (rzr != NULL) {
  ------------------
  |  Branch (629:9): [True: 188k, False: 242k]
  ------------------
  630|   188k|        *rzr = h;
  631|   188k|    }
  632|   431k|    secp256k1_fe_mul(&r->z, &a->z, &h);
  ------------------
  |  |   93|   431k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  633|       |
  634|   431k|    secp256k1_fe_sqr(&h2, &h);
  ------------------
  |  |   94|   431k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  635|   431k|    secp256k1_fe_negate(&h2, &h2, 1);
  ------------------
  |  |  211|   431k|#define secp256k1_fe_negate(r, a, m) ASSERT_INT_CONST_AND_DO(m, secp256k1_fe_negate_unchecked(r, a, m))
  |  |  ------------------
  |  |  |  |   77|   431k|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |   78|   431k|    switch(42) { \
  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:9): [True: 0, False: 431k]
  |  |  |  |  ------------------
  |  |  |  |   81|      0|            break; \
  |  |  |  |   82|   431k|        default: ; \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:9): [True: 431k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   83|   431k|    } \
  |  |  |  |   84|   431k|    stmt; \
  |  |  |  |   85|   431k|} while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (85:9): [Folded, False: 431k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  636|   431k|    secp256k1_fe_mul(&h3, &h2, &h);
  ------------------
  |  |   93|   431k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  637|   431k|    secp256k1_fe_mul(&t, &u1, &h2);
  ------------------
  |  |   93|   431k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  638|       |
  639|   431k|    secp256k1_fe_sqr(&r->x, &i);
  ------------------
  |  |   94|   431k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  640|   431k|    secp256k1_fe_add(&r->x, &h3);
  ------------------
  |  |   92|   431k|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  641|   431k|    secp256k1_fe_add(&r->x, &t);
  ------------------
  |  |   92|   431k|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  642|   431k|    secp256k1_fe_add(&r->x, &t);
  ------------------
  |  |   92|   431k|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  643|       |
  644|   431k|    secp256k1_fe_add(&t, &r->x);
  ------------------
  |  |   92|   431k|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  645|   431k|    secp256k1_fe_mul(&r->y, &t, &i);
  ------------------
  |  |   93|   431k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  646|   431k|    secp256k1_fe_mul(&h3, &h3, &s1);
  ------------------
  |  |   93|   431k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  647|   431k|    secp256k1_fe_add(&r->y, &h3);
  ------------------
  |  |   92|   431k|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  648|       |
  649|   431k|    SECP256K1_GEJ_VERIFY(r);
  ------------------
  |  |  214|   431k|#define SECP256K1_GEJ_VERIFY(a) secp256k1_gej_verify(a)
  ------------------
  650|   431k|    if (rzr != NULL) SECP256K1_FE_VERIFY(rzr);
  ------------------
  |  |  344|   188k|#define SECP256K1_FE_VERIFY(a) secp256k1_fe_verify(a)
  ------------------
  |  Branch (650:9): [True: 188k, False: 242k]
  ------------------
  651|   431k|}
secp256k1.c:secp256k1_gej_add_zinv_var:
  653|  96.7k|static void secp256k1_gej_add_zinv_var(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_ge *b, const secp256k1_fe *bzinv) {
  654|       |    /* Operations: 9 mul, 3 sqr, 11 add/negate/normalizes_to_zero (ignoring special cases) */
  655|  96.7k|    secp256k1_fe az, z12, u1, u2, s1, s2, h, i, h2, h3, t;
  656|  96.7k|    SECP256K1_GEJ_VERIFY(a);
  ------------------
  |  |  214|  96.7k|#define SECP256K1_GEJ_VERIFY(a) secp256k1_gej_verify(a)
  ------------------
  657|  96.7k|    SECP256K1_GE_VERIFY(b);
  ------------------
  |  |  210|  96.7k|#define SECP256K1_GE_VERIFY(a) secp256k1_ge_verify(a)
  ------------------
  658|  96.7k|    SECP256K1_FE_VERIFY(bzinv);
  ------------------
  |  |  344|  96.7k|#define SECP256K1_FE_VERIFY(a) secp256k1_fe_verify(a)
  ------------------
  659|       |
  660|  96.7k|    if (a->infinity) {
  ------------------
  |  Branch (660:9): [True: 2.23k, False: 94.4k]
  ------------------
  661|  2.23k|        secp256k1_fe bzinv2, bzinv3;
  662|  2.23k|        r->infinity = b->infinity;
  663|  2.23k|        secp256k1_fe_sqr(&bzinv2, bzinv);
  ------------------
  |  |   94|  2.23k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  664|  2.23k|        secp256k1_fe_mul(&bzinv3, &bzinv2, bzinv);
  ------------------
  |  |   93|  2.23k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  665|  2.23k|        secp256k1_fe_mul(&r->x, &b->x, &bzinv2);
  ------------------
  |  |   93|  2.23k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  666|  2.23k|        secp256k1_fe_mul(&r->y, &b->y, &bzinv3);
  ------------------
  |  |   93|  2.23k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  667|  2.23k|        secp256k1_fe_set_int(&r->z, 1);
  ------------------
  |  |   83|  2.23k|#  define secp256k1_fe_set_int secp256k1_fe_impl_set_int
  ------------------
  668|  2.23k|        SECP256K1_GEJ_VERIFY(r);
  ------------------
  |  |  214|  2.23k|#define SECP256K1_GEJ_VERIFY(a) secp256k1_gej_verify(a)
  ------------------
  669|  2.23k|        return;
  670|  2.23k|    }
  671|  94.4k|    if (b->infinity) {
  ------------------
  |  Branch (671:9): [True: 0, False: 94.4k]
  ------------------
  672|      0|        *r = *a;
  673|      0|        return;
  674|      0|    }
  675|       |
  676|       |    /** We need to calculate (rx,ry,rz) = (ax,ay,az) + (bx,by,1/bzinv). Due to
  677|       |     *  secp256k1's isomorphism we can multiply the Z coordinates on both sides
  678|       |     *  by bzinv, and get: (rx,ry,rz*bzinv) = (ax,ay,az*bzinv) + (bx,by,1).
  679|       |     *  This means that (rx,ry,rz) can be calculated as
  680|       |     *  (ax,ay,az*bzinv) + (bx,by,1), when not applying the bzinv factor to rz.
  681|       |     *  The variable az below holds the modified Z coordinate for a, which is used
  682|       |     *  for the computation of rx and ry, but not for rz.
  683|       |     */
  684|  94.4k|    secp256k1_fe_mul(&az, &a->z, bzinv);
  ------------------
  |  |   93|  94.4k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  685|       |
  686|  94.4k|    secp256k1_fe_sqr(&z12, &az);
  ------------------
  |  |   94|  94.4k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  687|  94.4k|    u1 = a->x;
  688|  94.4k|    secp256k1_fe_mul(&u2, &b->x, &z12);
  ------------------
  |  |   93|  94.4k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  689|  94.4k|    s1 = a->y;
  690|  94.4k|    secp256k1_fe_mul(&s2, &b->y, &z12); secp256k1_fe_mul(&s2, &s2, &az);
  ------------------
  |  |   93|  94.4k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
                  secp256k1_fe_mul(&s2, &b->y, &z12); secp256k1_fe_mul(&s2, &s2, &az);
  ------------------
  |  |   93|  94.4k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  691|  94.4k|    secp256k1_fe_negate(&h, &u1, SECP256K1_GEJ_X_MAGNITUDE_MAX); secp256k1_fe_add(&h, &u2);
  ------------------
  |  |  211|  94.4k|#define secp256k1_fe_negate(r, a, m) ASSERT_INT_CONST_AND_DO(m, secp256k1_fe_negate_unchecked(r, a, m))
  |  |  ------------------
  |  |  |  |   77|  94.4k|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |   78|  94.4k|    switch(42) { \
  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:9): [True: 0, False: 94.4k]
  |  |  |  |  ------------------
  |  |  |  |   81|      0|            break; \
  |  |  |  |   82|  94.4k|        default: ; \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:9): [True: 94.4k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   83|  94.4k|    } \
  |  |  |  |   84|  94.4k|    stmt; \
  |  |  |  |   85|  94.4k|} while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (85:9): [Folded, False: 94.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  secp256k1_fe_negate(&h, &u1, SECP256K1_GEJ_X_MAGNITUDE_MAX); secp256k1_fe_add(&h, &u2);
  ------------------
  |  |   92|  94.4k|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  692|  94.4k|    secp256k1_fe_negate(&i, &s2, 1); secp256k1_fe_add(&i, &s1);
  ------------------
  |  |  211|  94.4k|#define secp256k1_fe_negate(r, a, m) ASSERT_INT_CONST_AND_DO(m, secp256k1_fe_negate_unchecked(r, a, m))
  |  |  ------------------
  |  |  |  |   77|  94.4k|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |   78|  94.4k|    switch(42) { \
  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:9): [True: 0, False: 94.4k]
  |  |  |  |  ------------------
  |  |  |  |   81|      0|            break; \
  |  |  |  |   82|  94.4k|        default: ; \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:9): [True: 94.4k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   83|  94.4k|    } \
  |  |  |  |   84|  94.4k|    stmt; \
  |  |  |  |   85|  94.4k|} while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (85:9): [Folded, False: 94.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  secp256k1_fe_negate(&i, &s2, 1); secp256k1_fe_add(&i, &s1);
  ------------------
  |  |   92|  94.4k|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  693|  94.4k|    if (secp256k1_fe_normalizes_to_zero_var(&h)) {
  ------------------
  |  |   82|  94.4k|#  define secp256k1_fe_normalizes_to_zero_var secp256k1_fe_impl_normalizes_to_zero_var
  ------------------
  |  Branch (693:9): [True: 0, False: 94.4k]
  ------------------
  694|      0|        if (secp256k1_fe_normalizes_to_zero_var(&i)) {
  ------------------
  |  |   82|      0|#  define secp256k1_fe_normalizes_to_zero_var secp256k1_fe_impl_normalizes_to_zero_var
  ------------------
  |  Branch (694:13): [True: 0, False: 0]
  ------------------
  695|      0|            secp256k1_gej_double_var(r, a, NULL);
  696|      0|        } else {
  697|      0|            secp256k1_gej_set_infinity(r);
  698|      0|        }
  699|      0|        return;
  700|      0|    }
  701|       |
  702|  94.4k|    r->infinity = 0;
  703|  94.4k|    secp256k1_fe_mul(&r->z, &a->z, &h);
  ------------------
  |  |   93|  94.4k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  704|       |
  705|  94.4k|    secp256k1_fe_sqr(&h2, &h);
  ------------------
  |  |   94|  94.4k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  706|  94.4k|    secp256k1_fe_negate(&h2, &h2, 1);
  ------------------
  |  |  211|  94.4k|#define secp256k1_fe_negate(r, a, m) ASSERT_INT_CONST_AND_DO(m, secp256k1_fe_negate_unchecked(r, a, m))
  |  |  ------------------
  |  |  |  |   77|  94.4k|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |   78|  94.4k|    switch(42) { \
  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:9): [True: 0, False: 94.4k]
  |  |  |  |  ------------------
  |  |  |  |   81|      0|            break; \
  |  |  |  |   82|  94.4k|        default: ; \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:9): [True: 94.4k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   83|  94.4k|    } \
  |  |  |  |   84|  94.4k|    stmt; \
  |  |  |  |   85|  94.4k|} while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (85:9): [Folded, False: 94.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  707|  94.4k|    secp256k1_fe_mul(&h3, &h2, &h);
  ------------------
  |  |   93|  94.4k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  708|  94.4k|    secp256k1_fe_mul(&t, &u1, &h2);
  ------------------
  |  |   93|  94.4k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  709|       |
  710|  94.4k|    secp256k1_fe_sqr(&r->x, &i);
  ------------------
  |  |   94|  94.4k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  711|  94.4k|    secp256k1_fe_add(&r->x, &h3);
  ------------------
  |  |   92|  94.4k|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  712|  94.4k|    secp256k1_fe_add(&r->x, &t);
  ------------------
  |  |   92|  94.4k|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  713|  94.4k|    secp256k1_fe_add(&r->x, &t);
  ------------------
  |  |   92|  94.4k|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  714|       |
  715|  94.4k|    secp256k1_fe_add(&t, &r->x);
  ------------------
  |  |   92|  94.4k|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  716|  94.4k|    secp256k1_fe_mul(&r->y, &t, &i);
  ------------------
  |  |   93|  94.4k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  717|  94.4k|    secp256k1_fe_mul(&h3, &h3, &s1);
  ------------------
  |  |   93|  94.4k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  718|  94.4k|    secp256k1_fe_add(&r->y, &h3);
  ------------------
  |  |   92|  94.4k|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  719|       |
  720|  94.4k|    SECP256K1_GEJ_VERIFY(r);
  ------------------
  |  |  214|  94.4k|#define SECP256K1_GEJ_VERIFY(a) secp256k1_gej_verify(a)
  ------------------
  721|  94.4k|}
secp256k1.c:secp256k1_ge_set_gej_var:
  177|  5.70k|static void secp256k1_ge_set_gej_var(secp256k1_ge *r, secp256k1_gej *a) {
  178|  5.70k|    secp256k1_fe z2, z3;
  179|  5.70k|    SECP256K1_GEJ_VERIFY(a);
  ------------------
  |  |  214|  5.70k|#define SECP256K1_GEJ_VERIFY(a) secp256k1_gej_verify(a)
  ------------------
  180|       |
  181|  5.70k|    if (secp256k1_gej_is_infinity(a)) {
  ------------------
  |  Branch (181:9): [True: 0, False: 5.70k]
  ------------------
  182|      0|        secp256k1_ge_set_infinity(r);
  183|      0|        return;
  184|      0|    }
  185|  5.70k|    r->infinity = 0;
  186|  5.70k|    secp256k1_fe_inv_var(&a->z, &a->z);
  ------------------
  |  |   99|  5.70k|#  define secp256k1_fe_inv_var secp256k1_fe_impl_inv_var
  ------------------
  187|  5.70k|    secp256k1_fe_sqr(&z2, &a->z);
  ------------------
  |  |   94|  5.70k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  188|  5.70k|    secp256k1_fe_mul(&z3, &a->z, &z2);
  ------------------
  |  |   93|  5.70k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  189|  5.70k|    secp256k1_fe_mul(&a->x, &a->x, &z2);
  ------------------
  |  |   93|  5.70k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  190|  5.70k|    secp256k1_fe_mul(&a->y, &a->y, &z3);
  ------------------
  |  |   93|  5.70k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  191|  5.70k|    secp256k1_fe_set_int(&a->z, 1);
  ------------------
  |  |   83|  5.70k|#  define secp256k1_fe_set_int secp256k1_fe_impl_set_int
  ------------------
  192|  5.70k|    secp256k1_ge_set_xy(r, &a->x, &a->y);
  193|       |
  194|  5.70k|    SECP256K1_GEJ_VERIFY(a);
  ------------------
  |  |  214|  5.70k|#define SECP256K1_GEJ_VERIFY(a) secp256k1_gej_verify(a)
  ------------------
  195|  5.70k|    SECP256K1_GE_VERIFY(r);
  ------------------
  |  |  210|  5.70k|#define SECP256K1_GE_VERIFY(a) secp256k1_ge_verify(a)
  ------------------
  196|  5.70k|}
secp256k1.c:secp256k1_ge_is_infinity:
  143|  63.1k|static int secp256k1_ge_is_infinity(const secp256k1_ge *a) {
  144|  63.1k|    SECP256K1_GE_VERIFY(a);
  ------------------
  |  |  210|  63.1k|#define SECP256K1_GE_VERIFY(a) secp256k1_ge_verify(a)
  ------------------
  145|       |
  146|  63.1k|    return a->infinity;
  147|  63.1k|}
secp256k1.c:secp256k1_ge_mul_lambda:
  915|   158k|static void secp256k1_ge_mul_lambda(secp256k1_ge *r, const secp256k1_ge *a) {
  916|   158k|    SECP256K1_GE_VERIFY(a);
  ------------------
  |  |  210|   158k|#define SECP256K1_GE_VERIFY(a) secp256k1_ge_verify(a)
  ------------------
  917|       |
  918|   158k|    *r = *a;
  919|   158k|    secp256k1_fe_mul(&r->x, &r->x, &secp256k1_const_beta);
  ------------------
  |  |   93|   158k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  920|       |
  921|   158k|    SECP256K1_GE_VERIFY(r);
  ------------------
  |  |  210|   158k|#define SECP256K1_GE_VERIFY(a) secp256k1_ge_verify(a)
  ------------------
  922|   158k|}
secp256k1.c:secp256k1_ge_x_on_curve_var:
  948|  18.8k|static int secp256k1_ge_x_on_curve_var(const secp256k1_fe *x) {
  949|  18.8k|    secp256k1_fe c;
  950|  18.8k|    secp256k1_fe_sqr(&c, x);
  ------------------
  |  |   94|  18.8k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  951|  18.8k|    secp256k1_fe_mul(&c, &c, x);
  ------------------
  |  |   93|  18.8k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  952|  18.8k|    secp256k1_fe_add_int(&c, SECP256K1_B);
  ------------------
  |  |  102|  18.8k|#  define secp256k1_fe_add_int secp256k1_fe_impl_add_int
  ------------------
                  secp256k1_fe_add_int(&c, SECP256K1_B);
  ------------------
  |  |   73|  18.8k|#define SECP256K1_B 7
  ------------------
  953|  18.8k|    return secp256k1_fe_is_square_var(&c);
  ------------------
  |  |  103|  18.8k|#  define secp256k1_fe_is_square_var secp256k1_fe_impl_is_square_var
  ------------------
  954|  18.8k|}
secp256k1.c:secp256k1_ge_x_frac_on_curve_var:
  956|  17.7k|static int secp256k1_ge_x_frac_on_curve_var(const secp256k1_fe *xn, const secp256k1_fe *xd) {
  957|       |    /* We want to determine whether (xn/xd) is on the curve.
  958|       |     *
  959|       |     * (xn/xd)^3 + 7 is square <=> xd*xn^3 + 7*xd^4 is square (multiplying by xd^4, a square).
  960|       |     */
  961|  17.7k|     secp256k1_fe r, t;
  962|  17.7k|     VERIFY_CHECK(!secp256k1_fe_normalizes_to_zero_var(xd));
  963|       |
  964|  17.7k|     secp256k1_fe_mul(&r, xd, xn); /* r = xd*xn */
  ------------------
  |  |   93|  17.7k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  965|  17.7k|     secp256k1_fe_sqr(&t, xn); /* t = xn^2 */
  ------------------
  |  |   94|  17.7k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  966|  17.7k|     secp256k1_fe_mul(&r, &r, &t); /* r = xd*xn^3 */
  ------------------
  |  |   93|  17.7k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  967|  17.7k|     secp256k1_fe_sqr(&t, xd); /* t = xd^2 */
  ------------------
  |  |   94|  17.7k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  968|  17.7k|     secp256k1_fe_sqr(&t, &t); /* t = xd^4 */
  ------------------
  |  |   94|  17.7k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  969|  17.7k|     VERIFY_CHECK(SECP256K1_B <= 31);
  970|  17.7k|     secp256k1_fe_mul_int(&t, SECP256K1_B); /* t = 7*xd^4 */
  ------------------
  |  |  233|  17.7k|#define secp256k1_fe_mul_int(r, a) ASSERT_INT_CONST_AND_DO(a, secp256k1_fe_mul_int_unchecked(r, a))
  |  |  ------------------
  |  |  |  |   77|  17.7k|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |   78|  17.7k|    switch(42) { \
  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:9): [True: 0, False: 17.7k]
  |  |  |  |  ------------------
  |  |  |  |   81|      0|            break; \
  |  |  |  |   82|  17.7k|        default: ; \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:9): [True: 17.7k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   83|  17.7k|    } \
  |  |  |  |   84|  17.7k|    stmt; \
  |  |  |  |   85|  17.7k|} while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (85:9): [Folded, False: 17.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  971|  17.7k|     secp256k1_fe_add(&r, &t); /* r = xd*xn^3 + 7*xd^4 */
  ------------------
  |  |   92|  17.7k|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  972|  17.7k|     return secp256k1_fe_is_square_var(&r);
  ------------------
  |  |  103|  17.7k|#  define secp256k1_fe_is_square_var secp256k1_fe_impl_is_square_var
  ------------------
  973|  17.7k|}

secp256k1.c:secp256k1_sha256_initialize:
   31|  33.7k|static void secp256k1_sha256_initialize(secp256k1_sha256 *hash) {
   32|  33.7k|    hash->s[0] = 0x6a09e667ul;
   33|  33.7k|    hash->s[1] = 0xbb67ae85ul;
   34|  33.7k|    hash->s[2] = 0x3c6ef372ul;
   35|  33.7k|    hash->s[3] = 0xa54ff53aul;
   36|  33.7k|    hash->s[4] = 0x510e527ful;
   37|  33.7k|    hash->s[5] = 0x9b05688cul;
   38|  33.7k|    hash->s[6] = 0x1f83d9abul;
   39|  33.7k|    hash->s[7] = 0x5be0cd19ul;
   40|  33.7k|    hash->bytes = 0;
   41|  33.7k|}
secp256k1.c:secp256k1_sha256_write:
  126|   286k|static void secp256k1_sha256_write(secp256k1_sha256 *hash, const unsigned char *data, size_t len) {
  127|   286k|    size_t bufsize = hash->bytes & 0x3F;
  128|   286k|    hash->bytes += len;
  129|   286k|    VERIFY_CHECK(hash->bytes >= len);
  130|   398k|    while (len >= 64 - bufsize) {
  ------------------
  |  Branch (130:12): [True: 112k, False: 286k]
  ------------------
  131|       |        /* Fill the buffer, and process it. */
  132|   112k|        size_t chunk_len = 64 - bufsize;
  133|   112k|        memcpy(hash->buf + bufsize, data, chunk_len);
  134|   112k|        data += chunk_len;
  135|   112k|        len -= chunk_len;
  136|   112k|        secp256k1_sha256_transform(hash->s, hash->buf);
  137|   112k|        bufsize = 0;
  138|   112k|    }
  139|   286k|    if (len) {
  ------------------
  |  Branch (139:9): [True: 173k, False: 112k]
  ------------------
  140|       |        /* Fill the buffer with what remains. */
  141|   173k|        memcpy(hash->buf + bufsize, data, len);
  142|   173k|    }
  143|   286k|}
secp256k1.c:secp256k1_sha256_transform:
   44|   112k|static void secp256k1_sha256_transform(uint32_t* s, const unsigned char* buf) {
   45|   112k|    uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];
   46|   112k|    uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;
   47|       |
   48|   112k|    Round(a, b, c, d, e, f, g, h, 0x428a2f98,  w0 = secp256k1_read_be32(&buf[0]));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   49|   112k|    Round(h, a, b, c, d, e, f, g, 0x71374491,  w1 = secp256k1_read_be32(&buf[4]));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   50|   112k|    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf,  w2 = secp256k1_read_be32(&buf[8]));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   51|   112k|    Round(f, g, h, a, b, c, d, e, 0xe9b5dba5,  w3 = secp256k1_read_be32(&buf[12]));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   52|   112k|    Round(e, f, g, h, a, b, c, d, 0x3956c25b,  w4 = secp256k1_read_be32(&buf[16]));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   53|   112k|    Round(d, e, f, g, h, a, b, c, 0x59f111f1,  w5 = secp256k1_read_be32(&buf[20]));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   54|   112k|    Round(c, d, e, f, g, h, a, b, 0x923f82a4,  w6 = secp256k1_read_be32(&buf[24]));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   55|   112k|    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5,  w7 = secp256k1_read_be32(&buf[28]));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   56|   112k|    Round(a, b, c, d, e, f, g, h, 0xd807aa98,  w8 = secp256k1_read_be32(&buf[32]));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   57|   112k|    Round(h, a, b, c, d, e, f, g, 0x12835b01,  w9 = secp256k1_read_be32(&buf[36]));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   58|   112k|    Round(g, h, a, b, c, d, e, f, 0x243185be, w10 = secp256k1_read_be32(&buf[40]));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   59|   112k|    Round(f, g, h, a, b, c, d, e, 0x550c7dc3, w11 = secp256k1_read_be32(&buf[44]));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   60|   112k|    Round(e, f, g, h, a, b, c, d, 0x72be5d74, w12 = secp256k1_read_be32(&buf[48]));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   61|   112k|    Round(d, e, f, g, h, a, b, c, 0x80deb1fe, w13 = secp256k1_read_be32(&buf[52]));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   62|   112k|    Round(c, d, e, f, g, h, a, b, 0x9bdc06a7, w14 = secp256k1_read_be32(&buf[56]));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   63|   112k|    Round(b, c, d, e, f, g, h, a, 0xc19bf174, w15 = secp256k1_read_be32(&buf[60]));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   64|       |
   65|   112k|    Round(a, b, c, d, e, f, g, h, 0xe49b69c1, w0 += sigma1(w14) + w9 + sigma0(w1));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   66|   112k|    Round(h, a, b, c, d, e, f, g, 0xefbe4786, w1 += sigma1(w15) + w10 + sigma0(w2));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   67|   112k|    Round(g, h, a, b, c, d, e, f, 0x0fc19dc6, w2 += sigma1(w0) + w11 + sigma0(w3));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   68|   112k|    Round(f, g, h, a, b, c, d, e, 0x240ca1cc, w3 += sigma1(w1) + w12 + sigma0(w4));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   69|   112k|    Round(e, f, g, h, a, b, c, d, 0x2de92c6f, w4 += sigma1(w2) + w13 + sigma0(w5));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   70|   112k|    Round(d, e, f, g, h, a, b, c, 0x4a7484aa, w5 += sigma1(w3) + w14 + sigma0(w6));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   71|   112k|    Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc, w6 += sigma1(w4) + w15 + sigma0(w7));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   72|   112k|    Round(b, c, d, e, f, g, h, a, 0x76f988da, w7 += sigma1(w5) + w0 + sigma0(w8));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   73|   112k|    Round(a, b, c, d, e, f, g, h, 0x983e5152, w8 += sigma1(w6) + w1 + sigma0(w9));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   74|   112k|    Round(h, a, b, c, d, e, f, g, 0xa831c66d, w9 += sigma1(w7) + w2 + sigma0(w10));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   75|   112k|    Round(g, h, a, b, c, d, e, f, 0xb00327c8, w10 += sigma1(w8) + w3 + sigma0(w11));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   76|   112k|    Round(f, g, h, a, b, c, d, e, 0xbf597fc7, w11 += sigma1(w9) + w4 + sigma0(w12));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   77|   112k|    Round(e, f, g, h, a, b, c, d, 0xc6e00bf3, w12 += sigma1(w10) + w5 + sigma0(w13));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   78|   112k|    Round(d, e, f, g, h, a, b, c, 0xd5a79147, w13 += sigma1(w11) + w6 + sigma0(w14));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   79|   112k|    Round(c, d, e, f, g, h, a, b, 0x06ca6351, w14 += sigma1(w12) + w7 + sigma0(w15));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   80|   112k|    Round(b, c, d, e, f, g, h, a, 0x14292967, w15 += sigma1(w13) + w8 + sigma0(w0));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   81|       |
   82|   112k|    Round(a, b, c, d, e, f, g, h, 0x27b70a85, w0 += sigma1(w14) + w9 + sigma0(w1));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   83|   112k|    Round(h, a, b, c, d, e, f, g, 0x2e1b2138, w1 += sigma1(w15) + w10 + sigma0(w2));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   84|   112k|    Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc, w2 += sigma1(w0) + w11 + sigma0(w3));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   85|   112k|    Round(f, g, h, a, b, c, d, e, 0x53380d13, w3 += sigma1(w1) + w12 + sigma0(w4));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   86|   112k|    Round(e, f, g, h, a, b, c, d, 0x650a7354, w4 += sigma1(w2) + w13 + sigma0(w5));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   87|   112k|    Round(d, e, f, g, h, a, b, c, 0x766a0abb, w5 += sigma1(w3) + w14 + sigma0(w6));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   88|   112k|    Round(c, d, e, f, g, h, a, b, 0x81c2c92e, w6 += sigma1(w4) + w15 + sigma0(w7));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   89|   112k|    Round(b, c, d, e, f, g, h, a, 0x92722c85, w7 += sigma1(w5) + w0 + sigma0(w8));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   90|   112k|    Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1, w8 += sigma1(w6) + w1 + sigma0(w9));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   91|   112k|    Round(h, a, b, c, d, e, f, g, 0xa81a664b, w9 += sigma1(w7) + w2 + sigma0(w10));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   92|   112k|    Round(g, h, a, b, c, d, e, f, 0xc24b8b70, w10 += sigma1(w8) + w3 + sigma0(w11));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   93|   112k|    Round(f, g, h, a, b, c, d, e, 0xc76c51a3, w11 += sigma1(w9) + w4 + sigma0(w12));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   94|   112k|    Round(e, f, g, h, a, b, c, d, 0xd192e819, w12 += sigma1(w10) + w5 + sigma0(w13));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   95|   112k|    Round(d, e, f, g, h, a, b, c, 0xd6990624, w13 += sigma1(w11) + w6 + sigma0(w14));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   96|   112k|    Round(c, d, e, f, g, h, a, b, 0xf40e3585, w14 += sigma1(w12) + w7 + sigma0(w15));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   97|   112k|    Round(b, c, d, e, f, g, h, a, 0x106aa070, w15 += sigma1(w13) + w8 + sigma0(w0));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
   98|       |
   99|   112k|    Round(a, b, c, d, e, f, g, h, 0x19a4c116, w0 += sigma1(w14) + w9 + sigma0(w1));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
  100|   112k|    Round(h, a, b, c, d, e, f, g, 0x1e376c08, w1 += sigma1(w15) + w10 + sigma0(w2));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
  101|   112k|    Round(g, h, a, b, c, d, e, f, 0x2748774c, w2 += sigma1(w0) + w11 + sigma0(w3));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
  102|   112k|    Round(f, g, h, a, b, c, d, e, 0x34b0bcb5, w3 += sigma1(w1) + w12 + sigma0(w4));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
  103|   112k|    Round(e, f, g, h, a, b, c, d, 0x391c0cb3, w4 += sigma1(w2) + w13 + sigma0(w5));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
  104|   112k|    Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a, w5 += sigma1(w3) + w14 + sigma0(w6));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
  105|   112k|    Round(c, d, e, f, g, h, a, b, 0x5b9cca4f, w6 += sigma1(w4) + w15 + sigma0(w7));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
  106|   112k|    Round(b, c, d, e, f, g, h, a, 0x682e6ff3, w7 += sigma1(w5) + w0 + sigma0(w8));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
  107|   112k|    Round(a, b, c, d, e, f, g, h, 0x748f82ee, w8 += sigma1(w6) + w1 + sigma0(w9));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
  108|   112k|    Round(h, a, b, c, d, e, f, g, 0x78a5636f, w9 += sigma1(w7) + w2 + sigma0(w10));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
  109|   112k|    Round(g, h, a, b, c, d, e, f, 0x84c87814, w10 += sigma1(w8) + w3 + sigma0(w11));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
  110|   112k|    Round(f, g, h, a, b, c, d, e, 0x8cc70208, w11 += sigma1(w9) + w4 + sigma0(w12));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
  111|   112k|    Round(e, f, g, h, a, b, c, d, 0x90befffa, w12 += sigma1(w10) + w5 + sigma0(w13));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
  112|   112k|    Round(d, e, f, g, h, a, b, c, 0xa4506ceb, w13 += sigma1(w11) + w6 + sigma0(w14));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
  113|   112k|    Round(c, d, e, f, g, h, a, b, 0xbef9a3f7, w14 + sigma1(w12) + w7 + sigma0(w15));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
  114|   112k|    Round(b, c, d, e, f, g, h, a, 0xc67178f2, w15 + sigma1(w13) + w8 + sigma0(w0));
  ------------------
  |  |   24|   112k|#define Round(a,b,c,d,e,f,g,h,k,w) do { \
  |  |   25|   112k|    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   20|   112k|#define Sigma1(x) (((x) >> 6 | (x) << 26) ^ ((x) >> 11 | (x) << 21) ^ ((x) >> 25 | (x) << 7))
  |  |  ------------------
  |  |                   uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
  |  |  ------------------
  |  |  |  |   17|   112k|#define Ch(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
  |  |  ------------------
  |  |   26|   112k|    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   19|   112k|#define Sigma0(x) (((x) >> 2 | (x) << 30) ^ ((x) >> 13 | (x) << 19) ^ ((x) >> 22 | (x) << 10))
  |  |  ------------------
  |  |                   uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
  |  |  ------------------
  |  |  |  |   18|   112k|#define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
  |  |  ------------------
  |  |   27|   112k|    (d) += t1; \
  |  |   28|   112k|    (h) = t1 + t2; \
  |  |   29|   112k|} while(0)
  |  |  ------------------
  |  |  |  Branch (29:9): [Folded, False: 112k]
  |  |  ------------------
  ------------------
  115|       |
  116|   112k|    s[0] += a;
  117|   112k|    s[1] += b;
  118|   112k|    s[2] += c;
  119|   112k|    s[3] += d;
  120|   112k|    s[4] += e;
  121|   112k|    s[5] += f;
  122|   112k|    s[6] += g;
  123|   112k|    s[7] += h;
  124|   112k|}
secp256k1.c:secp256k1_sha256_finalize:
  145|  71.1k|static void secp256k1_sha256_finalize(secp256k1_sha256 *hash, unsigned char *out32) {
  146|  71.1k|    static const unsigned char pad[64] = {0x80};
  147|  71.1k|    unsigned char sizedesc[8];
  148|  71.1k|    int i;
  149|       |    /* The maximum message size of SHA256 is 2^64-1 bits. */
  150|  71.1k|    VERIFY_CHECK(hash->bytes < ((uint64_t)1 << 61));
  151|  71.1k|    secp256k1_write_be32(&sizedesc[0], hash->bytes >> 29);
  152|  71.1k|    secp256k1_write_be32(&sizedesc[4], hash->bytes << 3);
  153|  71.1k|    secp256k1_sha256_write(hash, pad, 1 + ((119 - (hash->bytes % 64)) % 64));
  154|  71.1k|    secp256k1_sha256_write(hash, sizedesc, 8);
  155|   639k|    for (i = 0; i < 8; i++) {
  ------------------
  |  Branch (155:17): [True: 568k, False: 71.1k]
  ------------------
  156|   568k|        secp256k1_write_be32(&out32[4*i], hash->s[i]);
  157|   568k|        hash->s[i] = 0;
  158|   568k|    }
  159|  71.1k|}
secp256k1.c:secp256k1_sha256_clear:
  174|  12.4k|static void secp256k1_sha256_clear(secp256k1_sha256 *hash) {
  175|  12.4k|    secp256k1_memclear(hash, sizeof(*hash));
  176|  12.4k|}

secp256k1.c:secp256k1_u128_mul:
   11|   195M|static SECP256K1_INLINE void secp256k1_u128_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {
   12|   195M|   *r = (uint128_t)a * b;
   13|   195M|}
secp256k1.c:secp256k1_u128_accum_mul:
   15|  1.51G|static SECP256K1_INLINE void secp256k1_u128_accum_mul(secp256k1_uint128 *r, uint64_t a, uint64_t b) {
   16|  1.51G|   *r += (uint128_t)a * b;
   17|  1.51G|}
secp256k1.c:secp256k1_u128_to_u64:
   28|   848M|static SECP256K1_INLINE uint64_t secp256k1_u128_to_u64(const secp256k1_uint128 *a) {
   29|   848M|   return (uint64_t)(*a);
   30|   848M|}
secp256k1.c:secp256k1_u128_rshift:
   23|   652M|static SECP256K1_INLINE void secp256k1_u128_rshift(secp256k1_uint128 *r, unsigned int n) {
   24|   652M|   VERIFY_CHECK(n < 128);
   25|   652M|   *r >>= n;
   26|   652M|}
secp256k1.c:secp256k1_u128_accum_u64:
   19|  68.5M|static SECP256K1_INLINE void secp256k1_u128_accum_u64(secp256k1_uint128 *r, uint64_t a) {
   20|  68.5M|   *r += a;
   21|  68.5M|}
secp256k1.c:secp256k1_u128_from_u64:
   36|   550k|static SECP256K1_INLINE void secp256k1_u128_from_u64(secp256k1_uint128 *r, uint64_t a) {
   37|   550k|   *r = a;
   38|   550k|}
secp256k1.c:secp256k1_i128_mul:
   49|  5.37M|static SECP256K1_INLINE void secp256k1_i128_mul(secp256k1_int128 *r, int64_t a, int64_t b) {
   50|  5.37M|   *r = (int128_t)a * b;
   51|  5.37M|}
secp256k1.c:secp256k1_i128_accum_mul:
   53|  41.7M|static SECP256K1_INLINE void secp256k1_i128_accum_mul(secp256k1_int128 *r, int64_t a, int64_t b) {
   54|  41.7M|   int128_t ab = (int128_t)a * b;
   55|  41.7M|   VERIFY_CHECK(0 <= ab ? *r <= INT128_MAX - ab : INT128_MIN - ab <= *r);
   56|  41.7M|   *r += ab;
   57|  41.7M|}
secp256k1.c:secp256k1_i128_to_u64:
   71|  18.2M|static SECP256K1_INLINE uint64_t secp256k1_i128_to_u64(const secp256k1_int128 *a) {
   72|  18.2M|   return (uint64_t)*a;
   73|  18.2M|}
secp256k1.c:secp256k1_i128_rshift:
   66|  21.8M|static SECP256K1_INLINE void secp256k1_i128_rshift(secp256k1_int128 *r, unsigned int n) {
   67|  21.8M|   VERIFY_CHECK(n < 128);
   68|  21.8M|   *r >>= n;
   69|  21.8M|}
secp256k1.c:secp256k1_i128_to_i64:
   75|  5.37M|static SECP256K1_INLINE int64_t secp256k1_i128_to_i64(const secp256k1_int128 *a) {
   76|  5.37M|   VERIFY_CHECK(INT64_MIN <= *a && *a <= INT64_MAX);
   77|  5.37M|   return *a;
   78|  5.37M|}

secp256k1.c:secp256k1_modinv64_var:
  637|  18.1k|static void secp256k1_modinv64_var(secp256k1_modinv64_signed62 *x, const secp256k1_modinv64_modinfo *modinfo) {
  638|       |    /* Start with d=0, e=1, f=modulus, g=x, eta=-1. */
  639|  18.1k|    secp256k1_modinv64_signed62 d = {{0, 0, 0, 0, 0}};
  640|  18.1k|    secp256k1_modinv64_signed62 e = {{1, 0, 0, 0, 0}};
  641|  18.1k|    secp256k1_modinv64_signed62 f = modinfo->modulus;
  642|  18.1k|    secp256k1_modinv64_signed62 g = *x;
  643|       |#ifdef VERIFY
  644|       |    int i = 0;
  645|       |#endif
  646|  18.1k|    int j, len = 5;
  647|  18.1k|    int64_t eta = -1; /* eta = -delta; delta is initially 1 */
  648|  18.1k|    int64_t cond, fn, gn;
  649|       |
  650|       |    /* Do iterations of 62 divsteps each until g=0. */
  651|   163k|    while (1) {
  ------------------
  |  Branch (651:12): [True: 163k, Folded]
  ------------------
  652|       |        /* Compute transition matrix and new eta after 62 divsteps. */
  653|   163k|        secp256k1_modinv64_trans2x2 t;
  654|   163k|        eta = secp256k1_modinv64_divsteps_62_var(eta, f.v[0], g.v[0], &t);
  655|       |        /* Update d,e using that transition matrix. */
  656|   163k|        secp256k1_modinv64_update_de_62(&d, &e, &t, modinfo);
  657|       |        /* Update f,g using that transition matrix. */
  658|   163k|        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&f, len, &modinfo->modulus, -1) > 0); /* f > -modulus */
  659|   163k|        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&f, len, &modinfo->modulus, 1) <= 0); /* f <= modulus */
  660|   163k|        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&g, len, &modinfo->modulus, -1) > 0); /* g > -modulus */
  661|   163k|        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&g, len, &modinfo->modulus, 1) < 0);  /* g <  modulus */
  662|       |
  663|   163k|        secp256k1_modinv64_update_fg_62_var(len, &f, &g, &t);
  664|       |        /* If the bottom limb of g is zero, there is a chance that g=0. */
  665|   163k|        if (g.v[0] == 0) {
  ------------------
  |  Branch (665:13): [True: 18.1k, False: 145k]
  ------------------
  666|  18.1k|            cond = 0;
  667|       |            /* Check if the other limbs are also 0. */
  668|  18.1k|            for (j = 1; j < len; ++j) {
  ------------------
  |  Branch (668:25): [True: 0, False: 18.1k]
  ------------------
  669|      0|                cond |= g.v[j];
  670|      0|            }
  671|       |            /* If so, we're done. */
  672|  18.1k|            if (cond == 0) break;
  ------------------
  |  Branch (672:17): [True: 18.1k, False: 0]
  ------------------
  673|  18.1k|        }
  674|       |
  675|       |        /* Determine if len>1 and limb (len-1) of both f and g is 0 or -1. */
  676|   145k|        fn = f.v[len - 1];
  677|   145k|        gn = g.v[len - 1];
  678|   145k|        cond = ((int64_t)len - 2) >> 63;
  679|   145k|        cond |= fn ^ (fn >> 63);
  680|   145k|        cond |= gn ^ (gn >> 63);
  681|       |        /* If so, reduce length, propagating the sign of f and g's top limb into the one below. */
  682|   145k|        if (cond == 0) {
  ------------------
  |  Branch (682:13): [True: 72.6k, False: 72.6k]
  ------------------
  683|  72.6k|            f.v[len - 2] |= (uint64_t)fn << 62;
  684|  72.6k|            g.v[len - 2] |= (uint64_t)gn << 62;
  685|  72.6k|            --len;
  686|  72.6k|        }
  687|       |
  688|   145k|        VERIFY_CHECK(++i < 12); /* We should never need more than 12*62 = 744 divsteps */
  689|   145k|        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&f, len, &modinfo->modulus, -1) > 0); /* f > -modulus */
  690|   145k|        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&f, len, &modinfo->modulus, 1) <= 0); /* f <= modulus */
  691|   145k|        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&g, len, &modinfo->modulus, -1) > 0); /* g > -modulus */
  692|   145k|        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&g, len, &modinfo->modulus, 1) < 0);  /* g <  modulus */
  693|   145k|    }
  694|       |
  695|       |    /* At this point g is 0 and (if g was not originally 0) f must now equal +/- GCD of
  696|       |     * the initial f, g values i.e. +/- 1, and d now contains +/- the modular inverse. */
  697|       |
  698|       |    /* g == 0 */
  699|  18.1k|    VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&g, len, &SECP256K1_SIGNED62_ONE, 0) == 0);
  700|       |    /* |f| == 1, or (x == 0 and d == 0 and f == modulus) */
  701|  18.1k|    VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&f, len, &SECP256K1_SIGNED62_ONE, -1) == 0 ||
  702|  18.1k|                 secp256k1_modinv64_mul_cmp_62(&f, len, &SECP256K1_SIGNED62_ONE, 1) == 0 ||
  703|  18.1k|                 (secp256k1_modinv64_mul_cmp_62(x, 5, &SECP256K1_SIGNED62_ONE, 0) == 0 &&
  704|  18.1k|                  secp256k1_modinv64_mul_cmp_62(&d, 5, &SECP256K1_SIGNED62_ONE, 0) == 0 &&
  705|  18.1k|                  secp256k1_modinv64_mul_cmp_62(&f, len, &modinfo->modulus, 1) == 0));
  706|       |
  707|       |    /* Optionally negate d, normalize to [0,modulus), and return it. */
  708|  18.1k|    secp256k1_modinv64_normalize_62(&d, f.v[len - 1], modinfo);
  709|  18.1k|    *x = d;
  710|  18.1k|}
secp256k1.c:secp256k1_modinv64_divsteps_62_var:
  239|   163k|static int64_t secp256k1_modinv64_divsteps_62_var(int64_t eta, uint64_t f0, uint64_t g0, secp256k1_modinv64_trans2x2 *t) {
  240|       |    /* Transformation matrix; see comments in secp256k1_modinv64_divsteps_62. */
  241|   163k|    uint64_t u = 1, v = 0, q = 0, r = 1;
  242|   163k|    uint64_t f = f0, g = g0, m;
  243|   163k|    uint32_t w;
  244|   163k|    int i = 62, limit, zeros;
  245|       |
  246|  2.67M|    for (;;) {
  247|       |        /* Use a sentinel bit to count zeros only up to i. */
  248|  2.67M|        zeros = secp256k1_ctz64_var(g | (UINT64_MAX << i));
  249|       |        /* Perform zeros divsteps at once; they all just divide g by two. */
  250|  2.67M|        g >>= zeros;
  251|  2.67M|        u <<= zeros;
  252|  2.67M|        v <<= zeros;
  253|  2.67M|        eta -= zeros;
  254|  2.67M|        i -= zeros;
  255|       |        /* We're done once we've done 62 divsteps. */
  256|  2.67M|        if (i == 0) break;
  ------------------
  |  Branch (256:13): [True: 163k, False: 2.51M]
  ------------------
  257|  2.51M|        VERIFY_CHECK((f & 1) == 1);
  258|  2.51M|        VERIFY_CHECK((g & 1) == 1);
  259|  2.51M|        VERIFY_CHECK((u * f0 + v * g0) == f << (62 - i));
  260|  2.51M|        VERIFY_CHECK((q * f0 + r * g0) == g << (62 - i));
  261|       |        /* Bounds on eta that follow from the bounds on iteration count (max 12*62 divsteps). */
  262|  2.51M|        VERIFY_CHECK(eta >= -745 && eta <= 745);
  263|       |        /* If eta is negative, negate it and replace f,g with g,-f. */
  264|  2.51M|        if (eta < 0) {
  ------------------
  |  Branch (264:13): [True: 2.42M, False: 86.9k]
  ------------------
  265|  2.42M|            uint64_t tmp;
  266|  2.42M|            eta = -eta;
  267|  2.42M|            tmp = f; f = g; g = -tmp;
  268|  2.42M|            tmp = u; u = q; q = -tmp;
  269|  2.42M|            tmp = v; v = r; r = -tmp;
  270|       |            /* Use a formula to cancel out up to 6 bits of g. Also, no more than i can be cancelled
  271|       |             * out (as we'd be done before that point), and no more than eta+1 can be done as its
  272|       |             * sign will flip again once that happens. */
  273|  2.42M|            limit = ((int)eta + 1) > i ? i : ((int)eta + 1);
  ------------------
  |  Branch (273:21): [True: 48.2k, False: 2.37M]
  ------------------
  274|  2.42M|            VERIFY_CHECK(limit > 0 && limit <= 62);
  275|       |            /* m is a mask for the bottom min(limit, 6) bits. */
  276|  2.42M|            m = (UINT64_MAX >> (64 - limit)) & 63U;
  277|       |            /* Find what multiple of f must be added to g to cancel its bottom min(limit, 6)
  278|       |             * bits. */
  279|  2.42M|            w = (f * g * (f * f - 2)) & m;
  280|  2.42M|        } else {
  281|       |            /* In this branch, use a simpler formula that only lets us cancel up to 4 bits of g, as
  282|       |             * eta tends to be smaller here. */
  283|  86.9k|            limit = ((int)eta + 1) > i ? i : ((int)eta + 1);
  ------------------
  |  Branch (283:21): [True: 466, False: 86.4k]
  ------------------
  284|  86.9k|            VERIFY_CHECK(limit > 0 && limit <= 62);
  285|       |            /* m is a mask for the bottom min(limit, 4) bits. */
  286|  86.9k|            m = (UINT64_MAX >> (64 - limit)) & 15U;
  287|       |            /* Find what multiple of f must be added to g to cancel its bottom min(limit, 4)
  288|       |             * bits. */
  289|  86.9k|            w = f + (((f + 1) & 4) << 1);
  290|  86.9k|            w = (-w * g) & m;
  291|  86.9k|        }
  292|  2.51M|        g += f * w;
  293|  2.51M|        q += u * w;
  294|  2.51M|        r += v * w;
  295|  2.51M|        VERIFY_CHECK((g & m) == 0);
  296|  2.51M|    }
  297|       |    /* Return data in t and return value. */
  298|   163k|    t->u = (int64_t)u;
  299|   163k|    t->v = (int64_t)v;
  300|   163k|    t->q = (int64_t)q;
  301|   163k|    t->r = (int64_t)r;
  302|       |
  303|       |    /* The determinant of t must be a power of two. This guarantees that multiplication with t
  304|       |     * does not change the gcd of f and g, apart from adding a power-of-2 factor to it (which
  305|       |     * will be divided out again). As each divstep's individual matrix has determinant 2, the
  306|       |     * aggregate of 62 of them will have determinant 2^62. */
  307|   163k|    VERIFY_CHECK(secp256k1_modinv64_det_check_pow2(t, 62, 0));
  308|       |
  309|   163k|    return eta;
  310|   163k|}
secp256k1.c:secp256k1_modinv64_update_de_62:
  411|   872k|static void secp256k1_modinv64_update_de_62(secp256k1_modinv64_signed62 *d, secp256k1_modinv64_signed62 *e, const secp256k1_modinv64_trans2x2 *t, const secp256k1_modinv64_modinfo* modinfo) {
  412|   872k|    const uint64_t M62 = UINT64_MAX >> 2;
  413|   872k|    const int64_t d0 = d->v[0], d1 = d->v[1], d2 = d->v[2], d3 = d->v[3], d4 = d->v[4];
  414|   872k|    const int64_t e0 = e->v[0], e1 = e->v[1], e2 = e->v[2], e3 = e->v[3], e4 = e->v[4];
  415|   872k|    const int64_t u = t->u, v = t->v, q = t->q, r = t->r;
  416|   872k|    int64_t md, me, sd, se;
  417|   872k|    secp256k1_int128 cd, ce;
  418|   872k|    VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(d, 5, &modinfo->modulus, -2) > 0); /* d > -2*modulus */
  419|   872k|    VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(d, 5, &modinfo->modulus, 1) < 0);  /* d <    modulus */
  420|   872k|    VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(e, 5, &modinfo->modulus, -2) > 0); /* e > -2*modulus */
  421|   872k|    VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(e, 5, &modinfo->modulus, 1) < 0);  /* e <    modulus */
  422|   872k|    VERIFY_CHECK(secp256k1_modinv64_abs(u) <= (((int64_t)1 << 62) - secp256k1_modinv64_abs(v))); /* |u|+|v| <= 2^62 */
  423|   872k|    VERIFY_CHECK(secp256k1_modinv64_abs(q) <= (((int64_t)1 << 62) - secp256k1_modinv64_abs(r))); /* |q|+|r| <= 2^62 */
  424|       |
  425|       |    /* [md,me] start as zero; plus [u,q] if d is negative; plus [v,r] if e is negative. */
  426|   872k|    sd = d4 >> 63;
  427|   872k|    se = e4 >> 63;
  428|   872k|    md = (u & sd) + (v & se);
  429|   872k|    me = (q & sd) + (r & se);
  430|       |    /* Begin computing t*[d,e]. */
  431|   872k|    secp256k1_i128_mul(&cd, u, d0);
  432|   872k|    secp256k1_i128_accum_mul(&cd, v, e0);
  433|   872k|    secp256k1_i128_mul(&ce, q, d0);
  434|   872k|    secp256k1_i128_accum_mul(&ce, r, e0);
  435|       |    /* Correct md,me so that t*[d,e]+modulus*[md,me] has 62 zero bottom bits. */
  436|   872k|    md -= (modinfo->modulus_inv62 * secp256k1_i128_to_u64(&cd) + md) & M62;
  437|   872k|    me -= (modinfo->modulus_inv62 * secp256k1_i128_to_u64(&ce) + me) & M62;
  438|       |    /* Update the beginning of computation for t*[d,e]+modulus*[md,me] now md,me are known. */
  439|   872k|    secp256k1_i128_accum_mul(&cd, modinfo->modulus.v[0], md);
  440|   872k|    secp256k1_i128_accum_mul(&ce, modinfo->modulus.v[0], me);
  441|       |    /* Verify that the low 62 bits of the computation are indeed zero, and then throw them away. */
  442|   872k|    VERIFY_CHECK((secp256k1_i128_to_u64(&cd) & M62) == 0); secp256k1_i128_rshift(&cd, 62);
  443|   872k|    VERIFY_CHECK((secp256k1_i128_to_u64(&ce) & M62) == 0); secp256k1_i128_rshift(&ce, 62);
  444|       |    /* Compute limb 1 of t*[d,e]+modulus*[md,me], and store it as output limb 0 (= down shift). */
  445|   872k|    secp256k1_i128_accum_mul(&cd, u, d1);
  446|   872k|    secp256k1_i128_accum_mul(&cd, v, e1);
  447|   872k|    secp256k1_i128_accum_mul(&ce, q, d1);
  448|   872k|    secp256k1_i128_accum_mul(&ce, r, e1);
  449|   872k|    if (modinfo->modulus.v[1]) { /* Optimize for the case where limb of modulus is zero. */
  ------------------
  |  Branch (449:9): [True: 0, False: 872k]
  ------------------
  450|      0|        secp256k1_i128_accum_mul(&cd, modinfo->modulus.v[1], md);
  451|      0|        secp256k1_i128_accum_mul(&ce, modinfo->modulus.v[1], me);
  452|      0|    }
  453|   872k|    d->v[0] = secp256k1_i128_to_u64(&cd) & M62; secp256k1_i128_rshift(&cd, 62);
  454|   872k|    e->v[0] = secp256k1_i128_to_u64(&ce) & M62; secp256k1_i128_rshift(&ce, 62);
  455|       |    /* Compute limb 2 of t*[d,e]+modulus*[md,me], and store it as output limb 1. */
  456|   872k|    secp256k1_i128_accum_mul(&cd, u, d2);
  457|   872k|    secp256k1_i128_accum_mul(&cd, v, e2);
  458|   872k|    secp256k1_i128_accum_mul(&ce, q, d2);
  459|   872k|    secp256k1_i128_accum_mul(&ce, r, e2);
  460|   872k|    if (modinfo->modulus.v[2]) { /* Optimize for the case where limb of modulus is zero. */
  ------------------
  |  Branch (460:9): [True: 0, False: 872k]
  ------------------
  461|      0|        secp256k1_i128_accum_mul(&cd, modinfo->modulus.v[2], md);
  462|      0|        secp256k1_i128_accum_mul(&ce, modinfo->modulus.v[2], me);
  463|      0|    }
  464|   872k|    d->v[1] = secp256k1_i128_to_u64(&cd) & M62; secp256k1_i128_rshift(&cd, 62);
  465|   872k|    e->v[1] = secp256k1_i128_to_u64(&ce) & M62; secp256k1_i128_rshift(&ce, 62);
  466|       |    /* Compute limb 3 of t*[d,e]+modulus*[md,me], and store it as output limb 2. */
  467|   872k|    secp256k1_i128_accum_mul(&cd, u, d3);
  468|   872k|    secp256k1_i128_accum_mul(&cd, v, e3);
  469|   872k|    secp256k1_i128_accum_mul(&ce, q, d3);
  470|   872k|    secp256k1_i128_accum_mul(&ce, r, e3);
  471|   872k|    if (modinfo->modulus.v[3]) { /* Optimize for the case where limb of modulus is zero. */
  ------------------
  |  Branch (471:9): [True: 0, False: 872k]
  ------------------
  472|      0|        secp256k1_i128_accum_mul(&cd, modinfo->modulus.v[3], md);
  473|      0|        secp256k1_i128_accum_mul(&ce, modinfo->modulus.v[3], me);
  474|      0|    }
  475|   872k|    d->v[2] = secp256k1_i128_to_u64(&cd) & M62; secp256k1_i128_rshift(&cd, 62);
  476|   872k|    e->v[2] = secp256k1_i128_to_u64(&ce) & M62; secp256k1_i128_rshift(&ce, 62);
  477|       |    /* Compute limb 4 of t*[d,e]+modulus*[md,me], and store it as output limb 3. */
  478|   872k|    secp256k1_i128_accum_mul(&cd, u, d4);
  479|   872k|    secp256k1_i128_accum_mul(&cd, v, e4);
  480|   872k|    secp256k1_i128_accum_mul(&ce, q, d4);
  481|   872k|    secp256k1_i128_accum_mul(&ce, r, e4);
  482|   872k|    secp256k1_i128_accum_mul(&cd, modinfo->modulus.v[4], md);
  483|   872k|    secp256k1_i128_accum_mul(&ce, modinfo->modulus.v[4], me);
  484|   872k|    d->v[3] = secp256k1_i128_to_u64(&cd) & M62; secp256k1_i128_rshift(&cd, 62);
  485|   872k|    e->v[3] = secp256k1_i128_to_u64(&ce) & M62; secp256k1_i128_rshift(&ce, 62);
  486|       |    /* What remains is limb 5 of t*[d,e]+modulus*[md,me]; store it as output limb 4. */
  487|   872k|    d->v[4] = secp256k1_i128_to_i64(&cd);
  488|   872k|    e->v[4] = secp256k1_i128_to_i64(&ce);
  489|       |
  490|   872k|    VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(d, 5, &modinfo->modulus, -2) > 0); /* d > -2*modulus */
  491|   872k|    VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(d, 5, &modinfo->modulus, 1) < 0);  /* d <    modulus */
  492|   872k|    VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(e, 5, &modinfo->modulus, -2) > 0); /* e > -2*modulus */
  493|   872k|    VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(e, 5, &modinfo->modulus, 1) < 0);  /* e <    modulus */
  494|   872k|}
secp256k1.c:secp256k1_modinv64_update_fg_62_var:
  553|  1.10M|static void secp256k1_modinv64_update_fg_62_var(int len, secp256k1_modinv64_signed62 *f, secp256k1_modinv64_signed62 *g, const secp256k1_modinv64_trans2x2 *t) {
  554|  1.10M|    const uint64_t M62 = UINT64_MAX >> 2;
  555|  1.10M|    const int64_t u = t->u, v = t->v, q = t->q, r = t->r;
  556|  1.10M|    int64_t fi, gi;
  557|  1.10M|    secp256k1_int128 cf, cg;
  558|  1.10M|    int i;
  559|  1.10M|    VERIFY_CHECK(len > 0);
  560|       |    /* Start computing t*[f,g]. */
  561|  1.10M|    fi = f->v[0];
  562|  1.10M|    gi = g->v[0];
  563|  1.10M|    secp256k1_i128_mul(&cf, u, fi);
  564|  1.10M|    secp256k1_i128_accum_mul(&cf, v, gi);
  565|  1.10M|    secp256k1_i128_mul(&cg, q, fi);
  566|  1.10M|    secp256k1_i128_accum_mul(&cg, r, gi);
  567|       |    /* Verify that the bottom 62 bits of the result are zero, and then throw them away. */
  568|  1.10M|    VERIFY_CHECK((secp256k1_i128_to_u64(&cf) & M62) == 0); secp256k1_i128_rshift(&cf, 62);
  569|  1.10M|    VERIFY_CHECK((secp256k1_i128_to_u64(&cg) & M62) == 0); secp256k1_i128_rshift(&cg, 62);
  570|       |    /* Now iteratively compute limb i=1..len of t*[f,g], and store them in output limb i-1 (shifting
  571|       |     * down by 62 bits). */
  572|  3.00M|    for (i = 1; i < len; ++i) {
  ------------------
  |  Branch (572:17): [True: 1.90M, False: 1.10M]
  ------------------
  573|  1.90M|        fi = f->v[i];
  574|  1.90M|        gi = g->v[i];
  575|  1.90M|        secp256k1_i128_accum_mul(&cf, u, fi);
  576|  1.90M|        secp256k1_i128_accum_mul(&cf, v, gi);
  577|  1.90M|        secp256k1_i128_accum_mul(&cg, q, fi);
  578|  1.90M|        secp256k1_i128_accum_mul(&cg, r, gi);
  579|  1.90M|        f->v[i - 1] = secp256k1_i128_to_u64(&cf) & M62; secp256k1_i128_rshift(&cf, 62);
  580|  1.90M|        g->v[i - 1] = secp256k1_i128_to_u64(&cg) & M62; secp256k1_i128_rshift(&cg, 62);
  581|  1.90M|    }
  582|       |    /* What remains is limb (len) of t*[f,g]; store it as output limb (len-1). */
  583|  1.10M|    f->v[len - 1] = secp256k1_i128_to_i64(&cf);
  584|  1.10M|    g->v[len - 1] = secp256k1_i128_to_i64(&cg);
  585|  1.10M|}
secp256k1.c:secp256k1_modinv64_normalize_62:
   88|  89.0k|static void secp256k1_modinv64_normalize_62(secp256k1_modinv64_signed62 *r, int64_t sign, const secp256k1_modinv64_modinfo *modinfo) {
   89|  89.0k|    const int64_t M62 = (int64_t)(UINT64_MAX >> 2);
   90|  89.0k|    int64_t r0 = r->v[0], r1 = r->v[1], r2 = r->v[2], r3 = r->v[3], r4 = r->v[4];
   91|  89.0k|    volatile int64_t cond_add, cond_negate;
   92|       |
   93|       |#ifdef VERIFY
   94|       |    /* Verify that all limbs are in range (-2^62,2^62). */
   95|       |    int i;
   96|       |    for (i = 0; i < 5; ++i) {
   97|       |        VERIFY_CHECK(r->v[i] >= -M62);
   98|       |        VERIFY_CHECK(r->v[i] <= M62);
   99|       |    }
  100|       |    VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(r, 5, &modinfo->modulus, -2) > 0); /* r > -2*modulus */
  101|       |    VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(r, 5, &modinfo->modulus, 1) < 0); /* r < modulus */
  102|       |#endif
  103|       |
  104|       |    /* In a first step, add the modulus if the input is negative, and then negate if requested.
  105|       |     * This brings r from range (-2*modulus,modulus) to range (-modulus,modulus). As all input
  106|       |     * limbs are in range (-2^62,2^62), this cannot overflow an int64_t. Note that the right
  107|       |     * shifts below are signed sign-extending shifts (see assumptions.h for tests that that is
  108|       |     * indeed the behavior of the right shift operator). */
  109|  89.0k|    cond_add = r4 >> 63;
  110|  89.0k|    r0 += modinfo->modulus.v[0] & cond_add;
  111|  89.0k|    r1 += modinfo->modulus.v[1] & cond_add;
  112|  89.0k|    r2 += modinfo->modulus.v[2] & cond_add;
  113|  89.0k|    r3 += modinfo->modulus.v[3] & cond_add;
  114|  89.0k|    r4 += modinfo->modulus.v[4] & cond_add;
  115|  89.0k|    cond_negate = sign >> 63;
  116|  89.0k|    r0 = (r0 ^ cond_negate) - cond_negate;
  117|  89.0k|    r1 = (r1 ^ cond_negate) - cond_negate;
  118|  89.0k|    r2 = (r2 ^ cond_negate) - cond_negate;
  119|  89.0k|    r3 = (r3 ^ cond_negate) - cond_negate;
  120|  89.0k|    r4 = (r4 ^ cond_negate) - cond_negate;
  121|       |    /* Propagate the top bits, to bring limbs back to range (-2^62,2^62). */
  122|  89.0k|    r1 += r0 >> 62; r0 &= M62;
  123|  89.0k|    r2 += r1 >> 62; r1 &= M62;
  124|  89.0k|    r3 += r2 >> 62; r2 &= M62;
  125|  89.0k|    r4 += r3 >> 62; r3 &= M62;
  126|       |
  127|       |    /* In a second step add the modulus again if the result is still negative, bringing
  128|       |     * r to range [0,modulus). */
  129|  89.0k|    cond_add = r4 >> 63;
  130|  89.0k|    r0 += modinfo->modulus.v[0] & cond_add;
  131|  89.0k|    r1 += modinfo->modulus.v[1] & cond_add;
  132|  89.0k|    r2 += modinfo->modulus.v[2] & cond_add;
  133|  89.0k|    r3 += modinfo->modulus.v[3] & cond_add;
  134|  89.0k|    r4 += modinfo->modulus.v[4] & cond_add;
  135|       |    /* And propagate again. */
  136|  89.0k|    r1 += r0 >> 62; r0 &= M62;
  137|  89.0k|    r2 += r1 >> 62; r1 &= M62;
  138|  89.0k|    r3 += r2 >> 62; r2 &= M62;
  139|  89.0k|    r4 += r3 >> 62; r3 &= M62;
  140|       |
  141|  89.0k|    r->v[0] = r0;
  142|  89.0k|    r->v[1] = r1;
  143|  89.0k|    r->v[2] = r2;
  144|  89.0k|    r->v[3] = r3;
  145|  89.0k|    r->v[4] = r4;
  146|       |
  147|  89.0k|    VERIFY_CHECK(r0 >> 62 == 0);
  148|  89.0k|    VERIFY_CHECK(r1 >> 62 == 0);
  149|  89.0k|    VERIFY_CHECK(r2 >> 62 == 0);
  150|  89.0k|    VERIFY_CHECK(r3 >> 62 == 0);
  151|  89.0k|    VERIFY_CHECK(r4 >> 62 == 0);
  152|  89.0k|    VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(r, 5, &modinfo->modulus, 0) >= 0); /* r >= 0 */
  153|  89.0k|    VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(r, 5, &modinfo->modulus, 1) < 0); /* r < modulus */
  154|  89.0k|}
secp256k1.c:secp256k1_modinv64:
  588|  70.9k|static void secp256k1_modinv64(secp256k1_modinv64_signed62 *x, const secp256k1_modinv64_modinfo *modinfo) {
  589|       |    /* Start with d=0, e=1, f=modulus, g=x, zeta=-1. */
  590|  70.9k|    secp256k1_modinv64_signed62 d = {{0, 0, 0, 0, 0}};
  591|  70.9k|    secp256k1_modinv64_signed62 e = {{1, 0, 0, 0, 0}};
  592|  70.9k|    secp256k1_modinv64_signed62 f = modinfo->modulus;
  593|  70.9k|    secp256k1_modinv64_signed62 g = *x;
  594|  70.9k|    int i;
  595|  70.9k|    int64_t zeta = -1; /* zeta = -(delta+1/2); delta starts at 1/2. */
  596|       |
  597|       |    /* Do 10 iterations of 59 divsteps each = 590 divsteps. This suffices for 256-bit inputs. */
  598|   780k|    for (i = 0; i < 10; ++i) {
  ------------------
  |  Branch (598:17): [True: 709k, False: 70.9k]
  ------------------
  599|       |        /* Compute transition matrix and new zeta after 59 divsteps. */
  600|   709k|        secp256k1_modinv64_trans2x2 t;
  601|   709k|        zeta = secp256k1_modinv64_divsteps_59(zeta, f.v[0], g.v[0], &t);
  602|       |        /* Update d,e using that transition matrix. */
  603|   709k|        secp256k1_modinv64_update_de_62(&d, &e, &t, modinfo);
  604|       |        /* Update f,g using that transition matrix. */
  605|   709k|        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&f, 5, &modinfo->modulus, -1) > 0); /* f > -modulus */
  606|   709k|        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&f, 5, &modinfo->modulus, 1) <= 0); /* f <= modulus */
  607|   709k|        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&g, 5, &modinfo->modulus, -1) > 0); /* g > -modulus */
  608|   709k|        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&g, 5, &modinfo->modulus, 1) < 0);  /* g <  modulus */
  609|       |
  610|   709k|        secp256k1_modinv64_update_fg_62(&f, &g, &t);
  611|       |
  612|   709k|        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&f, 5, &modinfo->modulus, -1) > 0); /* f > -modulus */
  613|   709k|        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&f, 5, &modinfo->modulus, 1) <= 0); /* f <= modulus */
  614|   709k|        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&g, 5, &modinfo->modulus, -1) > 0); /* g > -modulus */
  615|   709k|        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&g, 5, &modinfo->modulus, 1) < 0);  /* g <  modulus */
  616|   709k|    }
  617|       |
  618|       |    /* At this point sufficient iterations have been performed that g must have reached 0
  619|       |     * and (if g was not originally 0) f must now equal +/- GCD of the initial f, g
  620|       |     * values i.e. +/- 1, and d now contains +/- the modular inverse. */
  621|       |
  622|       |    /* g == 0 */
  623|  70.9k|    VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&g, 5, &SECP256K1_SIGNED62_ONE, 0) == 0);
  624|       |    /* |f| == 1, or (x == 0 and d == 0 and f == modulus) */
  625|  70.9k|    VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&f, 5, &SECP256K1_SIGNED62_ONE, -1) == 0 ||
  626|  70.9k|                 secp256k1_modinv64_mul_cmp_62(&f, 5, &SECP256K1_SIGNED62_ONE, 1) == 0 ||
  627|  70.9k|                 (secp256k1_modinv64_mul_cmp_62(x, 5, &SECP256K1_SIGNED62_ONE, 0) == 0 &&
  628|  70.9k|                  secp256k1_modinv64_mul_cmp_62(&d, 5, &SECP256K1_SIGNED62_ONE, 0) == 0 &&
  629|  70.9k|                  secp256k1_modinv64_mul_cmp_62(&f, 5, &modinfo->modulus, 1) == 0));
  630|       |
  631|       |    /* Optionally negate d, normalize to [0,modulus), and return it. */
  632|  70.9k|    secp256k1_modinv64_normalize_62(&d, f.v[4], modinfo);
  633|  70.9k|    *x = d;
  634|  70.9k|}
secp256k1.c:secp256k1_modinv64_divsteps_59:
  167|   709k|static int64_t secp256k1_modinv64_divsteps_59(int64_t zeta, uint64_t f0, uint64_t g0, secp256k1_modinv64_trans2x2 *t) {
  168|       |    /* u,v,q,r are the elements of the transformation matrix being built up,
  169|       |     * starting with the identity matrix times 8 (because the caller expects
  170|       |     * a result scaled by 2^62). Semantically they are signed integers
  171|       |     * in range [-2^62,2^62], but here represented as unsigned mod 2^64. This
  172|       |     * permits left shifting (which is UB for negative numbers). The range
  173|       |     * being inside [-2^63,2^63) means that casting to signed works correctly.
  174|       |     */
  175|   709k|    uint64_t u = 8, v = 0, q = 0, r = 8;
  176|   709k|    volatile uint64_t c1, c2;
  177|   709k|    uint64_t mask1, mask2, f = f0, g = g0, x, y, z;
  178|   709k|    int i;
  179|       |
  180|  42.5M|    for (i = 3; i < 62; ++i) {
  ------------------
  |  Branch (180:17): [True: 41.8M, False: 709k]
  ------------------
  181|  41.8M|        VERIFY_CHECK((f & 1) == 1); /* f must always be odd */
  182|  41.8M|        VERIFY_CHECK((u * f0 + v * g0) == f << i);
  183|  41.8M|        VERIFY_CHECK((q * f0 + r * g0) == g << i);
  184|       |        /* Compute conditional masks for (zeta < 0) and for (g & 1). */
  185|  41.8M|        c1 = zeta >> 63;
  186|  41.8M|        mask1 = c1;
  187|  41.8M|        c2 = g & 1;
  188|  41.8M|        mask2 = -c2;
  189|       |        /* Compute x,y,z, conditionally negated versions of f,u,v. */
  190|  41.8M|        x = (f ^ mask1) - mask1;
  191|  41.8M|        y = (u ^ mask1) - mask1;
  192|  41.8M|        z = (v ^ mask1) - mask1;
  193|       |        /* Conditionally add x,y,z to g,q,r. */
  194|  41.8M|        g += x & mask2;
  195|  41.8M|        q += y & mask2;
  196|  41.8M|        r += z & mask2;
  197|       |        /* In what follows, c1 is a condition mask for (zeta < 0) and (g & 1). */
  198|  41.8M|        mask1 &= mask2;
  199|       |        /* Conditionally change zeta into -zeta-2 or zeta-1. */
  200|  41.8M|        zeta = (zeta ^ mask1) - 1;
  201|       |        /* Conditionally add g,q,r to f,u,v. */
  202|  41.8M|        f += g & mask1;
  203|  41.8M|        u += q & mask1;
  204|  41.8M|        v += r & mask1;
  205|       |        /* Shifts */
  206|  41.8M|        g >>= 1;
  207|  41.8M|        u <<= 1;
  208|  41.8M|        v <<= 1;
  209|       |        /* Bounds on zeta that follow from the bounds on iteration count (max 10*59 divsteps). */
  210|  41.8M|        VERIFY_CHECK(zeta >= -591 && zeta <= 591);
  211|  41.8M|    }
  212|       |    /* Return data in t and return value. */
  213|   709k|    t->u = (int64_t)u;
  214|   709k|    t->v = (int64_t)v;
  215|   709k|    t->q = (int64_t)q;
  216|   709k|    t->r = (int64_t)r;
  217|       |
  218|       |    /* The determinant of t must be a power of two. This guarantees that multiplication with t
  219|       |     * does not change the gcd of f and g, apart from adding a power-of-2 factor to it (which
  220|       |     * will be divided out again). As each divstep's individual matrix has determinant 2, the
  221|       |     * aggregate of 59 of them will have determinant 2^59. Multiplying with the initial
  222|       |     * 8*identity (which has determinant 2^6) means the overall outputs has determinant
  223|       |     * 2^65. */
  224|   709k|    VERIFY_CHECK(secp256k1_modinv64_det_check_pow2(t, 65, 0));
  225|       |
  226|   709k|    return zeta;
  227|   709k|}
secp256k1.c:secp256k1_modinv64_update_fg_62:
  500|   709k|static void secp256k1_modinv64_update_fg_62(secp256k1_modinv64_signed62 *f, secp256k1_modinv64_signed62 *g, const secp256k1_modinv64_trans2x2 *t) {
  501|   709k|    const uint64_t M62 = UINT64_MAX >> 2;
  502|   709k|    const int64_t f0 = f->v[0], f1 = f->v[1], f2 = f->v[2], f3 = f->v[3], f4 = f->v[4];
  503|   709k|    const int64_t g0 = g->v[0], g1 = g->v[1], g2 = g->v[2], g3 = g->v[3], g4 = g->v[4];
  504|   709k|    const int64_t u = t->u, v = t->v, q = t->q, r = t->r;
  505|   709k|    secp256k1_int128 cf, cg;
  506|       |    /* Start computing t*[f,g]. */
  507|   709k|    secp256k1_i128_mul(&cf, u, f0);
  508|   709k|    secp256k1_i128_accum_mul(&cf, v, g0);
  509|   709k|    secp256k1_i128_mul(&cg, q, f0);
  510|   709k|    secp256k1_i128_accum_mul(&cg, r, g0);
  511|       |    /* Verify that the bottom 62 bits of the result are zero, and then throw them away. */
  512|   709k|    VERIFY_CHECK((secp256k1_i128_to_u64(&cf) & M62) == 0); secp256k1_i128_rshift(&cf, 62);
  513|   709k|    VERIFY_CHECK((secp256k1_i128_to_u64(&cg) & M62) == 0); secp256k1_i128_rshift(&cg, 62);
  514|       |    /* Compute limb 1 of t*[f,g], and store it as output limb 0 (= down shift). */
  515|   709k|    secp256k1_i128_accum_mul(&cf, u, f1);
  516|   709k|    secp256k1_i128_accum_mul(&cf, v, g1);
  517|   709k|    secp256k1_i128_accum_mul(&cg, q, f1);
  518|   709k|    secp256k1_i128_accum_mul(&cg, r, g1);
  519|   709k|    f->v[0] = secp256k1_i128_to_u64(&cf) & M62; secp256k1_i128_rshift(&cf, 62);
  520|   709k|    g->v[0] = secp256k1_i128_to_u64(&cg) & M62; secp256k1_i128_rshift(&cg, 62);
  521|       |    /* Compute limb 2 of t*[f,g], and store it as output limb 1. */
  522|   709k|    secp256k1_i128_accum_mul(&cf, u, f2);
  523|   709k|    secp256k1_i128_accum_mul(&cf, v, g2);
  524|   709k|    secp256k1_i128_accum_mul(&cg, q, f2);
  525|   709k|    secp256k1_i128_accum_mul(&cg, r, g2);
  526|   709k|    f->v[1] = secp256k1_i128_to_u64(&cf) & M62; secp256k1_i128_rshift(&cf, 62);
  527|   709k|    g->v[1] = secp256k1_i128_to_u64(&cg) & M62; secp256k1_i128_rshift(&cg, 62);
  528|       |    /* Compute limb 3 of t*[f,g], and store it as output limb 2. */
  529|   709k|    secp256k1_i128_accum_mul(&cf, u, f3);
  530|   709k|    secp256k1_i128_accum_mul(&cf, v, g3);
  531|   709k|    secp256k1_i128_accum_mul(&cg, q, f3);
  532|   709k|    secp256k1_i128_accum_mul(&cg, r, g3);
  533|   709k|    f->v[2] = secp256k1_i128_to_u64(&cf) & M62; secp256k1_i128_rshift(&cf, 62);
  534|   709k|    g->v[2] = secp256k1_i128_to_u64(&cg) & M62; secp256k1_i128_rshift(&cg, 62);
  535|       |    /* Compute limb 4 of t*[f,g], and store it as output limb 3. */
  536|   709k|    secp256k1_i128_accum_mul(&cf, u, f4);
  537|   709k|    secp256k1_i128_accum_mul(&cf, v, g4);
  538|   709k|    secp256k1_i128_accum_mul(&cg, q, f4);
  539|   709k|    secp256k1_i128_accum_mul(&cg, r, g4);
  540|   709k|    f->v[3] = secp256k1_i128_to_u64(&cf) & M62; secp256k1_i128_rshift(&cf, 62);
  541|   709k|    g->v[3] = secp256k1_i128_to_u64(&cg) & M62; secp256k1_i128_rshift(&cg, 62);
  542|       |    /* What remains is limb 5 of t*[f,g]; store it as output limb 4. */
  543|   709k|    f->v[4] = secp256k1_i128_to_i64(&cf);
  544|   709k|    g->v[4] = secp256k1_i128_to_i64(&cg);
  545|   709k|}
secp256k1.c:secp256k1_jacobi64_maybe_var:
  721|  74.4k|static int secp256k1_jacobi64_maybe_var(const secp256k1_modinv64_signed62 *x, const secp256k1_modinv64_modinfo *modinfo) {
  722|       |    /* Start with f=modulus, g=x, eta=-1. */
  723|  74.4k|    secp256k1_modinv64_signed62 f = modinfo->modulus;
  724|  74.4k|    secp256k1_modinv64_signed62 g = *x;
  725|  74.4k|    int j, len = 5;
  726|  74.4k|    int64_t eta = -1; /* eta = -delta; delta is initially 1 */
  727|  74.4k|    int64_t cond, fn, gn;
  728|  74.4k|    int jac = 0;
  729|  74.4k|    int count;
  730|       |
  731|       |    /* The input limbs must all be non-negative. */
  732|  74.4k|    VERIFY_CHECK(g.v[0] >= 0 && g.v[1] >= 0 && g.v[2] >= 0 && g.v[3] >= 0 && g.v[4] >= 0);
  733|       |
  734|       |    /* If x > 0, then if the loop below converges, it converges to f=g=gcd(x,modulus). Since we
  735|       |     * require that gcd(x,modulus)=1 and modulus>=3, x cannot be 0. Thus, we must reach f=1 (or
  736|       |     * time out). */
  737|  74.4k|    VERIFY_CHECK((g.v[0] | g.v[1] | g.v[2] | g.v[3] | g.v[4]) != 0);
  738|       |
  739|   942k|    for (count = 0; count < JACOBI64_ITERATIONS; ++count) {
  ------------------
  |  |  717|   942k|#define JACOBI64_ITERATIONS 25
  ------------------
  |  Branch (739:21): [True: 942k, False: 0]
  ------------------
  740|       |        /* Compute transition matrix and new eta after 62 posdivsteps. */
  741|   942k|        secp256k1_modinv64_trans2x2 t;
  742|   942k|        eta = secp256k1_modinv64_posdivsteps_62_var(eta, f.v[0] | ((uint64_t)f.v[1] << 62), g.v[0] | ((uint64_t)g.v[1] << 62), &t, &jac);
  743|       |        /* Update f,g using that transition matrix. */
  744|   942k|        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&f, len, &modinfo->modulus, 0) > 0); /* f > 0 */
  745|   942k|        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&f, len, &modinfo->modulus, 1) <= 0); /* f <= modulus */
  746|   942k|        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&g, len, &modinfo->modulus, 0) > 0); /* g > 0 */
  747|   942k|        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&g, len, &modinfo->modulus, 1) < 0);  /* g < modulus */
  748|       |
  749|   942k|        secp256k1_modinv64_update_fg_62_var(len, &f, &g, &t);
  750|       |        /* If the bottom limb of f is 1, there is a chance that f=1. */
  751|   942k|        if (f.v[0] == 1) {
  ------------------
  |  Branch (751:13): [True: 74.4k, False: 868k]
  ------------------
  752|  74.4k|            cond = 0;
  753|       |            /* Check if the other limbs are also 0. */
  754|  74.4k|            for (j = 1; j < len; ++j) {
  ------------------
  |  Branch (754:25): [True: 0, False: 74.4k]
  ------------------
  755|      0|                cond |= f.v[j];
  756|      0|            }
  757|       |            /* If so, we're done. When f=1, the Jacobi symbol (g | f)=1. */
  758|  74.4k|            if (cond == 0) return 1 - 2*(jac & 1);
  ------------------
  |  Branch (758:17): [True: 74.4k, False: 0]
  ------------------
  759|  74.4k|        }
  760|       |
  761|       |        /* Determine if len>1 and limb (len-1) of both f and g is 0. */
  762|   868k|        fn = f.v[len - 1];
  763|   868k|        gn = g.v[len - 1];
  764|   868k|        cond = ((int64_t)len - 2) >> 63;
  765|   868k|        cond |= fn;
  766|   868k|        cond |= gn;
  767|       |        /* If so, reduce length. */
  768|   868k|        if (cond == 0) --len;
  ------------------
  |  Branch (768:13): [True: 297k, False: 570k]
  ------------------
  769|       |
  770|   868k|        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&f, len, &modinfo->modulus, 0) > 0); /* f > 0 */
  771|   868k|        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&f, len, &modinfo->modulus, 1) <= 0); /* f <= modulus */
  772|   868k|        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&g, len, &modinfo->modulus, 0) > 0); /* g > 0 */
  773|   868k|        VERIFY_CHECK(secp256k1_modinv64_mul_cmp_62(&g, len, &modinfo->modulus, 1) < 0);  /* g < modulus */
  774|   868k|    }
  775|       |
  776|       |    /* The loop failed to converge to f=g after 1550 iterations. Return 0, indicating unknown result. */
  777|      0|    return 0;
  778|  74.4k|}
secp256k1.c:secp256k1_modinv64_posdivsteps_62_var:
  325|   942k|static int64_t secp256k1_modinv64_posdivsteps_62_var(int64_t eta, uint64_t f0, uint64_t g0, secp256k1_modinv64_trans2x2 *t, int *jacp) {
  326|       |    /* Transformation matrix; see comments in secp256k1_modinv64_divsteps_62. */
  327|   942k|    uint64_t u = 1, v = 0, q = 0, r = 1;
  328|   942k|    uint64_t f = f0, g = g0, m;
  329|   942k|    uint32_t w;
  330|   942k|    int i = 62, limit, zeros;
  331|   942k|    int jac = *jacp;
  332|       |
  333|  16.6M|    for (;;) {
  334|       |        /* Use a sentinel bit to count zeros only up to i. */
  335|  16.6M|        zeros = secp256k1_ctz64_var(g | (UINT64_MAX << i));
  336|       |        /* Perform zeros divsteps at once; they all just divide g by two. */
  337|  16.6M|        g >>= zeros;
  338|  16.6M|        u <<= zeros;
  339|  16.6M|        v <<= zeros;
  340|  16.6M|        eta -= zeros;
  341|  16.6M|        i -= zeros;
  342|       |        /* Update the bottom bit of jac: when dividing g by an odd power of 2,
  343|       |         * if (f mod 8) is 3 or 5, the Jacobi symbol changes sign. */
  344|  16.6M|        jac ^= (zeros & ((f >> 1) ^ (f >> 2)));
  345|       |        /* We're done once we've done 62 posdivsteps. */
  346|  16.6M|        if (i == 0) break;
  ------------------
  |  Branch (346:13): [True: 942k, False: 15.6M]
  ------------------
  347|  15.6M|        VERIFY_CHECK((f & 1) == 1);
  348|  15.6M|        VERIFY_CHECK((g & 1) == 1);
  349|  15.6M|        VERIFY_CHECK((u * f0 + v * g0) == f << (62 - i));
  350|  15.6M|        VERIFY_CHECK((q * f0 + r * g0) == g << (62 - i));
  351|       |        /* If eta is negative, negate it and replace f,g with g,f. */
  352|  15.6M|        if (eta < 0) {
  ------------------
  |  Branch (352:13): [True: 15.1M, False: 513k]
  ------------------
  353|  15.1M|            uint64_t tmp;
  354|  15.1M|            eta = -eta;
  355|  15.1M|            tmp = f; f = g; g = tmp;
  356|  15.1M|            tmp = u; u = q; q = tmp;
  357|  15.1M|            tmp = v; v = r; r = tmp;
  358|       |            /* Update bottom bit of jac: when swapping f and g, the Jacobi symbol changes sign
  359|       |             * if both f and g are 3 mod 4. */
  360|  15.1M|            jac ^= ((f & g) >> 1);
  361|       |            /* Use a formula to cancel out up to 6 bits of g. Also, no more than i can be cancelled
  362|       |             * out (as we'd be done before that point), and no more than eta+1 can be done as its
  363|       |             * sign will flip again once that happens. */
  364|  15.1M|            limit = ((int)eta + 1) > i ? i : ((int)eta + 1);
  ------------------
  |  Branch (364:21): [True: 291k, False: 14.8M]
  ------------------
  365|  15.1M|            VERIFY_CHECK(limit > 0 && limit <= 62);
  366|       |            /* m is a mask for the bottom min(limit, 6) bits. */
  367|  15.1M|            m = (UINT64_MAX >> (64 - limit)) & 63U;
  368|       |            /* Find what multiple of f must be added to g to cancel its bottom min(limit, 6)
  369|       |             * bits. */
  370|  15.1M|            w = (f * g * (f * f - 2)) & m;
  371|  15.1M|        } else {
  372|       |            /* In this branch, use a simpler formula that only lets us cancel up to 4 bits of g, as
  373|       |             * eta tends to be smaller here. */
  374|   513k|            limit = ((int)eta + 1) > i ? i : ((int)eta + 1);
  ------------------
  |  Branch (374:21): [True: 3.15k, False: 510k]
  ------------------
  375|   513k|            VERIFY_CHECK(limit > 0 && limit <= 62);
  376|       |            /* m is a mask for the bottom min(limit, 4) bits. */
  377|   513k|            m = (UINT64_MAX >> (64 - limit)) & 15U;
  378|       |            /* Find what multiple of f must be added to g to cancel its bottom min(limit, 4)
  379|       |             * bits. */
  380|   513k|            w = f + (((f + 1) & 4) << 1);
  381|   513k|            w = (-w * g) & m;
  382|   513k|        }
  383|  15.6M|        g += f * w;
  384|  15.6M|        q += u * w;
  385|  15.6M|        r += v * w;
  386|  15.6M|        VERIFY_CHECK((g & m) == 0);
  387|  15.6M|    }
  388|       |    /* Return data in t and return value. */
  389|   942k|    t->u = (int64_t)u;
  390|   942k|    t->v = (int64_t)v;
  391|   942k|    t->q = (int64_t)q;
  392|   942k|    t->r = (int64_t)r;
  393|       |
  394|       |    /* The determinant of t must be a power of two. This guarantees that multiplication with t
  395|       |     * does not change the gcd of f and g, apart from adding a power-of-2 factor to it (which
  396|       |     * will be divided out again). As each divstep's individual matrix has determinant 2 or -2,
  397|       |     * the aggregate of 62 of them will have determinant 2^62 or -2^62. */
  398|   942k|    VERIFY_CHECK(secp256k1_modinv64_det_check_pow2(t, 62, 1));
  399|       |
  400|   942k|    *jacp = jac;
  401|   942k|    return eta;
  402|   942k|}

secp256k1_ellswift_create:
  450|  10.3k|int secp256k1_ellswift_create(const secp256k1_context *ctx, unsigned char *ell64, const unsigned char *seckey32, const unsigned char *auxrnd32) {
  451|  10.3k|    secp256k1_ge p;
  452|  10.3k|    secp256k1_fe t;
  453|  10.3k|    secp256k1_sha256 hash;
  454|  10.3k|    secp256k1_scalar seckey_scalar;
  455|  10.3k|    int ret;
  456|  10.3k|    static const unsigned char zero32[32] = {0};
  457|       |
  458|       |    /* Sanity check inputs. */
  459|  10.3k|    VERIFY_CHECK(ctx != NULL);
  460|  10.3k|    ARG_CHECK(ell64 != NULL);
  ------------------
  |  |   45|  10.3k|#define ARG_CHECK(cond) do { \
  |  |   46|  10.3k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  10.3k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 10.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  10.3k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 10.3k]
  |  |  ------------------
  ------------------
  461|  10.3k|    memset(ell64, 0, 64);
  462|  10.3k|    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));
  ------------------
  |  |   45|  10.3k|#define ARG_CHECK(cond) do { \
  |  |   46|  10.3k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  10.3k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 10.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  10.3k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 10.3k]
  |  |  ------------------
  ------------------
  463|  10.3k|    ARG_CHECK(seckey32 != NULL);
  ------------------
  |  |   45|  10.3k|#define ARG_CHECK(cond) do { \
  |  |   46|  10.3k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  10.3k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 10.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  10.3k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 10.3k]
  |  |  ------------------
  ------------------
  464|       |
  465|       |    /* Compute (affine) public key */
  466|  10.3k|    ret = secp256k1_ec_pubkey_create_helper(&ctx->ecmult_gen_ctx, &seckey_scalar, &p, seckey32);
  467|  10.3k|    secp256k1_declassify(ctx, &p, sizeof(p)); /* not constant time in produced pubkey */
  468|  10.3k|    secp256k1_fe_normalize_var(&p.x);
  ------------------
  |  |   80|  10.3k|#  define secp256k1_fe_normalize_var secp256k1_fe_impl_normalize_var
  ------------------
  469|  10.3k|    secp256k1_fe_normalize_var(&p.y);
  ------------------
  |  |   80|  10.3k|#  define secp256k1_fe_normalize_var secp256k1_fe_impl_normalize_var
  ------------------
  470|       |
  471|       |    /* Set up hasher state. The used RNG is H(privkey || "\x00"*32 [|| auxrnd32] || cnt++),
  472|       |     * using BIP340 tagged hash with tag "secp256k1_ellswift_create". */
  473|  10.3k|    secp256k1_ellswift_sha256_init_create(&hash);
  474|  10.3k|    secp256k1_sha256_write(&hash, seckey32, 32);
  475|  10.3k|    secp256k1_sha256_write(&hash, zero32, sizeof(zero32));
  476|  10.3k|    secp256k1_declassify(ctx, &hash, sizeof(hash)); /* private key is hashed now */
  477|  10.3k|    if (auxrnd32) secp256k1_sha256_write(&hash, auxrnd32, 32);
  ------------------
  |  Branch (477:9): [True: 10.3k, False: 0]
  ------------------
  478|       |
  479|       |    /* Compute ElligatorSwift encoding and construct output. */
  480|  10.3k|    secp256k1_ellswift_elligatorswift_var(ell64, &t, &p, &hash); /* puts u in ell64[0..32] */
  481|  10.3k|    secp256k1_fe_get_b32(ell64 + 32, &t); /* puts t in ell64[32..64] */
  ------------------
  |  |   89|  10.3k|#  define secp256k1_fe_get_b32 secp256k1_fe_impl_get_b32
  ------------------
  482|       |
  483|  10.3k|    secp256k1_memczero(ell64, 64, !ret);
  484|  10.3k|    secp256k1_scalar_clear(&seckey_scalar);
  485|       |
  486|  10.3k|    return ret;
  487|  10.3k|}
secp256k1_ellswift_decode:
  489|  2.07k|int secp256k1_ellswift_decode(const secp256k1_context *ctx, secp256k1_pubkey *pubkey, const unsigned char *ell64) {
  490|  2.07k|    secp256k1_fe u, t;
  491|  2.07k|    secp256k1_ge p;
  492|  2.07k|    VERIFY_CHECK(ctx != NULL);
  493|  2.07k|    ARG_CHECK(pubkey != NULL);
  ------------------
  |  |   45|  2.07k|#define ARG_CHECK(cond) do { \
  |  |   46|  2.07k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  2.07k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 2.07k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  2.07k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 2.07k]
  |  |  ------------------
  ------------------
  494|  2.07k|    ARG_CHECK(ell64 != NULL);
  ------------------
  |  |   45|  2.07k|#define ARG_CHECK(cond) do { \
  |  |   46|  2.07k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  2.07k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 2.07k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  2.07k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 2.07k]
  |  |  ------------------
  ------------------
  495|       |
  496|  2.07k|    secp256k1_fe_set_b32_mod(&u, ell64);
  ------------------
  |  |   87|  2.07k|#  define secp256k1_fe_set_b32_mod secp256k1_fe_impl_set_b32_mod
  ------------------
  497|  2.07k|    secp256k1_fe_set_b32_mod(&t, ell64 + 32);
  ------------------
  |  |   87|  2.07k|#  define secp256k1_fe_set_b32_mod secp256k1_fe_impl_set_b32_mod
  ------------------
  498|  2.07k|    secp256k1_fe_normalize_var(&t);
  ------------------
  |  |   80|  2.07k|#  define secp256k1_fe_normalize_var secp256k1_fe_impl_normalize_var
  ------------------
  499|  2.07k|    secp256k1_ellswift_swiftec_var(&p, &u, &t);
  500|  2.07k|    secp256k1_pubkey_save(pubkey, &p);
  501|  2.07k|    return 1;
  502|  2.07k|}
secp256k1_ellswift_xdh:
  551|  9.89k|int secp256k1_ellswift_xdh(const secp256k1_context *ctx, unsigned char *output, const unsigned char *ell_a64, const unsigned char *ell_b64, const unsigned char *seckey32, int party, secp256k1_ellswift_xdh_hash_function hashfp, void *data) {
  552|  9.89k|    int ret = 0;
  553|  9.89k|    int overflow;
  554|  9.89k|    secp256k1_scalar s;
  555|  9.89k|    secp256k1_fe xn, xd, px, u, t;
  556|  9.89k|    unsigned char sx[32];
  557|  9.89k|    const unsigned char* theirs64;
  558|       |
  559|  9.89k|    VERIFY_CHECK(ctx != NULL);
  560|  9.89k|    ARG_CHECK(output != NULL);
  ------------------
  |  |   45|  9.89k|#define ARG_CHECK(cond) do { \
  |  |   46|  9.89k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  9.89k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 9.89k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  9.89k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 9.89k]
  |  |  ------------------
  ------------------
  561|  9.89k|    ARG_CHECK(ell_a64 != NULL);
  ------------------
  |  |   45|  9.89k|#define ARG_CHECK(cond) do { \
  |  |   46|  9.89k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  9.89k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 9.89k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  9.89k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 9.89k]
  |  |  ------------------
  ------------------
  562|  9.89k|    ARG_CHECK(ell_b64 != NULL);
  ------------------
  |  |   45|  9.89k|#define ARG_CHECK(cond) do { \
  |  |   46|  9.89k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  9.89k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 9.89k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  9.89k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 9.89k]
  |  |  ------------------
  ------------------
  563|  9.89k|    ARG_CHECK(seckey32 != NULL);
  ------------------
  |  |   45|  9.89k|#define ARG_CHECK(cond) do { \
  |  |   46|  9.89k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  9.89k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 9.89k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  9.89k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 9.89k]
  |  |  ------------------
  ------------------
  564|  9.89k|    ARG_CHECK(hashfp != NULL);
  ------------------
  |  |   45|  9.89k|#define ARG_CHECK(cond) do { \
  |  |   46|  9.89k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  9.89k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 9.89k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  9.89k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 9.89k]
  |  |  ------------------
  ------------------
  565|       |
  566|       |    /* Load remote public key (as fraction). */
  567|  9.89k|    theirs64 = party ? ell_a64 : ell_b64;
  ------------------
  |  Branch (567:16): [True: 5.19k, False: 4.70k]
  ------------------
  568|  9.89k|    secp256k1_fe_set_b32_mod(&u, theirs64);
  ------------------
  |  |   87|  9.89k|#  define secp256k1_fe_set_b32_mod secp256k1_fe_impl_set_b32_mod
  ------------------
  569|  9.89k|    secp256k1_fe_set_b32_mod(&t, theirs64 + 32);
  ------------------
  |  |   87|  9.89k|#  define secp256k1_fe_set_b32_mod secp256k1_fe_impl_set_b32_mod
  ------------------
  570|  9.89k|    secp256k1_ellswift_xswiftec_frac_var(&xn, &xd, &u, &t);
  571|       |
  572|       |    /* Load private key (using one if invalid). */
  573|  9.89k|    secp256k1_scalar_set_b32(&s, seckey32, &overflow);
  574|  9.89k|    overflow = secp256k1_scalar_is_zero(&s);
  575|  9.89k|    secp256k1_scalar_cmov(&s, &secp256k1_scalar_one, overflow);
  576|       |
  577|       |    /* Compute shared X coordinate. */
  578|  9.89k|    secp256k1_ecmult_const_xonly(&px, &xn, &xd, &s, 1);
  579|  9.89k|    secp256k1_fe_normalize(&px);
  ------------------
  |  |   78|  9.89k|#  define secp256k1_fe_normalize secp256k1_fe_impl_normalize
  ------------------
  580|  9.89k|    secp256k1_fe_get_b32(sx, &px);
  ------------------
  |  |   89|  9.89k|#  define secp256k1_fe_get_b32 secp256k1_fe_impl_get_b32
  ------------------
  581|       |
  582|       |    /* Invoke hasher */
  583|  9.89k|    ret = hashfp(output, sx, ell_a64, ell_b64, data);
  584|       |
  585|  9.89k|    secp256k1_memclear(sx, sizeof(sx));
  586|  9.89k|    secp256k1_fe_clear(&px);
  587|  9.89k|    secp256k1_scalar_clear(&s);
  588|       |
  589|  9.89k|    return !!ret & !overflow;
  590|  9.89k|}
secp256k1.c:secp256k1_ellswift_elligatorswift_var:
  375|  10.3k|static void secp256k1_ellswift_elligatorswift_var(unsigned char *u32, secp256k1_fe *t, const secp256k1_ge *p, const secp256k1_sha256 *hasher) {
  376|  10.3k|    secp256k1_ellswift_xelligatorswift_var(u32, t, &p->x, hasher);
  377|  10.3k|    secp256k1_fe_normalize_var(t);
  ------------------
  |  |   80|  10.3k|#  define secp256k1_fe_normalize_var secp256k1_fe_impl_normalize_var
  ------------------
  378|  10.3k|    if (secp256k1_fe_is_odd(t) != secp256k1_fe_is_odd(&p->y)) {
  ------------------
  |  |   85|  10.3k|#  define secp256k1_fe_is_odd secp256k1_fe_impl_is_odd
  ------------------
                  if (secp256k1_fe_is_odd(t) != secp256k1_fe_is_odd(&p->y)) {
  ------------------
  |  |   85|  10.3k|#  define secp256k1_fe_is_odd secp256k1_fe_impl_is_odd
  ------------------
  |  Branch (378:9): [True: 5.18k, False: 5.19k]
  ------------------
  379|  5.18k|        secp256k1_fe_negate(t, t, 1);
  ------------------
  |  |  211|  5.18k|#define secp256k1_fe_negate(r, a, m) ASSERT_INT_CONST_AND_DO(m, secp256k1_fe_negate_unchecked(r, a, m))
  |  |  ------------------
  |  |  |  |   77|  5.18k|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |   78|  5.18k|    switch(42) { \
  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:9): [True: 0, False: 5.18k]
  |  |  |  |  ------------------
  |  |  |  |   81|      0|            break; \
  |  |  |  |   82|  5.18k|        default: ; \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:9): [True: 5.18k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   83|  5.18k|    } \
  |  |  |  |   84|  5.18k|    stmt; \
  |  |  |  |   85|  5.18k|} while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (85:9): [Folded, False: 5.18k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  380|  5.18k|        secp256k1_fe_normalize_var(t);
  ------------------
  |  |   80|  5.18k|#  define secp256k1_fe_normalize_var secp256k1_fe_impl_normalize_var
  ------------------
  381|  5.18k|    }
  382|  10.3k|}
secp256k1.c:secp256k1_ellswift_xelligatorswift_var:
  333|  10.3k|static void secp256k1_ellswift_xelligatorswift_var(unsigned char *u32, secp256k1_fe *t, const secp256k1_fe *x, const secp256k1_sha256 *hasher) {
  334|       |    /* Pool of 3-bit branch values. */
  335|  10.3k|    unsigned char branch_hash[32];
  336|       |    /* Number of 3-bit values in branch_hash left. */
  337|  10.3k|    int branches_left = 0;
  338|       |    /* Field elements u and branch values are extracted from RNG based on hasher for consecutive
  339|       |     * values of cnt. cnt==0 is first used to populate a pool of 64 4-bit branch values. The 64
  340|       |     * cnt values that follow are used to generate field elements u. cnt==65 (and multiples
  341|       |     * thereof) are used to repopulate the pool and start over, if that were ever necessary.
  342|       |     * On average, 4 iterations are needed. */
  343|  10.3k|    uint32_t cnt = 0;
  344|  37.3k|    while (1) {
  ------------------
  |  Branch (344:12): [True: 37.3k, Folded]
  ------------------
  345|  37.3k|        int branch;
  346|  37.3k|        secp256k1_fe u;
  347|       |        /* If the pool of branch values is empty, populate it. */
  348|  37.3k|        if (branches_left == 0) {
  ------------------
  |  Branch (348:13): [True: 10.3k, False: 26.9k]
  ------------------
  349|  10.3k|            secp256k1_ellswift_prng(branch_hash, hasher, cnt++);
  350|  10.3k|            branches_left = 64;
  351|  10.3k|        }
  352|       |        /* Take a 3-bit branch value from the branch pool (top bit is discarded). */
  353|  37.3k|        --branches_left;
  354|  37.3k|        branch = (branch_hash[branches_left >> 1] >> ((branches_left & 1) << 2)) & 7;
  355|       |        /* Compute a new u value by hashing. */
  356|  37.3k|        secp256k1_ellswift_prng(u32, hasher, cnt++);
  357|       |        /* overflow is not a problem (we prefer uniform u32 over uniform u). */
  358|  37.3k|        secp256k1_fe_set_b32_mod(&u, u32);
  ------------------
  |  |   87|  37.3k|#  define secp256k1_fe_set_b32_mod secp256k1_fe_impl_set_b32_mod
  ------------------
  359|       |        /* Since u is the output of a hash, it should practically never be 0. We could apply the
  360|       |         * u=0 to u=1 correction here too to deal with that case still, but it's such a low
  361|       |         * probability event that we do not bother. */
  362|  37.3k|        VERIFY_CHECK(!secp256k1_fe_normalizes_to_zero_var(&u));
  363|       |
  364|       |        /* Find a remainder t, and return it if found. */
  365|  37.3k|        if (EXPECT(secp256k1_ellswift_xswiftec_inv_var(t, x, &u, branch), 0)) break;
  ------------------
  |  |  136|  37.3k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  ------------------
  |  |  |  Branch (136:21): [True: 10.3k, False: 26.9k]
  |  |  ------------------
  ------------------
  366|  37.3k|    }
  367|  10.3k|}
secp256k1.c:secp256k1_ellswift_prng:
  310|  47.7k|static void secp256k1_ellswift_prng(unsigned char* out32, const secp256k1_sha256 *hasher, uint32_t cnt) {
  311|  47.7k|    secp256k1_sha256 hash = *hasher;
  312|  47.7k|    unsigned char buf4[4];
  313|       |#ifdef VERIFY
  314|       |    size_t blocks = hash.bytes >> 6;
  315|       |#endif
  316|  47.7k|    buf4[0] = cnt;
  317|  47.7k|    buf4[1] = cnt >> 8;
  318|  47.7k|    buf4[2] = cnt >> 16;
  319|  47.7k|    buf4[3] = cnt >> 24;
  320|  47.7k|    secp256k1_sha256_write(&hash, buf4, 4);
  321|  47.7k|    secp256k1_sha256_finalize(&hash, out32);
  322|       |
  323|       |    /* Writing and finalizing together should trigger exactly one SHA256 compression. */
  324|  47.7k|    VERIFY_CHECK(((hash.bytes) >> 6) == (blocks + 1));
  325|  47.7k|}
secp256k1.c:secp256k1_ellswift_xswiftec_inv_var:
  168|  37.3k|static int secp256k1_ellswift_xswiftec_inv_var(secp256k1_fe *t, const secp256k1_fe *x_in, const secp256k1_fe *u_in, int c) {
  169|       |    /* The implemented algorithm is this (all arithmetic, except involving c, is mod p):
  170|       |     *
  171|       |     * - If (c & 2) = 0:
  172|       |     *   - If (-x-u) is a valid X coordinate, fail.
  173|       |     *   - Let s=-(u^3+7)/(u^2+u*x+x^2).
  174|       |     *   - If s is not square, fail.
  175|       |     *   - Let v=x.
  176|       |     * - If (c & 2) = 2:
  177|       |     *   - Let s=x-u.
  178|       |     *   - If s is not square, fail.
  179|       |     *   - Let r=sqrt(-s*(4*(u^3+7)+3*u^2*s)); fail if it doesn't exist.
  180|       |     *   - If (c & 1) = 1 and r = 0, fail.
  181|       |     *   - If s=0, fail.
  182|       |     *   - Let v=(r/s-u)/2.
  183|       |     * - Let w=sqrt(s).
  184|       |     * - If (c & 5) = 0: return -w*(c3*u + v).
  185|       |     * - If (c & 5) = 1: return  w*(c4*u + v).
  186|       |     * - If (c & 5) = 4: return  w*(c3*u + v).
  187|       |     * - If (c & 5) = 5: return -w*(c4*u + v).
  188|       |     */
  189|  37.3k|    secp256k1_fe x = *x_in, u = *u_in, g, v, s, m, r, q;
  190|  37.3k|    int ret;
  191|       |
  192|  37.3k|    secp256k1_fe_normalize_weak(&x);
  ------------------
  |  |   79|  37.3k|#  define secp256k1_fe_normalize_weak secp256k1_fe_impl_normalize_weak
  ------------------
  193|  37.3k|    secp256k1_fe_normalize_weak(&u);
  ------------------
  |  |   79|  37.3k|#  define secp256k1_fe_normalize_weak secp256k1_fe_impl_normalize_weak
  ------------------
  194|       |
  195|  37.3k|    VERIFY_CHECK(c >= 0 && c < 8);
  196|  37.3k|    VERIFY_CHECK(secp256k1_ge_x_on_curve_var(&x));
  197|       |
  198|  37.3k|    if (!(c & 2)) {
  ------------------
  |  Branch (198:9): [True: 18.8k, False: 18.4k]
  ------------------
  199|       |        /* c is in {0, 1, 4, 5}. In this case we look for an inverse under the x1 (if c=0 or
  200|       |         * c=4) formula, or x2 (if c=1 or c=5) formula. */
  201|       |
  202|       |        /* If -u-x is a valid X coordinate, fail. This would yield an encoding that roundtrips
  203|       |         * back under the x3 formula instead (which has priority over x1 and x2, so the decoding
  204|       |         * would not match x). */
  205|  18.8k|        m = x;                                          /* m = x */
  206|  18.8k|        secp256k1_fe_add(&m, &u);                       /* m = u+x */
  ------------------
  |  |   92|  18.8k|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  207|  18.8k|        secp256k1_fe_negate(&m, &m, 2);                 /* m = -u-x */
  ------------------
  |  |  211|  18.8k|#define secp256k1_fe_negate(r, a, m) ASSERT_INT_CONST_AND_DO(m, secp256k1_fe_negate_unchecked(r, a, m))
  |  |  ------------------
  |  |  |  |   77|  18.8k|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |   78|  18.8k|    switch(42) { \
  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:9): [True: 0, False: 18.8k]
  |  |  |  |  ------------------
  |  |  |  |   81|      0|            break; \
  |  |  |  |   82|  18.8k|        default: ; \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:9): [True: 18.8k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   83|  18.8k|    } \
  |  |  |  |   84|  18.8k|    stmt; \
  |  |  |  |   85|  18.8k|} while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (85:9): [Folded, False: 18.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  208|       |        /* Test if (-u-x) is a valid X coordinate. If so, fail. */
  209|  18.8k|        if (secp256k1_ge_x_on_curve_var(&m)) return 0;
  ------------------
  |  Branch (209:13): [True: 9.25k, False: 9.62k]
  ------------------
  210|       |
  211|       |        /* Let s = -(u^3 + 7)/(u^2 + u*x + x^2) [first part] */
  212|  9.62k|        secp256k1_fe_sqr(&s, &m);                       /* s = (u+x)^2 */
  ------------------
  |  |   94|  9.62k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  213|  9.62k|        secp256k1_fe_negate(&s, &s, 1);                 /* s = -(u+x)^2 */
  ------------------
  |  |  211|  9.62k|#define secp256k1_fe_negate(r, a, m) ASSERT_INT_CONST_AND_DO(m, secp256k1_fe_negate_unchecked(r, a, m))
  |  |  ------------------
  |  |  |  |   77|  9.62k|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |   78|  9.62k|    switch(42) { \
  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:9): [True: 0, False: 9.62k]
  |  |  |  |  ------------------
  |  |  |  |   81|      0|            break; \
  |  |  |  |   82|  9.62k|        default: ; \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:9): [True: 9.62k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   83|  9.62k|    } \
  |  |  |  |   84|  9.62k|    stmt; \
  |  |  |  |   85|  9.62k|} while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (85:9): [Folded, False: 9.62k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  214|  9.62k|        secp256k1_fe_mul(&m, &u, &x);                   /* m = u*x */
  ------------------
  |  |   93|  9.62k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  215|  9.62k|        secp256k1_fe_add(&s, &m);                       /* s = -(u^2 + u*x + x^2) */
  ------------------
  |  |   92|  9.62k|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  216|       |
  217|       |        /* Note that at this point, s = 0 is impossible. If it were the case:
  218|       |         *             s = -(u^2 + u*x + x^2) = 0
  219|       |         * =>                 u^2 + u*x + x^2 = 0
  220|       |         * =>   (u + 2*x) * (u^2 + u*x + x^2) = 0
  221|       |         * => 2*x^3 + 3*x^2*u + 3*x*u^2 + u^3 = 0
  222|       |         * =>                 (x + u)^3 + x^3 = 0
  223|       |         * =>                             x^3 = -(x + u)^3
  224|       |         * =>                         x^3 + B = (-u - x)^3 + B
  225|       |         *
  226|       |         * However, we know x^3 + B is square (because x is on the curve) and
  227|       |         * that (-u-x)^3 + B is not square (the secp256k1_ge_x_on_curve_var(&m)
  228|       |         * test above would have failed). This is a contradiction, and thus the
  229|       |         * assumption s=0 is false. */
  230|  9.62k|        VERIFY_CHECK(!secp256k1_fe_normalizes_to_zero_var(&s));
  231|       |
  232|       |        /* If s is not square, fail. We have not fully computed s yet, but s is square iff
  233|       |         * -(u^3+7)*(u^2+u*x+x^2) is square (because a/b is square iff a*b is square and b is
  234|       |         * nonzero). */
  235|  9.62k|        secp256k1_fe_sqr(&g, &u);                       /* g = u^2 */
  ------------------
  |  |   94|  9.62k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  236|  9.62k|        secp256k1_fe_mul(&g, &g, &u);                   /* g = u^3 */
  ------------------
  |  |   93|  9.62k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  237|  9.62k|        secp256k1_fe_add_int(&g, SECP256K1_B);          /* g = u^3+7 */
  ------------------
  |  |  102|  9.62k|#  define secp256k1_fe_add_int secp256k1_fe_impl_add_int
  ------------------
                      secp256k1_fe_add_int(&g, SECP256K1_B);          /* g = u^3+7 */
  ------------------
  |  |   73|  9.62k|#define SECP256K1_B 7
  ------------------
  238|  9.62k|        secp256k1_fe_mul(&m, &s, &g);                   /* m = -(u^3 + 7)*(u^2 + u*x + x^2) */
  ------------------
  |  |   93|  9.62k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  239|  9.62k|        if (!secp256k1_fe_is_square_var(&m)) return 0;
  ------------------
  |  |  103|  9.62k|#  define secp256k1_fe_is_square_var secp256k1_fe_impl_is_square_var
  ------------------
  |  Branch (239:13): [True: 4.54k, False: 5.08k]
  ------------------
  240|       |
  241|       |        /* Let s = -(u^3 + 7)/(u^2 + u*x + x^2) [second part] */
  242|  5.08k|        secp256k1_fe_inv_var(&s, &s);                   /* s = -1/(u^2 + u*x + x^2) [no div by 0] */
  ------------------
  |  |   99|  5.08k|#  define secp256k1_fe_inv_var secp256k1_fe_impl_inv_var
  ------------------
  243|  5.08k|        secp256k1_fe_mul(&s, &s, &g);                   /* s = -(u^3 + 7)/(u^2 + u*x + x^2) */
  ------------------
  |  |   93|  5.08k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  244|       |
  245|       |        /* Let v = x. */
  246|  5.08k|        v = x;
  247|  18.4k|    } else {
  248|       |        /* c is in {2, 3, 6, 7}. In this case we look for an inverse under the x3 formula. */
  249|       |
  250|       |        /* Let s = x-u. */
  251|  18.4k|        secp256k1_fe_negate(&m, &u, 1);                 /* m = -u */
  ------------------
  |  |  211|  18.4k|#define secp256k1_fe_negate(r, a, m) ASSERT_INT_CONST_AND_DO(m, secp256k1_fe_negate_unchecked(r, a, m))
  |  |  ------------------
  |  |  |  |   77|  18.4k|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |   78|  18.4k|    switch(42) { \
  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:9): [True: 0, False: 18.4k]
  |  |  |  |  ------------------
  |  |  |  |   81|      0|            break; \
  |  |  |  |   82|  18.4k|        default: ; \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:9): [True: 18.4k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   83|  18.4k|    } \
  |  |  |  |   84|  18.4k|    stmt; \
  |  |  |  |   85|  18.4k|} while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (85:9): [Folded, False: 18.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  252|  18.4k|        s = m;                                          /* s = -u */
  253|  18.4k|        secp256k1_fe_add(&s, &x);                       /* s = x-u */
  ------------------
  |  |   92|  18.4k|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  254|       |
  255|       |        /* If s is not square, fail. */
  256|  18.4k|        if (!secp256k1_fe_is_square_var(&s)) return 0;
  ------------------
  |  |  103|  18.4k|#  define secp256k1_fe_is_square_var secp256k1_fe_impl_is_square_var
  ------------------
  |  Branch (256:13): [True: 8.75k, False: 9.72k]
  ------------------
  257|       |
  258|       |        /* Let r = sqrt(-s*(4*(u^3+7)+3*u^2*s)); fail if it doesn't exist. */
  259|  9.72k|        secp256k1_fe_sqr(&g, &u);                       /* g = u^2 */
  ------------------
  |  |   94|  9.72k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  260|  9.72k|        secp256k1_fe_mul(&q, &s, &g);                   /* q = s*u^2 */
  ------------------
  |  |   93|  9.72k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  261|  9.72k|        secp256k1_fe_mul_int(&q, 3);                    /* q = 3*s*u^2 */
  ------------------
  |  |  233|  9.72k|#define secp256k1_fe_mul_int(r, a) ASSERT_INT_CONST_AND_DO(a, secp256k1_fe_mul_int_unchecked(r, a))
  |  |  ------------------
  |  |  |  |   77|  9.72k|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |   78|  9.72k|    switch(42) { \
  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:9): [True: 0, False: 9.72k]
  |  |  |  |  ------------------
  |  |  |  |   81|      0|            break; \
  |  |  |  |   82|  9.72k|        default: ; \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:9): [True: 9.72k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   83|  9.72k|    } \
  |  |  |  |   84|  9.72k|    stmt; \
  |  |  |  |   85|  9.72k|} while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (85:9): [Folded, False: 9.72k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  262|  9.72k|        secp256k1_fe_mul(&g, &g, &u);                   /* g = u^3 */
  ------------------
  |  |   93|  9.72k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  263|  9.72k|        secp256k1_fe_mul_int(&g, 4);                    /* g = 4*u^3 */
  ------------------
  |  |  233|  9.72k|#define secp256k1_fe_mul_int(r, a) ASSERT_INT_CONST_AND_DO(a, secp256k1_fe_mul_int_unchecked(r, a))
  |  |  ------------------
  |  |  |  |   77|  9.72k|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |   78|  9.72k|    switch(42) { \
  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:9): [True: 0, False: 9.72k]
  |  |  |  |  ------------------
  |  |  |  |   81|      0|            break; \
  |  |  |  |   82|  9.72k|        default: ; \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:9): [True: 9.72k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   83|  9.72k|    } \
  |  |  |  |   84|  9.72k|    stmt; \
  |  |  |  |   85|  9.72k|} while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (85:9): [Folded, False: 9.72k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  264|  9.72k|        secp256k1_fe_add_int(&g, 4 * SECP256K1_B);      /* g = 4*(u^3+7) */
  ------------------
  |  |  102|  9.72k|#  define secp256k1_fe_add_int secp256k1_fe_impl_add_int
  ------------------
                      secp256k1_fe_add_int(&g, 4 * SECP256K1_B);      /* g = 4*(u^3+7) */
  ------------------
  |  |   73|  9.72k|#define SECP256K1_B 7
  ------------------
  265|  9.72k|        secp256k1_fe_add(&q, &g);                       /* q = 4*(u^3+7)+3*s*u^2 */
  ------------------
  |  |   92|  9.72k|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  266|  9.72k|        secp256k1_fe_mul(&q, &q, &s);                   /* q = s*(4*(u^3+7)+3*u^2*s) */
  ------------------
  |  |   93|  9.72k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  267|  9.72k|        secp256k1_fe_negate(&q, &q, 1);                 /* q = -s*(4*(u^3+7)+3*u^2*s) */
  ------------------
  |  |  211|  9.72k|#define secp256k1_fe_negate(r, a, m) ASSERT_INT_CONST_AND_DO(m, secp256k1_fe_negate_unchecked(r, a, m))
  |  |  ------------------
  |  |  |  |   77|  9.72k|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |   78|  9.72k|    switch(42) { \
  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:9): [True: 0, False: 9.72k]
  |  |  |  |  ------------------
  |  |  |  |   81|      0|            break; \
  |  |  |  |   82|  9.72k|        default: ; \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:9): [True: 9.72k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   83|  9.72k|    } \
  |  |  |  |   84|  9.72k|    stmt; \
  |  |  |  |   85|  9.72k|} while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (85:9): [Folded, False: 9.72k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  268|  9.72k|        if (!secp256k1_fe_is_square_var(&q)) return 0;
  ------------------
  |  |  103|  9.72k|#  define secp256k1_fe_is_square_var secp256k1_fe_impl_is_square_var
  ------------------
  |  Branch (268:13): [True: 4.42k, False: 5.30k]
  ------------------
  269|  5.30k|        ret = secp256k1_fe_sqrt(&r, &q);                /* r = sqrt(-s*(4*(u^3+7)+3*u^2*s)) */
  270|       |#ifdef VERIFY
  271|       |        VERIFY_CHECK(ret);
  272|       |#else
  273|  5.30k|        (void)ret;
  274|  5.30k|#endif
  275|       |
  276|       |        /* If (c & 1) = 1 and r = 0, fail. */
  277|  5.30k|        if (EXPECT((c & 1) && secp256k1_fe_normalizes_to_zero_var(&r), 0)) return 0;
  ------------------
  |  |  136|  7.85k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  ------------------
  |  |  |  Branch (136:21): [True: 0, False: 5.30k]
  |  |  |  Branch (136:39): [True: 2.55k, False: 2.74k]
  |  |  |  Branch (136:39): [True: 0, False: 2.55k]
  |  |  ------------------
  ------------------
  278|       |
  279|       |        /* If s = 0, fail. */
  280|  5.30k|        if (EXPECT(secp256k1_fe_normalizes_to_zero_var(&s), 0)) return 0;
  ------------------
  |  |  136|  5.30k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  ------------------
  |  |  |  Branch (136:21): [True: 0, False: 5.30k]
  |  |  ------------------
  ------------------
  281|       |
  282|       |        /* Let v = (r/s-u)/2. */
  283|  5.30k|        secp256k1_fe_inv_var(&v, &s);                   /* v = 1/s [no div by 0] */
  ------------------
  |  |   99|  5.30k|#  define secp256k1_fe_inv_var secp256k1_fe_impl_inv_var
  ------------------
  284|  5.30k|        secp256k1_fe_mul(&v, &v, &r);                   /* v = r/s */
  ------------------
  |  |   93|  5.30k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  285|  5.30k|        secp256k1_fe_add(&v, &m);                       /* v = r/s-u */
  ------------------
  |  |   92|  5.30k|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  286|  5.30k|        secp256k1_fe_half(&v);                          /* v = (r/s-u)/2 */
  ------------------
  |  |  101|  5.30k|#  define secp256k1_fe_half secp256k1_fe_impl_half
  ------------------
  287|  5.30k|    }
  288|       |
  289|       |    /* Let w = sqrt(s). */
  290|  10.3k|    ret = secp256k1_fe_sqrt(&m, &s);                    /* m = sqrt(s) = w */
  291|  10.3k|    VERIFY_CHECK(ret);
  292|       |
  293|       |    /* Return logic. */
  294|  10.3k|    if ((c & 5) == 0 || (c & 5) == 5) {
  ------------------
  |  Branch (294:9): [True: 2.57k, False: 7.80k]
  |  Branch (294:25): [True: 2.51k, False: 5.29k]
  ------------------
  295|  5.08k|        secp256k1_fe_negate(&m, &m, 1);                 /* m = -w */
  ------------------
  |  |  211|  5.08k|#define secp256k1_fe_negate(r, a, m) ASSERT_INT_CONST_AND_DO(m, secp256k1_fe_negate_unchecked(r, a, m))
  |  |  ------------------
  |  |  |  |   77|  5.08k|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |   78|  5.08k|    switch(42) { \
  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:9): [True: 0, False: 5.08k]
  |  |  |  |  ------------------
  |  |  |  |   81|      0|            break; \
  |  |  |  |   82|  5.08k|        default: ; \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:9): [True: 5.08k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   83|  5.08k|    } \
  |  |  |  |   84|  5.08k|    stmt; \
  |  |  |  |   85|  5.08k|} while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (85:9): [Folded, False: 5.08k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  296|  5.08k|    }
  297|       |    /* Now m = {-w if c&5=0 or c&5=5; w otherwise}. */
  298|  10.3k|    secp256k1_fe_mul(&u, &u, c&1 ? &secp256k1_ellswift_c4 : &secp256k1_ellswift_c3);
  ------------------
  |  |   93|  10.3k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  |  Branch (298:30): [True: 5.09k, False: 5.28k]
  ------------------
  299|       |    /* u = {c4 if c&1=1; c3 otherwise}*u */
  300|  10.3k|    secp256k1_fe_add(&u, &v);                           /* u = {c4 if c&1=1; c3 otherwise}*u + v */
  ------------------
  |  |   92|  10.3k|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  301|  10.3k|    secp256k1_fe_mul(t, &m, &u);
  ------------------
  |  |   93|  10.3k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  302|  10.3k|    return 1;
  303|  10.3k|}
secp256k1.c:secp256k1_ellswift_sha256_init_create:
  436|  10.3k|static void secp256k1_ellswift_sha256_init_create(secp256k1_sha256* hash) {
  437|  10.3k|    secp256k1_sha256_initialize(hash);
  438|  10.3k|    hash->s[0] = 0xd29e1bf5ul;
  439|  10.3k|    hash->s[1] = 0xf7025f42ul;
  440|  10.3k|    hash->s[2] = 0x9b024773ul;
  441|  10.3k|    hash->s[3] = 0x094cb7d5ul;
  442|  10.3k|    hash->s[4] = 0xe59ed789ul;
  443|  10.3k|    hash->s[5] = 0x03bc9786ul;
  444|  10.3k|    hash->s[6] = 0x68335b35ul;
  445|  10.3k|    hash->s[7] = 0x4e363b53ul;
  446|       |
  447|  10.3k|    hash->bytes = 64;
  448|  10.3k|}
secp256k1.c:secp256k1_ellswift_swiftec_var:
  143|  2.07k|static void secp256k1_ellswift_swiftec_var(secp256k1_ge *p, const secp256k1_fe *u, const secp256k1_fe *t) {
  144|  2.07k|    secp256k1_fe x;
  145|  2.07k|    secp256k1_ellswift_xswiftec_var(&x, u, t);
  146|  2.07k|    secp256k1_ge_set_xo_var(p, &x, secp256k1_fe_is_odd(t));
  ------------------
  |  |   85|  2.07k|#  define secp256k1_fe_is_odd secp256k1_fe_impl_is_odd
  ------------------
  147|  2.07k|}
secp256k1.c:secp256k1_ellswift_xswiftec_var:
  135|  2.07k|static void secp256k1_ellswift_xswiftec_var(secp256k1_fe *x, const secp256k1_fe *u, const secp256k1_fe *t) {
  136|  2.07k|    secp256k1_fe xn, xd;
  137|  2.07k|    secp256k1_ellswift_xswiftec_frac_var(&xn, &xd, u, t);
  138|  2.07k|    secp256k1_fe_inv_var(&xd, &xd);
  ------------------
  |  |   99|  2.07k|#  define secp256k1_fe_inv_var secp256k1_fe_impl_inv_var
  ------------------
  139|  2.07k|    secp256k1_fe_mul(x, &xn, &xd);
  ------------------
  |  |   93|  2.07k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  140|  2.07k|}
secp256k1.c:ellswift_xdh_hash_function_bip324:
  533|  9.89k|static int ellswift_xdh_hash_function_bip324(unsigned char* output, const unsigned char *x32, const unsigned char *ell_a64, const unsigned char *ell_b64, void *data) {
  534|  9.89k|    secp256k1_sha256 sha;
  535|       |
  536|  9.89k|    (void)data;
  537|       |
  538|  9.89k|    secp256k1_ellswift_sha256_init_bip324(&sha);
  539|  9.89k|    secp256k1_sha256_write(&sha, ell_a64, 64);
  540|  9.89k|    secp256k1_sha256_write(&sha, ell_b64, 64);
  541|  9.89k|    secp256k1_sha256_write(&sha, x32, 32);
  542|  9.89k|    secp256k1_sha256_finalize(&sha, output);
  543|  9.89k|    secp256k1_sha256_clear(&sha);
  544|       |
  545|  9.89k|    return 1;
  546|  9.89k|}
secp256k1.c:secp256k1_ellswift_sha256_init_bip324:
  519|  9.89k|static void secp256k1_ellswift_sha256_init_bip324(secp256k1_sha256* hash) {
  520|  9.89k|    secp256k1_sha256_initialize(hash);
  521|  9.89k|    hash->s[0] = 0x8c12d730ul;
  522|  9.89k|    hash->s[1] = 0x827bd392ul;
  523|  9.89k|    hash->s[2] = 0x9e4fb2eeul;
  524|  9.89k|    hash->s[3] = 0x207b373eul;
  525|  9.89k|    hash->s[4] = 0x2292bd7aul;
  526|  9.89k|    hash->s[5] = 0xaa5441bcul;
  527|  9.89k|    hash->s[6] = 0x15c3779ful;
  528|  9.89k|    hash->s[7] = 0xcfb52549ul;
  529|       |
  530|  9.89k|    hash->bytes = 64;
  531|  9.89k|}
secp256k1.c:secp256k1_ellswift_xswiftec_frac_var:
   24|  11.9k|static void secp256k1_ellswift_xswiftec_frac_var(secp256k1_fe *xn, secp256k1_fe *xd, const secp256k1_fe *u, const secp256k1_fe *t) {
   25|       |    /* The implemented algorithm is the following (all operations in GF(p)):
   26|       |     *
   27|       |     * - Let c0 = sqrt(-3) = 0xa2d2ba93507f1df233770c2a797962cc61f6d15da14ecd47d8d27ae1cd5f852.
   28|       |     * - If u = 0, set u = 1.
   29|       |     * - If t = 0, set t = 1.
   30|       |     * - If u^3+7+t^2 = 0, set t = 2*t.
   31|       |     * - Let X = (u^3+7-t^2)/(2*t).
   32|       |     * - Let Y = (X+t)/(c0*u).
   33|       |     * - If x3 = u+4*Y^2 is a valid x coordinate, return it.
   34|       |     * - If x2 = (-X/Y-u)/2 is a valid x coordinate, return it.
   35|       |     * - Return x1 = (X/Y-u)/2 (which is now guaranteed to be a valid x coordinate).
   36|       |     *
   37|       |     * Introducing s=t^2, g=u^3+7, and simplifying x1=-(x2+u) we get:
   38|       |     *
   39|       |     * - Let c0 = ...
   40|       |     * - If u = 0, set u = 1.
   41|       |     * - If t = 0, set t = 1.
   42|       |     * - Let s = t^2
   43|       |     * - Let g = u^3+7
   44|       |     * - If g+s = 0, set t = 2*t, s = 4*s
   45|       |     * - Let X = (g-s)/(2*t).
   46|       |     * - Let Y = (X+t)/(c0*u) = (g+s)/(2*c0*t*u).
   47|       |     * - If x3 = u+4*Y^2 is a valid x coordinate, return it.
   48|       |     * - If x2 = (-X/Y-u)/2 is a valid x coordinate, return it.
   49|       |     * - Return x1 = -(x2+u).
   50|       |     *
   51|       |     * Now substitute Y^2 = -(g+s)^2/(12*s*u^2) and X/Y = c0*u*(g-s)/(g+s). This
   52|       |     * means X and Y do not need to be evaluated explicitly anymore.
   53|       |     *
   54|       |     * - ...
   55|       |     * - If g+s = 0, set s = 4*s.
   56|       |     * - If x3 = u-(g+s)^2/(3*s*u^2) is a valid x coordinate, return it.
   57|       |     * - If x2 = (-c0*u*(g-s)/(g+s)-u)/2 is a valid x coordinate, return it.
   58|       |     * - Return x1 = -(x2+u).
   59|       |     *
   60|       |     * Simplifying x2 using 2 additional constants:
   61|       |     *
   62|       |     * - Let c1 = (c0-1)/2 = 0x851695d49a83f8ef919bb86153cbcb16630fb68aed0a766a3ec693d68e6afa40.
   63|       |     * - Let c2 = (-c0-1)/2 = 0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee.
   64|       |     * - ...
   65|       |     * - If x2 = u*(c1*s+c2*g)/(g+s) is a valid x coordinate, return it.
   66|       |     * - ...
   67|       |     *
   68|       |     * Writing x3 as a fraction:
   69|       |     *
   70|       |     * - ...
   71|       |     * - If x3 = (3*s*u^3-(g+s)^2)/(3*s*u^2) ...
   72|       |     * - ...
   73|       |
   74|       |     * Overall, we get:
   75|       |     *
   76|       |     * - Let c1 = 0x851695d49a83f8ef919bb86153cbcb16630fb68aed0a766a3ec693d68e6afa40.
   77|       |     * - Let c2 = 0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee.
   78|       |     * - If u = 0, set u = 1.
   79|       |     * - If t = 0, set s = 1, else set s = t^2.
   80|       |     * - Let g = u^3+7.
   81|       |     * - If g+s = 0, set s = 4*s.
   82|       |     * - If x3 = (3*s*u^3-(g+s)^2)/(3*s*u^2) is a valid x coordinate, return it.
   83|       |     * - If x2 = u*(c1*s+c2*g)/(g+s) is a valid x coordinate, return it.
   84|       |     * - Return x1 = -(x2+u).
   85|       |     */
   86|  11.9k|    secp256k1_fe u1, s, g, p, d, n, l;
   87|  11.9k|    u1 = *u;
   88|  11.9k|    if (EXPECT(secp256k1_fe_normalizes_to_zero_var(&u1), 0)) u1 = secp256k1_fe_one;
  ------------------
  |  |  136|  11.9k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  ------------------
  |  |  |  Branch (136:21): [True: 0, False: 11.9k]
  |  |  ------------------
  ------------------
   89|  11.9k|    secp256k1_fe_sqr(&s, t);
  ------------------
  |  |   94|  11.9k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
   90|  11.9k|    if (EXPECT(secp256k1_fe_normalizes_to_zero_var(t), 0)) s = secp256k1_fe_one;
  ------------------
  |  |  136|  11.9k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  ------------------
  |  |  |  Branch (136:21): [True: 0, False: 11.9k]
  |  |  ------------------
  ------------------
   91|  11.9k|    secp256k1_fe_sqr(&l, &u1);                                   /* l = u^2 */
  ------------------
  |  |   94|  11.9k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
   92|  11.9k|    secp256k1_fe_mul(&g, &l, &u1);                               /* g = u^3 */
  ------------------
  |  |   93|  11.9k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
   93|  11.9k|    secp256k1_fe_add_int(&g, SECP256K1_B);                       /* g = u^3 + 7 */
  ------------------
  |  |  102|  11.9k|#  define secp256k1_fe_add_int secp256k1_fe_impl_add_int
  ------------------
                  secp256k1_fe_add_int(&g, SECP256K1_B);                       /* g = u^3 + 7 */
  ------------------
  |  |   73|  11.9k|#define SECP256K1_B 7
  ------------------
   94|  11.9k|    p = g;                                                       /* p = g */
   95|  11.9k|    secp256k1_fe_add(&p, &s);                                    /* p = g+s */
  ------------------
  |  |   92|  11.9k|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
   96|  11.9k|    if (EXPECT(secp256k1_fe_normalizes_to_zero_var(&p), 0)) {
  ------------------
  |  |  136|  11.9k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  ------------------
  |  |  |  Branch (136:21): [True: 0, False: 11.9k]
  |  |  ------------------
  ------------------
   97|      0|        secp256k1_fe_mul_int(&s, 4);
  ------------------
  |  |  233|      0|#define secp256k1_fe_mul_int(r, a) ASSERT_INT_CONST_AND_DO(a, secp256k1_fe_mul_int_unchecked(r, a))
  |  |  ------------------
  |  |  |  |   77|      0|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |   78|      0|    switch(42) { \
  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:9): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   81|      0|            break; \
  |  |  |  |   82|      0|        default: ; \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:9): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   83|      0|    } \
  |  |  |  |   84|      0|    stmt; \
  |  |  |  |   85|      0|} while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (85:9): [Folded, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   98|       |        /* Recompute p = g+s */
   99|      0|        p = g;                                                   /* p = g */
  100|      0|        secp256k1_fe_add(&p, &s);                                /* p = g+s */
  ------------------
  |  |   92|      0|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  101|      0|    }
  102|  11.9k|    secp256k1_fe_mul(&d, &s, &l);                                /* d = s*u^2 */
  ------------------
  |  |   93|  11.9k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  103|  11.9k|    secp256k1_fe_mul_int(&d, 3);                                 /* d = 3*s*u^2 */
  ------------------
  |  |  233|  11.9k|#define secp256k1_fe_mul_int(r, a) ASSERT_INT_CONST_AND_DO(a, secp256k1_fe_mul_int_unchecked(r, a))
  |  |  ------------------
  |  |  |  |   77|  11.9k|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |   78|  11.9k|    switch(42) { \
  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:9): [True: 0, False: 11.9k]
  |  |  |  |  ------------------
  |  |  |  |   81|      0|            break; \
  |  |  |  |   82|  11.9k|        default: ; \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:9): [True: 11.9k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   83|  11.9k|    } \
  |  |  |  |   84|  11.9k|    stmt; \
  |  |  |  |   85|  11.9k|} while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (85:9): [Folded, False: 11.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|  11.9k|    secp256k1_fe_sqr(&l, &p);                                    /* l = (g+s)^2 */
  ------------------
  |  |   94|  11.9k|#  define secp256k1_fe_sqr secp256k1_fe_impl_sqr
  ------------------
  105|  11.9k|    secp256k1_fe_negate(&l, &l, 1);                              /* l = -(g+s)^2 */
  ------------------
  |  |  211|  11.9k|#define secp256k1_fe_negate(r, a, m) ASSERT_INT_CONST_AND_DO(m, secp256k1_fe_negate_unchecked(r, a, m))
  |  |  ------------------
  |  |  |  |   77|  11.9k|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |   78|  11.9k|    switch(42) { \
  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:9): [True: 0, False: 11.9k]
  |  |  |  |  ------------------
  |  |  |  |   81|      0|            break; \
  |  |  |  |   82|  11.9k|        default: ; \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:9): [True: 11.9k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   83|  11.9k|    } \
  |  |  |  |   84|  11.9k|    stmt; \
  |  |  |  |   85|  11.9k|} while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (85:9): [Folded, False: 11.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  106|  11.9k|    secp256k1_fe_mul(&n, &d, &u1);                               /* n = 3*s*u^3 */
  ------------------
  |  |   93|  11.9k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  107|  11.9k|    secp256k1_fe_add(&n, &l);                                    /* n = 3*s*u^3-(g+s)^2 */
  ------------------
  |  |   92|  11.9k|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  108|  11.9k|    if (secp256k1_ge_x_frac_on_curve_var(&n, &d)) {
  ------------------
  |  Branch (108:9): [True: 6.21k, False: 5.75k]
  ------------------
  109|       |        /* Return x3 = n/d = (3*s*u^3-(g+s)^2)/(3*s*u^2) */
  110|  6.21k|        *xn = n;
  111|  6.21k|        *xd = d;
  112|  6.21k|        return;
  113|  6.21k|    }
  114|  5.75k|    *xd = p;
  115|  5.75k|    secp256k1_fe_mul(&l, &secp256k1_ellswift_c1, &s);            /* l = c1*s */
  ------------------
  |  |   93|  5.75k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  116|  5.75k|    secp256k1_fe_mul(&n, &secp256k1_ellswift_c2, &g);            /* n = c2*g */
  ------------------
  |  |   93|  5.75k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  117|  5.75k|    secp256k1_fe_add(&n, &l);                                    /* n = c1*s+c2*g */
  ------------------
  |  |   92|  5.75k|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  118|  5.75k|    secp256k1_fe_mul(&n, &n, &u1);                               /* n = u*(c1*s+c2*g) */
  ------------------
  |  |   93|  5.75k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  119|       |    /* Possible optimization: in the invocation below, p^2 = (g+s)^2 is computed,
  120|       |     * which we already have computed above. This could be deduplicated. */
  121|  5.75k|    if (secp256k1_ge_x_frac_on_curve_var(&n, &p)) {
  ------------------
  |  Branch (121:9): [True: 2.86k, False: 2.89k]
  ------------------
  122|       |        /* Return x2 = n/p = u*(c1*s+c2*g)/(g+s) */
  123|  2.86k|        *xn = n;
  124|  2.86k|        return;
  125|  2.86k|    }
  126|  2.89k|    secp256k1_fe_mul(&l, &p, &u1);                               /* l = u*(g+s) */
  ------------------
  |  |   93|  2.89k|#  define secp256k1_fe_mul secp256k1_fe_impl_mul
  ------------------
  127|  2.89k|    secp256k1_fe_add(&n, &l);                                    /* n = u*(c1*s+c2*g)+u*(g+s) */
  ------------------
  |  |   92|  2.89k|#  define secp256k1_fe_add secp256k1_fe_impl_add
  ------------------
  128|  2.89k|    secp256k1_fe_negate(xn, &n, 2);                              /* n = -u*(c1*s+c2*g)-u*(g+s) */
  ------------------
  |  |  211|  2.89k|#define secp256k1_fe_negate(r, a, m) ASSERT_INT_CONST_AND_DO(m, secp256k1_fe_negate_unchecked(r, a, m))
  |  |  ------------------
  |  |  |  |   77|  2.89k|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |   78|  2.89k|    switch(42) { \
  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:9): [True: 0, False: 2.89k]
  |  |  |  |  ------------------
  |  |  |  |   81|      0|            break; \
  |  |  |  |   82|  2.89k|        default: ; \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:9): [True: 2.89k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   83|  2.89k|    } \
  |  |  |  |   84|  2.89k|    stmt; \
  |  |  |  |   85|  2.89k|} while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (85:9): [Folded, False: 2.89k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  129|       |
  130|  2.89k|    VERIFY_CHECK(secp256k1_ge_x_frac_on_curve_var(xn, &p));
  131|       |    /* Return x3 = n/p = -(u*(c1*s+c2*g)/(g+s)+u) */
  132|  2.89k|}

secp256k1_xonly_pubkey_parse:
   22|  3.10k|int secp256k1_xonly_pubkey_parse(const secp256k1_context* ctx, secp256k1_xonly_pubkey *pubkey, const unsigned char *input32) {
   23|  3.10k|    secp256k1_ge pk;
   24|  3.10k|    secp256k1_fe x;
   25|       |
   26|  3.10k|    VERIFY_CHECK(ctx != NULL);
   27|  3.10k|    ARG_CHECK(pubkey != NULL);
  ------------------
  |  |   45|  3.10k|#define ARG_CHECK(cond) do { \
  |  |   46|  3.10k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  3.10k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 3.10k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  3.10k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 3.10k]
  |  |  ------------------
  ------------------
   28|  3.10k|    memset(pubkey, 0, sizeof(*pubkey));
   29|  3.10k|    ARG_CHECK(input32 != NULL);
  ------------------
  |  |   45|  3.10k|#define ARG_CHECK(cond) do { \
  |  |   46|  3.10k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  3.10k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 3.10k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  3.10k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 3.10k]
  |  |  ------------------
  ------------------
   30|       |
   31|  3.10k|    if (!secp256k1_fe_set_b32_limit(&x, input32)) {
  ------------------
  |  |   88|  3.10k|#  define secp256k1_fe_set_b32_limit secp256k1_fe_impl_set_b32_limit
  ------------------
  |  Branch (31:9): [True: 0, False: 3.10k]
  ------------------
   32|      0|        return 0;
   33|      0|    }
   34|  3.10k|    if (!secp256k1_ge_set_xo_var(&pk, &x, 0)) {
  ------------------
  |  Branch (34:9): [True: 0, False: 3.10k]
  ------------------
   35|      0|        return 0;
   36|      0|    }
   37|  3.10k|    if (!secp256k1_ge_is_in_correct_subgroup(&pk)) {
  ------------------
  |  Branch (37:9): [True: 0, False: 3.10k]
  ------------------
   38|      0|        return 0;
   39|      0|    }
   40|  3.10k|    secp256k1_xonly_pubkey_save(pubkey, &pk);
   41|  3.10k|    return 1;
   42|  3.10k|}
secp256k1_keypair_create:
  196|  2.59k|int secp256k1_keypair_create(const secp256k1_context* ctx, secp256k1_keypair *keypair, const unsigned char *seckey32) {
  197|  2.59k|    secp256k1_scalar sk;
  198|  2.59k|    secp256k1_ge pk;
  199|  2.59k|    int ret = 0;
  200|  2.59k|    VERIFY_CHECK(ctx != NULL);
  201|  2.59k|    ARG_CHECK(keypair != NULL);
  ------------------
  |  |   45|  2.59k|#define ARG_CHECK(cond) do { \
  |  |   46|  2.59k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  2.59k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 2.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  2.59k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 2.59k]
  |  |  ------------------
  ------------------
  202|  2.59k|    memset(keypair, 0, sizeof(*keypair));
  203|  2.59k|    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));
  ------------------
  |  |   45|  2.59k|#define ARG_CHECK(cond) do { \
  |  |   46|  2.59k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  2.59k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 2.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  2.59k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 2.59k]
  |  |  ------------------
  ------------------
  204|  2.59k|    ARG_CHECK(seckey32 != NULL);
  ------------------
  |  |   45|  2.59k|#define ARG_CHECK(cond) do { \
  |  |   46|  2.59k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  2.59k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 2.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  2.59k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 2.59k]
  |  |  ------------------
  ------------------
  205|       |
  206|  2.59k|    ret = secp256k1_ec_pubkey_create_helper(&ctx->ecmult_gen_ctx, &sk, &pk, seckey32);
  207|  2.59k|    secp256k1_keypair_save(keypair, &sk, &pk);
  208|  2.59k|    secp256k1_memczero(keypair, sizeof(*keypair), !ret);
  209|       |
  210|  2.59k|    secp256k1_scalar_clear(&sk);
  211|  2.59k|    return ret;
  212|  2.59k|}
secp256k1_keypair_xonly_pub:
  234|  2.59k|int secp256k1_keypair_xonly_pub(const secp256k1_context* ctx, secp256k1_xonly_pubkey *pubkey, int *pk_parity, const secp256k1_keypair *keypair) {
  235|  2.59k|    secp256k1_ge pk;
  236|  2.59k|    int tmp;
  237|       |
  238|  2.59k|    VERIFY_CHECK(ctx != NULL);
  239|  2.59k|    ARG_CHECK(pubkey != NULL);
  ------------------
  |  |   45|  2.59k|#define ARG_CHECK(cond) do { \
  |  |   46|  2.59k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  2.59k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 2.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  2.59k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 2.59k]
  |  |  ------------------
  ------------------
  240|  2.59k|    memset(pubkey, 0, sizeof(*pubkey));
  241|  2.59k|    ARG_CHECK(keypair != NULL);
  ------------------
  |  |   45|  2.59k|#define ARG_CHECK(cond) do { \
  |  |   46|  2.59k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  2.59k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 2.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  2.59k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 2.59k]
  |  |  ------------------
  ------------------
  242|       |
  243|  2.59k|    if (!secp256k1_keypair_load(ctx, NULL, &pk, keypair)) {
  ------------------
  |  Branch (243:9): [True: 0, False: 2.59k]
  ------------------
  244|      0|        return 0;
  245|      0|    }
  246|  2.59k|    tmp = secp256k1_extrakeys_ge_even_y(&pk);
  247|  2.59k|    if (pk_parity != NULL) {
  ------------------
  |  Branch (247:9): [True: 0, False: 2.59k]
  ------------------
  248|      0|        *pk_parity = tmp;
  249|      0|    }
  250|  2.59k|    secp256k1_xonly_pubkey_save(pubkey, &pk);
  251|       |
  252|  2.59k|    return 1;
  253|  2.59k|}
secp256k1.c:secp256k1_xonly_pubkey_save:
   18|  5.70k|static SECP256K1_INLINE void secp256k1_xonly_pubkey_save(secp256k1_xonly_pubkey *pubkey, secp256k1_ge *ge) {
   19|  5.70k|    secp256k1_pubkey_save((secp256k1_pubkey *) pubkey, ge);
   20|  5.70k|}
secp256k1.c:secp256k1_xonly_pubkey_load:
   14|  5.70k|static SECP256K1_INLINE int secp256k1_xonly_pubkey_load(const secp256k1_context* ctx, secp256k1_ge *ge, const secp256k1_xonly_pubkey *pubkey) {
   15|  5.70k|    return secp256k1_pubkey_load(ctx, ge, (const secp256k1_pubkey *) pubkey);
   16|  5.70k|}
secp256k1.c:secp256k1_extrakeys_ge_even_y:
   88|  2.59k|static int secp256k1_extrakeys_ge_even_y(secp256k1_ge *r) {
   89|  2.59k|    int y_parity = 0;
   90|  2.59k|    VERIFY_CHECK(!secp256k1_ge_is_infinity(r));
   91|       |
   92|  2.59k|    if (secp256k1_fe_is_odd(&r->y)) {
  ------------------
  |  |   85|  2.59k|#  define secp256k1_fe_is_odd secp256k1_fe_impl_is_odd
  ------------------
  |  Branch (92:9): [True: 1.25k, False: 1.33k]
  ------------------
   93|  1.25k|        secp256k1_fe_negate(&r->y, &r->y, 1);
  ------------------
  |  |  211|  1.25k|#define secp256k1_fe_negate(r, a, m) ASSERT_INT_CONST_AND_DO(m, secp256k1_fe_negate_unchecked(r, a, m))
  |  |  ------------------
  |  |  |  |   77|  1.25k|#define ASSERT_INT_CONST_AND_DO(expr, stmt) do { \
  |  |  |  |   78|  1.25k|    switch(42) { \
  |  |  |  |   79|      0|        /* C allows only integer constant expressions as case labels. */ \
  |  |  |  |   80|      0|        case /* ERROR: integer argument is not constant */ (expr): \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:9): [True: 0, False: 1.25k]
  |  |  |  |  ------------------
  |  |  |  |   81|      0|            break; \
  |  |  |  |   82|  1.25k|        default: ; \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:9): [True: 1.25k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   83|  1.25k|    } \
  |  |  |  |   84|  1.25k|    stmt; \
  |  |  |  |   85|  1.25k|} while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (85:9): [Folded, False: 1.25k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   94|  1.25k|        y_parity = 1;
   95|  1.25k|    }
   96|  2.59k|    return y_parity;
   97|  2.59k|}
secp256k1.c:secp256k1_keypair_save:
  156|  2.59k|static void secp256k1_keypair_save(secp256k1_keypair *keypair, const secp256k1_scalar *sk, secp256k1_ge *pk) {
  157|  2.59k|    secp256k1_scalar_get_b32(&keypair->data[0], sk);
  158|  2.59k|    secp256k1_pubkey_save((secp256k1_pubkey *)&keypair->data[32], pk);
  159|  2.59k|}
secp256k1.c:secp256k1_keypair_load:
  176|  5.19k|static int secp256k1_keypair_load(const secp256k1_context* ctx, secp256k1_scalar *sk, secp256k1_ge *pk, const secp256k1_keypair *keypair) {
  177|  5.19k|    int ret;
  178|  5.19k|    const secp256k1_pubkey *pubkey = (const secp256k1_pubkey *)&keypair->data[32];
  179|       |
  180|       |    /* Need to declassify the pubkey because pubkey_load ARG_CHECKs if it's
  181|       |     * invalid. */
  182|  5.19k|    secp256k1_declassify(ctx, pubkey, sizeof(*pubkey));
  183|  5.19k|    ret = secp256k1_pubkey_load(ctx, pk, pubkey);
  184|  5.19k|    if (sk != NULL) {
  ------------------
  |  Branch (184:9): [True: 2.59k, False: 2.59k]
  ------------------
  185|  2.59k|        ret = ret && secp256k1_keypair_seckey_load(ctx, sk, keypair);
  ------------------
  |  Branch (185:15): [True: 2.59k, False: 0]
  |  Branch (185:22): [True: 2.59k, False: 0]
  ------------------
  186|  2.59k|    }
  187|  5.19k|    if (!ret) {
  ------------------
  |  Branch (187:9): [True: 0, False: 5.19k]
  ------------------
  188|      0|        *pk = secp256k1_ge_const_g;
  189|      0|        if (sk != NULL) {
  ------------------
  |  Branch (189:13): [True: 0, False: 0]
  ------------------
  190|      0|            *sk = secp256k1_scalar_one;
  191|      0|        }
  192|      0|    }
  193|  5.19k|    return ret;
  194|  5.19k|}
secp256k1.c:secp256k1_keypair_seckey_load:
  162|  2.59k|static int secp256k1_keypair_seckey_load(const secp256k1_context* ctx, secp256k1_scalar *sk, const secp256k1_keypair *keypair) {
  163|  2.59k|    int ret;
  164|       |
  165|  2.59k|    ret = secp256k1_scalar_set_b32_seckey(sk, &keypair->data[0]);
  166|       |    /* We can declassify ret here because sk is only zero if a keypair function
  167|       |     * failed (which zeroes the keypair) and its return value is ignored. */
  168|  2.59k|    secp256k1_declassify(ctx, &ret, sizeof(ret));
  169|  2.59k|    ARG_CHECK(ret);
  ------------------
  |  |   45|  2.59k|#define ARG_CHECK(cond) do { \
  |  |   46|  2.59k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  2.59k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 2.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  2.59k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 2.59k]
  |  |  ------------------
  ------------------
  170|  2.59k|    return ret;
  171|  2.59k|}

secp256k1_schnorrsig_sign32:
  199|  2.59k|int secp256k1_schnorrsig_sign32(const secp256k1_context* ctx, unsigned char *sig64, const unsigned char *msg32, const secp256k1_keypair *keypair, const unsigned char *aux_rand32) {
  200|       |    /* We cast away const from the passed aux_rand32 argument since we know the default nonce function does not modify it. */
  201|  2.59k|    return secp256k1_schnorrsig_sign_internal(ctx, sig64, msg32, 32, keypair, secp256k1_nonce_function_bip340, (unsigned char*)aux_rand32);
  202|  2.59k|}
secp256k1_schnorrsig_verify:
  223|  5.70k|int secp256k1_schnorrsig_verify(const secp256k1_context* ctx, const unsigned char *sig64, const unsigned char *msg, size_t msglen, const secp256k1_xonly_pubkey *pubkey) {
  224|  5.70k|    secp256k1_scalar s;
  225|  5.70k|    secp256k1_scalar e;
  226|  5.70k|    secp256k1_gej rj;
  227|  5.70k|    secp256k1_ge pk;
  228|  5.70k|    secp256k1_gej pkj;
  229|  5.70k|    secp256k1_fe rx;
  230|  5.70k|    secp256k1_ge r;
  231|  5.70k|    unsigned char buf[32];
  232|  5.70k|    int overflow;
  233|       |
  234|  5.70k|    VERIFY_CHECK(ctx != NULL);
  235|  5.70k|    ARG_CHECK(sig64 != NULL);
  ------------------
  |  |   45|  5.70k|#define ARG_CHECK(cond) do { \
  |  |   46|  5.70k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  5.70k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 5.70k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  5.70k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 5.70k]
  |  |  ------------------
  ------------------
  236|  5.70k|    ARG_CHECK(msg != NULL || msglen == 0);
  ------------------
  |  |   45|  5.70k|#define ARG_CHECK(cond) do { \
  |  |   46|  5.70k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  5.70k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 5.70k]
  |  |  |  |  |  Branch (136:39): [True: 5.70k, False: 0]
  |  |  |  |  |  Branch (136:39): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  5.70k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 5.70k]
  |  |  ------------------
  ------------------
  237|  5.70k|    ARG_CHECK(pubkey != NULL);
  ------------------
  |  |   45|  5.70k|#define ARG_CHECK(cond) do { \
  |  |   46|  5.70k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  5.70k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 5.70k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  5.70k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 5.70k]
  |  |  ------------------
  ------------------
  238|       |
  239|  5.70k|    if (!secp256k1_fe_set_b32_limit(&rx, &sig64[0])) {
  ------------------
  |  |   88|  5.70k|#  define secp256k1_fe_set_b32_limit secp256k1_fe_impl_set_b32_limit
  ------------------
  |  Branch (239:9): [True: 0, False: 5.70k]
  ------------------
  240|      0|        return 0;
  241|      0|    }
  242|       |
  243|  5.70k|    secp256k1_scalar_set_b32(&s, &sig64[32], &overflow);
  244|  5.70k|    if (overflow) {
  ------------------
  |  Branch (244:9): [True: 0, False: 5.70k]
  ------------------
  245|      0|        return 0;
  246|      0|    }
  247|       |
  248|  5.70k|    if (!secp256k1_xonly_pubkey_load(ctx, &pk, pubkey)) {
  ------------------
  |  Branch (248:9): [True: 0, False: 5.70k]
  ------------------
  249|      0|        return 0;
  250|      0|    }
  251|       |
  252|       |    /* Compute e. */
  253|  5.70k|    secp256k1_fe_get_b32(buf, &pk.x);
  ------------------
  |  |   89|  5.70k|#  define secp256k1_fe_get_b32 secp256k1_fe_impl_get_b32
  ------------------
  254|  5.70k|    secp256k1_schnorrsig_challenge(&e, &sig64[0], msg, msglen, buf);
  255|       |
  256|       |    /* Compute rj =  s*G + (-e)*pkj */
  257|  5.70k|    secp256k1_scalar_negate(&e, &e);
  258|  5.70k|    secp256k1_gej_set_ge(&pkj, &pk);
  259|  5.70k|    secp256k1_ecmult(&rj, &pkj, &e, &s);
  260|       |
  261|  5.70k|    secp256k1_ge_set_gej_var(&r, &rj);
  262|  5.70k|    if (secp256k1_ge_is_infinity(&r)) {
  ------------------
  |  Branch (262:9): [True: 0, False: 5.70k]
  ------------------
  263|      0|        return 0;
  264|      0|    }
  265|       |
  266|  5.70k|    secp256k1_fe_normalize_var(&r.y);
  ------------------
  |  |   80|  5.70k|#  define secp256k1_fe_normalize_var secp256k1_fe_impl_normalize_var
  ------------------
  267|  5.70k|    return !secp256k1_fe_is_odd(&r.y) &&
  ------------------
  |  |   85|  5.70k|#  define secp256k1_fe_is_odd secp256k1_fe_impl_is_odd
  ------------------
  |  Branch (267:12): [True: 5.13k, False: 564]
  ------------------
  268|  5.13k|           secp256k1_fe_equal(&rx, &r.x);
  ------------------
  |  Branch (268:12): [True: 4.50k, False: 635]
  ------------------
  269|  5.70k|}
secp256k1.c:nonce_function_bip340:
   52|  2.59k|static int nonce_function_bip340(unsigned char *nonce32, const unsigned char *msg, size_t msglen, const unsigned char *key32, const unsigned char *xonly_pk32, const unsigned char *algo, size_t algolen, void *data) {
   53|  2.59k|    secp256k1_sha256 sha;
   54|  2.59k|    unsigned char masked_key[32];
   55|  2.59k|    int i;
   56|       |
   57|  2.59k|    if (algo == NULL) {
  ------------------
  |  Branch (57:9): [True: 0, False: 2.59k]
  ------------------
   58|      0|        return 0;
   59|      0|    }
   60|       |
   61|  2.59k|    if (data != NULL) {
  ------------------
  |  Branch (61:9): [True: 2.59k, False: 0]
  ------------------
   62|  2.59k|        secp256k1_nonce_function_bip340_sha256_tagged_aux(&sha);
   63|  2.59k|        secp256k1_sha256_write(&sha, data, 32);
   64|  2.59k|        secp256k1_sha256_finalize(&sha, masked_key);
   65|  85.6k|        for (i = 0; i < 32; i++) {
  ------------------
  |  Branch (65:21): [True: 83.0k, False: 2.59k]
  ------------------
   66|  83.0k|            masked_key[i] ^= key32[i];
   67|  83.0k|        }
   68|  2.59k|    } else {
   69|       |        /* Precomputed TaggedHash("BIP0340/aux", 0x0000...00); */
   70|      0|        static const unsigned char ZERO_MASK[32] = {
   71|      0|              84, 241, 105, 207, 201, 226, 229, 114,
   72|      0|             116, 128,  68,  31, 144, 186,  37, 196,
   73|      0|             136, 244,  97, 199,  11,  94, 165, 220,
   74|      0|             170, 247, 175, 105, 39,  10, 165,  20
   75|      0|        };
   76|      0|        for (i = 0; i < 32; i++) {
  ------------------
  |  Branch (76:21): [True: 0, False: 0]
  ------------------
   77|      0|            masked_key[i] = key32[i] ^ ZERO_MASK[i];
   78|      0|        }
   79|      0|    }
   80|       |
   81|       |    /* Tag the hash with algo which is important to avoid nonce reuse across
   82|       |     * algorithms. If this nonce function is used in BIP-340 signing as defined
   83|       |     * in the spec, an optimized tagging implementation is used. */
   84|  2.59k|    if (algolen == sizeof(bip340_algo)
  ------------------
  |  Branch (84:9): [True: 2.59k, False: 0]
  ------------------
   85|  2.59k|            && secp256k1_memcmp_var(algo, bip340_algo, algolen) == 0) {
  ------------------
  |  Branch (85:16): [True: 2.59k, False: 0]
  ------------------
   86|  2.59k|        secp256k1_nonce_function_bip340_sha256_tagged(&sha);
   87|  2.59k|    } else {
   88|      0|        secp256k1_sha256_initialize_tagged(&sha, algo, algolen);
   89|      0|    }
   90|       |
   91|       |    /* Hash masked-key||pk||msg using the tagged hash as per the spec */
   92|  2.59k|    secp256k1_sha256_write(&sha, masked_key, 32);
   93|  2.59k|    secp256k1_sha256_write(&sha, xonly_pk32, 32);
   94|  2.59k|    secp256k1_sha256_write(&sha, msg, msglen);
   95|  2.59k|    secp256k1_sha256_finalize(&sha, nonce32);
   96|  2.59k|    secp256k1_sha256_clear(&sha);
   97|  2.59k|    secp256k1_memclear(masked_key, sizeof(masked_key));
   98|       |
   99|  2.59k|    return 1;
  100|  2.59k|}
secp256k1.c:secp256k1_nonce_function_bip340_sha256_tagged_aux:
   32|  2.59k|static void secp256k1_nonce_function_bip340_sha256_tagged_aux(secp256k1_sha256 *sha) {
   33|  2.59k|    secp256k1_sha256_initialize(sha);
   34|  2.59k|    sha->s[0] = 0x24dd3219ul;
   35|  2.59k|    sha->s[1] = 0x4eba7e70ul;
   36|  2.59k|    sha->s[2] = 0xca0fabb9ul;
   37|  2.59k|    sha->s[3] = 0x0fa3166dul;
   38|  2.59k|    sha->s[4] = 0x3afbe4b1ul;
   39|  2.59k|    sha->s[5] = 0x4c44df97ul;
   40|  2.59k|    sha->s[6] = 0x4aac2739ul;
   41|  2.59k|    sha->s[7] = 0x249e850aul;
   42|       |
   43|  2.59k|    sha->bytes = 64;
   44|  2.59k|}
secp256k1.c:secp256k1_nonce_function_bip340_sha256_tagged:
   16|  2.59k|static void secp256k1_nonce_function_bip340_sha256_tagged(secp256k1_sha256 *sha) {
   17|  2.59k|    secp256k1_sha256_initialize(sha);
   18|  2.59k|    sha->s[0] = 0x46615b35ul;
   19|  2.59k|    sha->s[1] = 0xf4bfbff7ul;
   20|  2.59k|    sha->s[2] = 0x9f8dc671ul;
   21|  2.59k|    sha->s[3] = 0x83627ab3ul;
   22|  2.59k|    sha->s[4] = 0x60217180ul;
   23|  2.59k|    sha->s[5] = 0x57358661ul;
   24|  2.59k|    sha->s[6] = 0x21a29e54ul;
   25|  2.59k|    sha->s[7] = 0x68b07b4cul;
   26|       |
   27|  2.59k|    sha->bytes = 64;
   28|  2.59k|}
secp256k1.c:secp256k1_schnorrsig_sign_internal:
  135|  2.59k|static int secp256k1_schnorrsig_sign_internal(const secp256k1_context* ctx, unsigned char *sig64, const unsigned char *msg, size_t msglen, const secp256k1_keypair *keypair, secp256k1_nonce_function_hardened noncefp, void *ndata) {
  136|  2.59k|    secp256k1_scalar sk;
  137|  2.59k|    secp256k1_scalar e;
  138|  2.59k|    secp256k1_scalar k;
  139|  2.59k|    secp256k1_gej rj;
  140|  2.59k|    secp256k1_ge pk;
  141|  2.59k|    secp256k1_ge r;
  142|  2.59k|    unsigned char buf[32] = { 0 };
  143|  2.59k|    unsigned char pk_buf[32];
  144|  2.59k|    unsigned char seckey[32];
  145|  2.59k|    int ret = 1;
  146|       |
  147|  2.59k|    VERIFY_CHECK(ctx != NULL);
  148|  2.59k|    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));
  ------------------
  |  |   45|  2.59k|#define ARG_CHECK(cond) do { \
  |  |   46|  2.59k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  2.59k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 2.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  2.59k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 2.59k]
  |  |  ------------------
  ------------------
  149|  2.59k|    ARG_CHECK(sig64 != NULL);
  ------------------
  |  |   45|  2.59k|#define ARG_CHECK(cond) do { \
  |  |   46|  2.59k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  2.59k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 2.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  2.59k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 2.59k]
  |  |  ------------------
  ------------------
  150|  2.59k|    ARG_CHECK(msg != NULL || msglen == 0);
  ------------------
  |  |   45|  2.59k|#define ARG_CHECK(cond) do { \
  |  |   46|  2.59k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  2.59k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 2.59k]
  |  |  |  |  |  Branch (136:39): [True: 2.59k, False: 0]
  |  |  |  |  |  Branch (136:39): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  2.59k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 2.59k]
  |  |  ------------------
  ------------------
  151|  2.59k|    ARG_CHECK(keypair != NULL);
  ------------------
  |  |   45|  2.59k|#define ARG_CHECK(cond) do { \
  |  |   46|  2.59k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  2.59k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 2.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  2.59k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 2.59k]
  |  |  ------------------
  ------------------
  152|       |
  153|  2.59k|    if (noncefp == NULL) {
  ------------------
  |  Branch (153:9): [True: 0, False: 2.59k]
  ------------------
  154|      0|        noncefp = secp256k1_nonce_function_bip340;
  155|      0|    }
  156|       |
  157|  2.59k|    ret &= secp256k1_keypair_load(ctx, &sk, &pk, keypair);
  158|       |    /* Because we are signing for a x-only pubkey, the secret key is negated
  159|       |     * before signing if the point corresponding to the secret key does not
  160|       |     * have an even Y. */
  161|  2.59k|    if (secp256k1_fe_is_odd(&pk.y)) {
  ------------------
  |  |   85|  2.59k|#  define secp256k1_fe_is_odd secp256k1_fe_impl_is_odd
  ------------------
  |  Branch (161:9): [True: 1.25k, False: 1.33k]
  ------------------
  162|  1.25k|        secp256k1_scalar_negate(&sk, &sk);
  163|  1.25k|    }
  164|       |
  165|  2.59k|    secp256k1_scalar_get_b32(seckey, &sk);
  166|  2.59k|    secp256k1_fe_get_b32(pk_buf, &pk.x);
  ------------------
  |  |   89|  2.59k|#  define secp256k1_fe_get_b32 secp256k1_fe_impl_get_b32
  ------------------
  167|  2.59k|    ret &= !!noncefp(buf, msg, msglen, seckey, pk_buf, bip340_algo, sizeof(bip340_algo), ndata);
  168|  2.59k|    secp256k1_scalar_set_b32(&k, buf, NULL);
  169|  2.59k|    ret &= !secp256k1_scalar_is_zero(&k);
  170|  2.59k|    secp256k1_scalar_cmov(&k, &secp256k1_scalar_one, !ret);
  171|       |
  172|  2.59k|    secp256k1_ecmult_gen(&ctx->ecmult_gen_ctx, &rj, &k);
  173|  2.59k|    secp256k1_ge_set_gej(&r, &rj);
  174|       |
  175|       |    /* We declassify r to allow using it as a branch point. This is fine
  176|       |     * because r is not a secret. */
  177|  2.59k|    secp256k1_declassify(ctx, &r, sizeof(r));
  178|  2.59k|    secp256k1_fe_normalize_var(&r.y);
  ------------------
  |  |   80|  2.59k|#  define secp256k1_fe_normalize_var secp256k1_fe_impl_normalize_var
  ------------------
  179|  2.59k|    if (secp256k1_fe_is_odd(&r.y)) {
  ------------------
  |  |   85|  2.59k|#  define secp256k1_fe_is_odd secp256k1_fe_impl_is_odd
  ------------------
  |  Branch (179:9): [True: 1.33k, False: 1.26k]
  ------------------
  180|  1.33k|        secp256k1_scalar_negate(&k, &k);
  181|  1.33k|    }
  182|  2.59k|    secp256k1_fe_normalize_var(&r.x);
  ------------------
  |  |   80|  2.59k|#  define secp256k1_fe_normalize_var secp256k1_fe_impl_normalize_var
  ------------------
  183|  2.59k|    secp256k1_fe_get_b32(&sig64[0], &r.x);
  ------------------
  |  |   89|  2.59k|#  define secp256k1_fe_get_b32 secp256k1_fe_impl_get_b32
  ------------------
  184|       |
  185|  2.59k|    secp256k1_schnorrsig_challenge(&e, &sig64[0], msg, msglen, pk_buf);
  186|  2.59k|    secp256k1_scalar_mul(&e, &e, &sk);
  187|  2.59k|    secp256k1_scalar_add(&e, &e, &k);
  188|  2.59k|    secp256k1_scalar_get_b32(&sig64[32], &e);
  189|       |
  190|  2.59k|    secp256k1_memczero(sig64, 64, !ret);
  191|  2.59k|    secp256k1_scalar_clear(&k);
  192|  2.59k|    secp256k1_scalar_clear(&sk);
  193|  2.59k|    secp256k1_memclear(seckey, sizeof(seckey));
  194|  2.59k|    secp256k1_gej_clear(&rj);
  195|       |
  196|  2.59k|    return ret;
  197|  2.59k|}
secp256k1.c:secp256k1_schnorrsig_challenge:
  120|  8.29k|{
  121|  8.29k|    unsigned char buf[32];
  122|  8.29k|    secp256k1_sha256 sha;
  123|       |
  124|       |    /* tagged hash(r.x, pk.x, msg) */
  125|  8.29k|    secp256k1_schnorrsig_sha256_tagged(&sha);
  126|  8.29k|    secp256k1_sha256_write(&sha, r32, 32);
  127|  8.29k|    secp256k1_sha256_write(&sha, pubkey32, 32);
  128|  8.29k|    secp256k1_sha256_write(&sha, msg, msglen);
  129|  8.29k|    secp256k1_sha256_finalize(&sha, buf);
  130|       |    /* Set scalar e to the challenge hash modulo the curve order as per
  131|       |     * BIP340. */
  132|       |    secp256k1_scalar_set_b32(e, buf, NULL);
  133|  8.29k|}
secp256k1.c:secp256k1_schnorrsig_sha256_tagged:
  106|  8.29k|static void secp256k1_schnorrsig_sha256_tagged(secp256k1_sha256 *sha) {
  107|  8.29k|    secp256k1_sha256_initialize(sha);
  108|  8.29k|    sha->s[0] = 0x9cecba11ul;
  109|  8.29k|    sha->s[1] = 0x23925381ul;
  110|  8.29k|    sha->s[2] = 0x11679112ul;
  111|  8.29k|    sha->s[3] = 0xd1627e0ful;
  112|  8.29k|    sha->s[4] = 0x97c87550ul;
  113|  8.29k|    sha->s[5] = 0x003cc765ul;
  114|  8.29k|    sha->s[6] = 0x90f61164ul;
  115|  8.29k|    sha->s[7] = 0x33e9b66aul;
  116|  8.29k|    sha->bytes = 64;
  117|  8.29k|}

secp256k1.c:secp256k1_scalar_set_b32:
  144|   144k|static void secp256k1_scalar_set_b32(secp256k1_scalar *r, const unsigned char *b32, int *overflow) {
  145|   144k|    int over;
  146|   144k|    r->d[0] = secp256k1_read_be64(&b32[24]);
  147|   144k|    r->d[1] = secp256k1_read_be64(&b32[16]);
  148|   144k|    r->d[2] = secp256k1_read_be64(&b32[8]);
  149|   144k|    r->d[3] = secp256k1_read_be64(&b32[0]);
  150|   144k|    over = secp256k1_scalar_reduce(r, secp256k1_scalar_check_overflow(r));
  151|   144k|    if (overflow) {
  ------------------
  |  Branch (151:9): [True: 133k, False: 10.8k]
  ------------------
  152|   133k|        *overflow = over;
  153|   133k|    }
  154|       |
  155|   144k|    SECP256K1_SCALAR_VERIFY(r);
  ------------------
  |  |  103|   144k|#define SECP256K1_SCALAR_VERIFY(r) secp256k1_scalar_verify(r)
  ------------------
  156|   144k|}
secp256k1.c:secp256k1_scalar_reduce:
   74|   336k|SECP256K1_INLINE static int secp256k1_scalar_reduce(secp256k1_scalar *r, unsigned int overflow) {
   75|   336k|    secp256k1_uint128 t;
   76|   336k|    VERIFY_CHECK(overflow <= 1);
   77|       |
   78|   336k|    secp256k1_u128_from_u64(&t, r->d[0]);
   79|   336k|    secp256k1_u128_accum_u64(&t, overflow * SECP256K1_N_C_0);
  ------------------
  |  |   22|   336k|#define SECP256K1_N_C_0 (~SECP256K1_N_0 + 1)
  |  |  ------------------
  |  |  |  |   16|   336k|#define SECP256K1_N_0 ((uint64_t)0xBFD25E8CD0364141ULL)
  |  |  ------------------
  ------------------
   80|   336k|    r->d[0] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);
   81|   336k|    secp256k1_u128_accum_u64(&t, r->d[1]);
   82|   336k|    secp256k1_u128_accum_u64(&t, overflow * SECP256K1_N_C_1);
  ------------------
  |  |   23|   336k|#define SECP256K1_N_C_1 (~SECP256K1_N_1)
  |  |  ------------------
  |  |  |  |   17|   336k|#define SECP256K1_N_1 ((uint64_t)0xBAAEDCE6AF48A03BULL)
  |  |  ------------------
  ------------------
   83|   336k|    r->d[1] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);
   84|   336k|    secp256k1_u128_accum_u64(&t, r->d[2]);
   85|   336k|    secp256k1_u128_accum_u64(&t, overflow * SECP256K1_N_C_2);
  ------------------
  |  |   24|   336k|#define SECP256K1_N_C_2 (1)
  ------------------
   86|   336k|    r->d[2] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);
   87|   336k|    secp256k1_u128_accum_u64(&t, r->d[3]);
   88|   336k|    r->d[3] = secp256k1_u128_to_u64(&t);
   89|       |
   90|   336k|    SECP256K1_SCALAR_VERIFY(r);
  ------------------
  |  |  103|   336k|#define SECP256K1_SCALAR_VERIFY(r) secp256k1_scalar_verify(r)
  ------------------
   91|   336k|    return overflow;
   92|   336k|}
secp256k1.c:secp256k1_scalar_check_overflow:
   62|   336k|SECP256K1_INLINE static int secp256k1_scalar_check_overflow(const secp256k1_scalar *a) {
   63|   336k|    int yes = 0;
   64|   336k|    int no = 0;
   65|   336k|    no |= (a->d[3] < SECP256K1_N_3); /* No need for a > check. */
  ------------------
  |  |   19|   336k|#define SECP256K1_N_3 ((uint64_t)0xFFFFFFFFFFFFFFFFULL)
  ------------------
   66|   336k|    no |= (a->d[2] < SECP256K1_N_2);
  ------------------
  |  |   18|   336k|#define SECP256K1_N_2 ((uint64_t)0xFFFFFFFFFFFFFFFEULL)
  ------------------
   67|   336k|    yes |= (a->d[2] > SECP256K1_N_2) & ~no;
  ------------------
  |  |   18|   336k|#define SECP256K1_N_2 ((uint64_t)0xFFFFFFFFFFFFFFFEULL)
  ------------------
   68|   336k|    no |= (a->d[1] < SECP256K1_N_1);
  ------------------
  |  |   17|   336k|#define SECP256K1_N_1 ((uint64_t)0xBAAEDCE6AF48A03BULL)
  ------------------
   69|   336k|    yes |= (a->d[1] > SECP256K1_N_1) & ~no;
  ------------------
  |  |   17|   336k|#define SECP256K1_N_1 ((uint64_t)0xBAAEDCE6AF48A03BULL)
  ------------------
   70|   336k|    yes |= (a->d[0] >= SECP256K1_N_0) & ~no;
  ------------------
  |  |   16|   336k|#define SECP256K1_N_0 ((uint64_t)0xBFD25E8CD0364141ULL)
  ------------------
   71|   336k|    return yes;
   72|   336k|}
secp256k1.c:secp256k1_scalar_get_b32:
  158|  25.9k|static void secp256k1_scalar_get_b32(unsigned char *bin, const secp256k1_scalar* a) {
  159|  25.9k|    SECP256K1_SCALAR_VERIFY(a);
  ------------------
  |  |  103|  25.9k|#define SECP256K1_SCALAR_VERIFY(r) secp256k1_scalar_verify(r)
  ------------------
  160|       |
  161|  25.9k|    secp256k1_write_be64(&bin[0],  a->d[3]);
  162|  25.9k|    secp256k1_write_be64(&bin[8],  a->d[2]);
  163|  25.9k|    secp256k1_write_be64(&bin[16], a->d[1]);
  164|  25.9k|    secp256k1_write_be64(&bin[24], a->d[0]);
  165|  25.9k|}
secp256k1.c:secp256k1_scalar_negate:
  173|  29.6k|static void secp256k1_scalar_negate(secp256k1_scalar *r, const secp256k1_scalar *a) {
  174|  29.6k|    uint64_t nonzero = 0xFFFFFFFFFFFFFFFFULL * (secp256k1_scalar_is_zero(a) == 0);
  175|  29.6k|    secp256k1_uint128 t;
  176|  29.6k|    SECP256K1_SCALAR_VERIFY(a);
  ------------------
  |  |  103|  29.6k|#define SECP256K1_SCALAR_VERIFY(r) secp256k1_scalar_verify(r)
  ------------------
  177|       |
  178|  29.6k|    secp256k1_u128_from_u64(&t, ~a->d[0]);
  179|  29.6k|    secp256k1_u128_accum_u64(&t, SECP256K1_N_0 + 1);
  ------------------
  |  |   16|  29.6k|#define SECP256K1_N_0 ((uint64_t)0xBFD25E8CD0364141ULL)
  ------------------
  180|  29.6k|    r->d[0] = secp256k1_u128_to_u64(&t) & nonzero; secp256k1_u128_rshift(&t, 64);
  181|  29.6k|    secp256k1_u128_accum_u64(&t, ~a->d[1]);
  182|  29.6k|    secp256k1_u128_accum_u64(&t, SECP256K1_N_1);
  ------------------
  |  |   17|  29.6k|#define SECP256K1_N_1 ((uint64_t)0xBAAEDCE6AF48A03BULL)
  ------------------
  183|  29.6k|    r->d[1] = secp256k1_u128_to_u64(&t) & nonzero; secp256k1_u128_rshift(&t, 64);
  184|  29.6k|    secp256k1_u128_accum_u64(&t, ~a->d[2]);
  185|  29.6k|    secp256k1_u128_accum_u64(&t, SECP256K1_N_2);
  ------------------
  |  |   18|  29.6k|#define SECP256K1_N_2 ((uint64_t)0xFFFFFFFFFFFFFFFEULL)
  ------------------
  186|  29.6k|    r->d[2] = secp256k1_u128_to_u64(&t) & nonzero; secp256k1_u128_rshift(&t, 64);
  187|  29.6k|    secp256k1_u128_accum_u64(&t, ~a->d[3]);
  188|  29.6k|    secp256k1_u128_accum_u64(&t, SECP256K1_N_3);
  ------------------
  |  |   19|  29.6k|#define SECP256K1_N_3 ((uint64_t)0xFFFFFFFFFFFFFFFFULL)
  ------------------
  189|  29.6k|    r->d[3] = secp256k1_u128_to_u64(&t) & nonzero;
  190|       |
  191|  29.6k|    SECP256K1_SCALAR_VERIFY(r);
  ------------------
  |  |  103|  29.6k|#define SECP256K1_SCALAR_VERIFY(r) secp256k1_scalar_verify(r)
  ------------------
  192|  29.6k|}
secp256k1.c:secp256k1_scalar_get_bits_limb32:
   41|  1.98M|SECP256K1_INLINE static uint32_t secp256k1_scalar_get_bits_limb32(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {
   42|  1.98M|    SECP256K1_SCALAR_VERIFY(a);
  ------------------
  |  |  103|  1.98M|#define SECP256K1_SCALAR_VERIFY(r) secp256k1_scalar_verify(r)
  ------------------
   43|  1.98M|    VERIFY_CHECK(count > 0 && count <= 32);
   44|  1.98M|    VERIFY_CHECK((offset + count - 1) >> 6 == offset >> 6);
   45|       |
   46|  1.98M|    return (a->d[offset >> 6] >> (offset & 0x3F)) & (0xFFFFFFFF >> (32 - count));
   47|  1.98M|}
secp256k1.c:secp256k1_scalar_cmov:
  911|  89.0k|static SECP256K1_INLINE void secp256k1_scalar_cmov(secp256k1_scalar *r, const secp256k1_scalar *a, int flag) {
  912|  89.0k|    uint64_t mask0, mask1;
  913|  89.0k|    volatile int vflag = flag;
  914|  89.0k|    SECP256K1_SCALAR_VERIFY(a);
  ------------------
  |  |  103|  89.0k|#define SECP256K1_SCALAR_VERIFY(r) secp256k1_scalar_verify(r)
  ------------------
  915|  89.0k|    SECP256K1_CHECKMEM_CHECK_VERIFY(r->d, sizeof(r->d));
  ------------------
  |  |   99|  89.0k|#define SECP256K1_CHECKMEM_CHECK_VERIFY(p, len) SECP256K1_CHECKMEM_NOOP((p), (len))
  |  |  ------------------
  |  |  |  |   42|  89.0k|#define SECP256K1_CHECKMEM_NOOP(p, len) do { (void)(p); (void)(len); } while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (42:78): [Folded, False: 89.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  916|       |
  917|  89.0k|    mask0 = vflag + ~((uint64_t)0);
  918|  89.0k|    mask1 = ~mask0;
  919|  89.0k|    r->d[0] = (r->d[0] & mask0) | (a->d[0] & mask1);
  920|  89.0k|    r->d[1] = (r->d[1] & mask0) | (a->d[1] & mask1);
  921|  89.0k|    r->d[2] = (r->d[2] & mask0) | (a->d[2] & mask1);
  922|  89.0k|    r->d[3] = (r->d[3] & mask0) | (a->d[3] & mask1);
  923|       |
  924|  89.0k|    SECP256K1_SCALAR_VERIFY(r);
  ------------------
  |  |  103|  89.0k|#define SECP256K1_SCALAR_VERIFY(r) secp256k1_scalar_verify(r)
  ------------------
  925|  89.0k|}
secp256k1.c:secp256k1_scalar_half:
  194|  9.89k|static void secp256k1_scalar_half(secp256k1_scalar *r, const secp256k1_scalar *a) {
  195|       |    /* Writing `/` for field division and `//` for integer division, we compute
  196|       |     *
  197|       |     *   a/2 = (a - (a&1))/2 + (a&1)/2
  198|       |     *       = (a >> 1) + (a&1 ?    1/2 : 0)
  199|       |     *       = (a >> 1) + (a&1 ? n//2+1 : 0),
  200|       |     *
  201|       |     * where n is the group order and in the last equality we have used 1/2 = n//2+1 (mod n).
  202|       |     * For n//2, we have the constants SECP256K1_N_H_0, ...
  203|       |     *
  204|       |     * This sum does not overflow. The most extreme case is a = -2, the largest odd scalar. Here:
  205|       |     * - the left summand is:  a >> 1 = (a - a&1)/2 = (n-2-1)//2           = (n-3)//2
  206|       |     * - the right summand is: a&1 ? n//2+1 : 0 = n//2+1 = (n-1)//2 + 2//2 = (n+1)//2
  207|       |     * Together they sum to (n-3)//2 + (n+1)//2 = (2n-2)//2 = n - 1, which is less than n.
  208|       |     */
  209|  9.89k|    uint64_t mask = -(uint64_t)(a->d[0] & 1U);
  210|  9.89k|    secp256k1_uint128 t;
  211|  9.89k|    SECP256K1_SCALAR_VERIFY(a);
  ------------------
  |  |  103|  9.89k|#define SECP256K1_SCALAR_VERIFY(r) secp256k1_scalar_verify(r)
  ------------------
  212|       |
  213|  9.89k|    secp256k1_u128_from_u64(&t, (a->d[0] >> 1) | (a->d[1] << 63));
  214|  9.89k|    secp256k1_u128_accum_u64(&t, (SECP256K1_N_H_0 + 1U) & mask);
  ------------------
  |  |   27|  9.89k|#define SECP256K1_N_H_0 ((uint64_t)0xDFE92F46681B20A0ULL)
  ------------------
  215|  9.89k|    r->d[0] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);
  216|  9.89k|    secp256k1_u128_accum_u64(&t, (a->d[1] >> 1) | (a->d[2] << 63));
  217|  9.89k|    secp256k1_u128_accum_u64(&t, SECP256K1_N_H_1 & mask);
  ------------------
  |  |   28|  9.89k|#define SECP256K1_N_H_1 ((uint64_t)0x5D576E7357A4501DULL)
  ------------------
  218|  9.89k|    r->d[1] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);
  219|  9.89k|    secp256k1_u128_accum_u64(&t, (a->d[2] >> 1) | (a->d[3] << 63));
  220|  9.89k|    secp256k1_u128_accum_u64(&t, SECP256K1_N_H_2 & mask);
  ------------------
  |  |   29|  9.89k|#define SECP256K1_N_H_2 ((uint64_t)0xFFFFFFFFFFFFFFFFULL)
  ------------------
  221|  9.89k|    r->d[2] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);
  222|  9.89k|    r->d[3] = secp256k1_u128_to_u64(&t) + (a->d[3] >> 1) + (SECP256K1_N_H_3 & mask);
  ------------------
  |  |   30|  9.89k|#define SECP256K1_N_H_3 ((uint64_t)0x7FFFFFFFFFFFFFFFULL)
  ------------------
  223|       |#ifdef VERIFY
  224|       |    /* The line above only computed the bottom 64 bits of r->d[3]; redo the computation
  225|       |     * in full 128 bits to make sure the top 64 bits are indeed zero. */
  226|       |    secp256k1_u128_accum_u64(&t, a->d[3] >> 1);
  227|       |    secp256k1_u128_accum_u64(&t, SECP256K1_N_H_3 & mask);
  228|       |    secp256k1_u128_rshift(&t, 64);
  229|       |    VERIFY_CHECK(secp256k1_u128_to_u64(&t) == 0);
  230|       |
  231|       |    SECP256K1_SCALAR_VERIFY(r);
  232|       |#endif
  233|  9.89k|}
secp256k1.c:secp256k1_scalar_mul_shift_var:
  889|  31.1k|SECP256K1_INLINE static void secp256k1_scalar_mul_shift_var(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b, unsigned int shift) {
  890|  31.1k|    uint64_t l[8];
  891|  31.1k|    unsigned int shiftlimbs;
  892|  31.1k|    unsigned int shiftlow;
  893|  31.1k|    unsigned int shifthigh;
  894|  31.1k|    SECP256K1_SCALAR_VERIFY(a);
  ------------------
  |  |  103|  31.1k|#define SECP256K1_SCALAR_VERIFY(r) secp256k1_scalar_verify(r)
  ------------------
  895|  31.1k|    SECP256K1_SCALAR_VERIFY(b);
  ------------------
  |  |  103|  31.1k|#define SECP256K1_SCALAR_VERIFY(r) secp256k1_scalar_verify(r)
  ------------------
  896|  31.1k|    VERIFY_CHECK(shift >= 256);
  897|       |
  898|  31.1k|    secp256k1_scalar_mul_512(l, a, b);
  899|  31.1k|    shiftlimbs = shift >> 6;
  900|  31.1k|    shiftlow = shift & 0x3F;
  901|  31.1k|    shifthigh = 64 - shiftlow;
  902|  31.1k|    r->d[0] = shift < 512 ? (l[0 + shiftlimbs] >> shiftlow | (shift < 448 && shiftlow ? (l[1 + shiftlimbs] << shifthigh) : 0)) : 0;
  ------------------
  |  Branch (902:15): [True: 31.1k, False: 0]
  |  Branch (902:63): [True: 31.1k, False: 0]
  |  Branch (902:78): [True: 0, False: 31.1k]
  ------------------
  903|  31.1k|    r->d[1] = shift < 448 ? (l[1 + shiftlimbs] >> shiftlow | (shift < 384 && shiftlow ? (l[2 + shiftlimbs] << shifthigh) : 0)) : 0;
  ------------------
  |  Branch (903:15): [True: 31.1k, False: 0]
  |  Branch (903:63): [True: 0, False: 31.1k]
  |  Branch (903:78): [True: 0, False: 0]
  ------------------
  904|  31.1k|    r->d[2] = shift < 384 ? (l[2 + shiftlimbs] >> shiftlow | (shift < 320 && shiftlow ? (l[3 + shiftlimbs] << shifthigh) : 0)) : 0;
  ------------------
  |  Branch (904:15): [True: 0, False: 31.1k]
  |  Branch (904:63): [True: 0, False: 0]
  |  Branch (904:78): [True: 0, False: 0]
  ------------------
  905|  31.1k|    r->d[3] = shift < 320 ? (l[3 + shiftlimbs] >> shiftlow) : 0;
  ------------------
  |  Branch (905:15): [True: 0, False: 31.1k]
  ------------------
  906|  31.1k|    secp256k1_scalar_cadd_bit(r, 0, (l[(shift - 1) >> 6] >> ((shift - 1) & 0x3f)) & 1);
  907|       |
  908|  31.1k|    SECP256K1_SCALAR_VERIFY(r);
  ------------------
  |  |  103|  31.1k|#define SECP256K1_SCALAR_VERIFY(r) secp256k1_scalar_verify(r)
  ------------------
  909|  31.1k|}
secp256k1.c:secp256k1_scalar_mul_512:
  678|  80.5k|static void secp256k1_scalar_mul_512(uint64_t *l8, const secp256k1_scalar *a, const secp256k1_scalar *b) {
  679|  80.5k|#ifdef USE_ASM_X86_64
  680|  80.5k|    const uint64_t *pb = b->d;
  681|  80.5k|    __asm__ __volatile__(
  682|       |    /* Preload */
  683|  80.5k|    "movq 0(%%rdi), %%r15\n"
  684|  80.5k|    "movq 8(%%rdi), %%rbx\n"
  685|  80.5k|    "movq 16(%%rdi), %%rcx\n"
  686|  80.5k|    "movq 0(%%rdx), %%r11\n"
  687|  80.5k|    "movq 8(%%rdx), %%r12\n"
  688|  80.5k|    "movq 16(%%rdx), %%r13\n"
  689|  80.5k|    "movq 24(%%rdx), %%r14\n"
  690|       |    /* (rax,rdx) = a0 * b0 */
  691|  80.5k|    "movq %%r15, %%rax\n"
  692|  80.5k|    "mulq %%r11\n"
  693|       |    /* Extract l8[0] */
  694|  80.5k|    "movq %%rax, 0(%%rsi)\n"
  695|       |    /* (r8,r9,r10) = (rdx) */
  696|  80.5k|    "movq %%rdx, %%r8\n"
  697|  80.5k|    "xorq %%r9, %%r9\n"
  698|  80.5k|    "xorq %%r10, %%r10\n"
  699|       |    /* (r8,r9,r10) += a0 * b1 */
  700|  80.5k|    "movq %%r15, %%rax\n"
  701|  80.5k|    "mulq %%r12\n"
  702|  80.5k|    "addq %%rax, %%r8\n"
  703|  80.5k|    "adcq %%rdx, %%r9\n"
  704|  80.5k|    "adcq $0, %%r10\n"
  705|       |    /* (r8,r9,r10) += a1 * b0 */
  706|  80.5k|    "movq %%rbx, %%rax\n"
  707|  80.5k|    "mulq %%r11\n"
  708|  80.5k|    "addq %%rax, %%r8\n"
  709|  80.5k|    "adcq %%rdx, %%r9\n"
  710|  80.5k|    "adcq $0, %%r10\n"
  711|       |    /* Extract l8[1] */
  712|  80.5k|    "movq %%r8, 8(%%rsi)\n"
  713|  80.5k|    "xorq %%r8, %%r8\n"
  714|       |    /* (r9,r10,r8) += a0 * b2 */
  715|  80.5k|    "movq %%r15, %%rax\n"
  716|  80.5k|    "mulq %%r13\n"
  717|  80.5k|    "addq %%rax, %%r9\n"
  718|  80.5k|    "adcq %%rdx, %%r10\n"
  719|  80.5k|    "adcq $0, %%r8\n"
  720|       |    /* (r9,r10,r8) += a1 * b1 */
  721|  80.5k|    "movq %%rbx, %%rax\n"
  722|  80.5k|    "mulq %%r12\n"
  723|  80.5k|    "addq %%rax, %%r9\n"
  724|  80.5k|    "adcq %%rdx, %%r10\n"
  725|  80.5k|    "adcq $0, %%r8\n"
  726|       |    /* (r9,r10,r8) += a2 * b0 */
  727|  80.5k|    "movq %%rcx, %%rax\n"
  728|  80.5k|    "mulq %%r11\n"
  729|  80.5k|    "addq %%rax, %%r9\n"
  730|  80.5k|    "adcq %%rdx, %%r10\n"
  731|  80.5k|    "adcq $0, %%r8\n"
  732|       |    /* Extract l8[2] */
  733|  80.5k|    "movq %%r9, 16(%%rsi)\n"
  734|  80.5k|    "xorq %%r9, %%r9\n"
  735|       |    /* (r10,r8,r9) += a0 * b3 */
  736|  80.5k|    "movq %%r15, %%rax\n"
  737|  80.5k|    "mulq %%r14\n"
  738|  80.5k|    "addq %%rax, %%r10\n"
  739|  80.5k|    "adcq %%rdx, %%r8\n"
  740|  80.5k|    "adcq $0, %%r9\n"
  741|       |    /* Preload a3 */
  742|  80.5k|    "movq 24(%%rdi), %%r15\n"
  743|       |    /* (r10,r8,r9) += a1 * b2 */
  744|  80.5k|    "movq %%rbx, %%rax\n"
  745|  80.5k|    "mulq %%r13\n"
  746|  80.5k|    "addq %%rax, %%r10\n"
  747|  80.5k|    "adcq %%rdx, %%r8\n"
  748|  80.5k|    "adcq $0, %%r9\n"
  749|       |    /* (r10,r8,r9) += a2 * b1 */
  750|  80.5k|    "movq %%rcx, %%rax\n"
  751|  80.5k|    "mulq %%r12\n"
  752|  80.5k|    "addq %%rax, %%r10\n"
  753|  80.5k|    "adcq %%rdx, %%r8\n"
  754|  80.5k|    "adcq $0, %%r9\n"
  755|       |    /* (r10,r8,r9) += a3 * b0 */
  756|  80.5k|    "movq %%r15, %%rax\n"
  757|  80.5k|    "mulq %%r11\n"
  758|  80.5k|    "addq %%rax, %%r10\n"
  759|  80.5k|    "adcq %%rdx, %%r8\n"
  760|  80.5k|    "adcq $0, %%r9\n"
  761|       |    /* Extract l8[3] */
  762|  80.5k|    "movq %%r10, 24(%%rsi)\n"
  763|  80.5k|    "xorq %%r10, %%r10\n"
  764|       |    /* (r8,r9,r10) += a1 * b3 */
  765|  80.5k|    "movq %%rbx, %%rax\n"
  766|  80.5k|    "mulq %%r14\n"
  767|  80.5k|    "addq %%rax, %%r8\n"
  768|  80.5k|    "adcq %%rdx, %%r9\n"
  769|  80.5k|    "adcq $0, %%r10\n"
  770|       |    /* (r8,r9,r10) += a2 * b2 */
  771|  80.5k|    "movq %%rcx, %%rax\n"
  772|  80.5k|    "mulq %%r13\n"
  773|  80.5k|    "addq %%rax, %%r8\n"
  774|  80.5k|    "adcq %%rdx, %%r9\n"
  775|  80.5k|    "adcq $0, %%r10\n"
  776|       |    /* (r8,r9,r10) += a3 * b1 */
  777|  80.5k|    "movq %%r15, %%rax\n"
  778|  80.5k|    "mulq %%r12\n"
  779|  80.5k|    "addq %%rax, %%r8\n"
  780|  80.5k|    "adcq %%rdx, %%r9\n"
  781|  80.5k|    "adcq $0, %%r10\n"
  782|       |    /* Extract l8[4] */
  783|  80.5k|    "movq %%r8, 32(%%rsi)\n"
  784|  80.5k|    "xorq %%r8, %%r8\n"
  785|       |    /* (r9,r10,r8) += a2 * b3 */
  786|  80.5k|    "movq %%rcx, %%rax\n"
  787|  80.5k|    "mulq %%r14\n"
  788|  80.5k|    "addq %%rax, %%r9\n"
  789|  80.5k|    "adcq %%rdx, %%r10\n"
  790|  80.5k|    "adcq $0, %%r8\n"
  791|       |    /* (r9,r10,r8) += a3 * b2 */
  792|  80.5k|    "movq %%r15, %%rax\n"
  793|  80.5k|    "mulq %%r13\n"
  794|  80.5k|    "addq %%rax, %%r9\n"
  795|  80.5k|    "adcq %%rdx, %%r10\n"
  796|  80.5k|    "adcq $0, %%r8\n"
  797|       |    /* Extract l8[5] */
  798|  80.5k|    "movq %%r9, 40(%%rsi)\n"
  799|       |    /* (r10,r8) += a3 * b3 */
  800|  80.5k|    "movq %%r15, %%rax\n"
  801|  80.5k|    "mulq %%r14\n"
  802|  80.5k|    "addq %%rax, %%r10\n"
  803|  80.5k|    "adcq %%rdx, %%r8\n"
  804|       |    /* Extract l8[6] */
  805|  80.5k|    "movq %%r10, 48(%%rsi)\n"
  806|       |    /* Extract l8[7] */
  807|  80.5k|    "movq %%r8, 56(%%rsi)\n"
  808|  80.5k|    : "+d"(pb)
  809|  80.5k|    : "S"(l8), "D"(a->d)
  810|  80.5k|    : "rax", "rbx", "rcx", "r8", "r9", "r10", "r11", "r12", "r13", "r14", "r15", "cc", "memory");
  811|       |
  812|  80.5k|    SECP256K1_CHECKMEM_MSAN_DEFINE(l8, sizeof(*l8) * 8);
  ------------------
  |  |   60|  80.5k|#  define SECP256K1_CHECKMEM_MSAN_DEFINE(p, len) SECP256K1_CHECKMEM_NOOP((p), (len))
  |  |  ------------------
  |  |  |  |   42|  80.5k|#define SECP256K1_CHECKMEM_NOOP(p, len) do { (void)(p); (void)(len); } while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (42:78): [Folded, False: 80.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  813|       |
  814|       |#else
  815|       |    /* 160 bit accumulator. */
  816|       |    uint64_t c0 = 0, c1 = 0;
  817|       |    uint32_t c2 = 0;
  818|       |
  819|       |    /* l8[0..7] = a[0..3] * b[0..3]. */
  820|       |    muladd_fast(a->d[0], b->d[0]);
  821|       |    extract_fast(l8[0]);
  822|       |    muladd(a->d[0], b->d[1]);
  823|       |    muladd(a->d[1], b->d[0]);
  824|       |    extract(l8[1]);
  825|       |    muladd(a->d[0], b->d[2]);
  826|       |    muladd(a->d[1], b->d[1]);
  827|       |    muladd(a->d[2], b->d[0]);
  828|       |    extract(l8[2]);
  829|       |    muladd(a->d[0], b->d[3]);
  830|       |    muladd(a->d[1], b->d[2]);
  831|       |    muladd(a->d[2], b->d[1]);
  832|       |    muladd(a->d[3], b->d[0]);
  833|       |    extract(l8[3]);
  834|       |    muladd(a->d[1], b->d[3]);
  835|       |    muladd(a->d[2], b->d[2]);
  836|       |    muladd(a->d[3], b->d[1]);
  837|       |    extract(l8[4]);
  838|       |    muladd(a->d[2], b->d[3]);
  839|       |    muladd(a->d[3], b->d[2]);
  840|       |    extract(l8[5]);
  841|       |    muladd_fast(a->d[3], b->d[3]);
  842|       |    extract_fast(l8[6]);
  843|       |    VERIFY_CHECK(c1 == 0);
  844|       |    l8[7] = c0;
  845|       |#endif
  846|  80.5k|}
secp256k1.c:secp256k1_scalar_cadd_bit:
  120|  31.1k|static void secp256k1_scalar_cadd_bit(secp256k1_scalar *r, unsigned int bit, int flag) {
  121|  31.1k|    secp256k1_uint128 t;
  122|  31.1k|    volatile int vflag = flag;
  123|  31.1k|    SECP256K1_SCALAR_VERIFY(r);
  ------------------
  |  |  103|  31.1k|#define SECP256K1_SCALAR_VERIFY(r) secp256k1_scalar_verify(r)
  ------------------
  124|  31.1k|    VERIFY_CHECK(bit < 256);
  125|       |
  126|  31.1k|    bit += ((uint32_t) vflag - 1) & 0x100;  /* forcing (bit >> 6) > 3 makes this a noop */
  127|  31.1k|    secp256k1_u128_from_u64(&t, r->d[0]);
  128|  31.1k|    secp256k1_u128_accum_u64(&t, ((uint64_t)((bit >> 6) == 0)) << (bit & 0x3F));
  129|  31.1k|    r->d[0] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);
  130|  31.1k|    secp256k1_u128_accum_u64(&t, r->d[1]);
  131|  31.1k|    secp256k1_u128_accum_u64(&t, ((uint64_t)((bit >> 6) == 1)) << (bit & 0x3F));
  132|  31.1k|    r->d[1] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);
  133|  31.1k|    secp256k1_u128_accum_u64(&t, r->d[2]);
  134|  31.1k|    secp256k1_u128_accum_u64(&t, ((uint64_t)((bit >> 6) == 2)) << (bit & 0x3F));
  135|  31.1k|    r->d[2] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);
  136|  31.1k|    secp256k1_u128_accum_u64(&t, r->d[3]);
  137|  31.1k|    secp256k1_u128_accum_u64(&t, ((uint64_t)((bit >> 6) == 3)) << (bit & 0x3F));
  138|  31.1k|    r->d[3] = secp256k1_u128_to_u64(&t);
  139|       |
  140|  31.1k|    SECP256K1_SCALAR_VERIFY(r);
  ------------------
  |  |  103|  31.1k|#define SECP256K1_SCALAR_VERIFY(r) secp256k1_scalar_verify(r)
  ------------------
  141|  31.1k|    VERIFY_CHECK(secp256k1_u128_hi_u64(&t) == 0);
  142|  31.1k|}
secp256k1.c:secp256k1_scalar_get_bits_var:
   49|   857k|SECP256K1_INLINE static uint32_t secp256k1_scalar_get_bits_var(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {
   50|   857k|    SECP256K1_SCALAR_VERIFY(a);
  ------------------
  |  |  103|   857k|#define SECP256K1_SCALAR_VERIFY(r) secp256k1_scalar_verify(r)
  ------------------
   51|   857k|    VERIFY_CHECK(count > 0 && count <= 32);
   52|   857k|    VERIFY_CHECK(offset + count <= 256);
   53|       |
   54|   857k|    if ((offset + count - 1) >> 6 == offset >> 6) {
  ------------------
  |  Branch (54:9): [True: 786k, False: 71.3k]
  ------------------
   55|   786k|        return secp256k1_scalar_get_bits_limb32(a, offset, count);
   56|   786k|    } else {
   57|  71.3k|        VERIFY_CHECK((offset >> 6) + 1 < 4);
   58|  71.3k|        return ((a->d[offset >> 6] >> (offset & 0x3F)) | (a->d[(offset >> 6) + 1] << (64 - (offset & 0x3F)))) & (0xFFFFFFFF >> (32 - count));
   59|  71.3k|    }
   60|   857k|}
secp256k1.c:secp256k1_scalar_split_128:
  866|  5.70k|static void secp256k1_scalar_split_128(secp256k1_scalar *r1, secp256k1_scalar *r2, const secp256k1_scalar *k) {
  867|  5.70k|    SECP256K1_SCALAR_VERIFY(k);
  ------------------
  |  |  103|  5.70k|#define SECP256K1_SCALAR_VERIFY(r) secp256k1_scalar_verify(r)
  ------------------
  868|       |
  869|  5.70k|    r1->d[0] = k->d[0];
  870|  5.70k|    r1->d[1] = k->d[1];
  871|  5.70k|    r1->d[2] = 0;
  872|  5.70k|    r1->d[3] = 0;
  873|  5.70k|    r2->d[0] = k->d[2];
  874|  5.70k|    r2->d[1] = k->d[3];
  875|  5.70k|    r2->d[2] = 0;
  876|  5.70k|    r2->d[3] = 0;
  877|       |
  878|  5.70k|    SECP256K1_SCALAR_VERIFY(r1);
  ------------------
  |  |  103|  5.70k|#define SECP256K1_SCALAR_VERIFY(r) secp256k1_scalar_verify(r)
  ------------------
  879|  5.70k|    SECP256K1_SCALAR_VERIFY(r2);
  ------------------
  |  |  103|  5.70k|#define SECP256K1_SCALAR_VERIFY(r) secp256k1_scalar_verify(r)
  ------------------
  880|  5.70k|}
secp256k1.c:secp256k1_scalar_is_zero:
  167|   165k|SECP256K1_INLINE static int secp256k1_scalar_is_zero(const secp256k1_scalar *a) {
  168|   165k|    SECP256K1_SCALAR_VERIFY(a);
  ------------------
  |  |  103|   165k|#define SECP256K1_SCALAR_VERIFY(r) secp256k1_scalar_verify(r)
  ------------------
  169|       |
  170|   165k|    return (a->d[0] | a->d[1] | a->d[2] | a->d[3]) == 0;
  171|   165k|}
secp256k1.c:secp256k1_scalar_mul:
  855|  49.3k|static void secp256k1_scalar_mul(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {
  856|  49.3k|    uint64_t l[8];
  857|  49.3k|    SECP256K1_SCALAR_VERIFY(a);
  ------------------
  |  |  103|  49.3k|#define SECP256K1_SCALAR_VERIFY(r) secp256k1_scalar_verify(r)
  ------------------
  858|  49.3k|    SECP256K1_SCALAR_VERIFY(b);
  ------------------
  |  |  103|  49.3k|#define SECP256K1_SCALAR_VERIFY(r) secp256k1_scalar_verify(r)
  ------------------
  859|       |
  860|  49.3k|    secp256k1_scalar_mul_512(l, a, b);
  861|  49.3k|    secp256k1_scalar_reduce_512(r, l);
  862|       |
  863|  49.3k|    SECP256K1_SCALAR_VERIFY(r);
  ------------------
  |  |  103|  49.3k|#define SECP256K1_SCALAR_VERIFY(r) secp256k1_scalar_verify(r)
  ------------------
  864|  49.3k|}
secp256k1.c:secp256k1_scalar_reduce_512:
  347|  49.3k|static void secp256k1_scalar_reduce_512(secp256k1_scalar *r, const uint64_t *l) {
  348|  49.3k|#ifdef USE_ASM_X86_64
  349|       |    /* Reduce 512 bits into 385. */
  350|  49.3k|    uint64_t m0, m1, m2, m3, m4, m5, m6;
  351|  49.3k|    uint64_t p0, p1, p2, p3, p4;
  352|  49.3k|    uint64_t c;
  353|       |
  354|  49.3k|    __asm__ __volatile__(
  355|       |    /* Preload. */
  356|  49.3k|    "movq 32(%%rsi), %%r11\n"
  357|  49.3k|    "movq 40(%%rsi), %%r12\n"
  358|  49.3k|    "movq 48(%%rsi), %%r13\n"
  359|  49.3k|    "movq 56(%%rsi), %%r14\n"
  360|       |    /* Initialize r8,r9,r10 */
  361|  49.3k|    "movq 0(%%rsi), %%r8\n"
  362|  49.3k|    "xorq %%r9, %%r9\n"
  363|  49.3k|    "xorq %%r10, %%r10\n"
  364|       |    /* (r8,r9) += n0 * c0 */
  365|  49.3k|    "movq %8, %%rax\n"
  366|  49.3k|    "mulq %%r11\n"
  367|  49.3k|    "addq %%rax, %%r8\n"
  368|  49.3k|    "adcq %%rdx, %%r9\n"
  369|       |    /* extract m0 */
  370|  49.3k|    "movq %%r8, %q0\n"
  371|  49.3k|    "xorq %%r8, %%r8\n"
  372|       |    /* (r9,r10) += l1 */
  373|  49.3k|    "addq 8(%%rsi), %%r9\n"
  374|  49.3k|    "adcq $0, %%r10\n"
  375|       |    /* (r9,r10,r8) += n1 * c0 */
  376|  49.3k|    "movq %8, %%rax\n"
  377|  49.3k|    "mulq %%r12\n"
  378|  49.3k|    "addq %%rax, %%r9\n"
  379|  49.3k|    "adcq %%rdx, %%r10\n"
  380|  49.3k|    "adcq $0, %%r8\n"
  381|       |    /* (r9,r10,r8) += n0 * c1 */
  382|  49.3k|    "movq %9, %%rax\n"
  383|  49.3k|    "mulq %%r11\n"
  384|  49.3k|    "addq %%rax, %%r9\n"
  385|  49.3k|    "adcq %%rdx, %%r10\n"
  386|  49.3k|    "adcq $0, %%r8\n"
  387|       |    /* extract m1 */
  388|  49.3k|    "movq %%r9, %q1\n"
  389|  49.3k|    "xorq %%r9, %%r9\n"
  390|       |    /* (r10,r8,r9) += l2 */
  391|  49.3k|    "addq 16(%%rsi), %%r10\n"
  392|  49.3k|    "adcq $0, %%r8\n"
  393|  49.3k|    "adcq $0, %%r9\n"
  394|       |    /* (r10,r8,r9) += n2 * c0 */
  395|  49.3k|    "movq %8, %%rax\n"
  396|  49.3k|    "mulq %%r13\n"
  397|  49.3k|    "addq %%rax, %%r10\n"
  398|  49.3k|    "adcq %%rdx, %%r8\n"
  399|  49.3k|    "adcq $0, %%r9\n"
  400|       |    /* (r10,r8,r9) += n1 * c1 */
  401|  49.3k|    "movq %9, %%rax\n"
  402|  49.3k|    "mulq %%r12\n"
  403|  49.3k|    "addq %%rax, %%r10\n"
  404|  49.3k|    "adcq %%rdx, %%r8\n"
  405|  49.3k|    "adcq $0, %%r9\n"
  406|       |    /* (r10,r8,r9) += n0 */
  407|  49.3k|    "addq %%r11, %%r10\n"
  408|  49.3k|    "adcq $0, %%r8\n"
  409|  49.3k|    "adcq $0, %%r9\n"
  410|       |    /* extract m2 */
  411|  49.3k|    "movq %%r10, %q2\n"
  412|  49.3k|    "xorq %%r10, %%r10\n"
  413|       |    /* (r8,r9,r10) += l3 */
  414|  49.3k|    "addq 24(%%rsi), %%r8\n"
  415|  49.3k|    "adcq $0, %%r9\n"
  416|  49.3k|    "adcq $0, %%r10\n"
  417|       |    /* (r8,r9,r10) += n3 * c0 */
  418|  49.3k|    "movq %8, %%rax\n"
  419|  49.3k|    "mulq %%r14\n"
  420|  49.3k|    "addq %%rax, %%r8\n"
  421|  49.3k|    "adcq %%rdx, %%r9\n"
  422|  49.3k|    "adcq $0, %%r10\n"
  423|       |    /* (r8,r9,r10) += n2 * c1 */
  424|  49.3k|    "movq %9, %%rax\n"
  425|  49.3k|    "mulq %%r13\n"
  426|  49.3k|    "addq %%rax, %%r8\n"
  427|  49.3k|    "adcq %%rdx, %%r9\n"
  428|  49.3k|    "adcq $0, %%r10\n"
  429|       |    /* (r8,r9,r10) += n1 */
  430|  49.3k|    "addq %%r12, %%r8\n"
  431|  49.3k|    "adcq $0, %%r9\n"
  432|  49.3k|    "adcq $0, %%r10\n"
  433|       |    /* extract m3 */
  434|  49.3k|    "movq %%r8, %q3\n"
  435|  49.3k|    "xorq %%r8, %%r8\n"
  436|       |    /* (r9,r10,r8) += n3 * c1 */
  437|  49.3k|    "movq %9, %%rax\n"
  438|  49.3k|    "mulq %%r14\n"
  439|  49.3k|    "addq %%rax, %%r9\n"
  440|  49.3k|    "adcq %%rdx, %%r10\n"
  441|  49.3k|    "adcq $0, %%r8\n"
  442|       |    /* (r9,r10,r8) += n2 */
  443|  49.3k|    "addq %%r13, %%r9\n"
  444|  49.3k|    "adcq $0, %%r10\n"
  445|  49.3k|    "adcq $0, %%r8\n"
  446|       |    /* extract m4 */
  447|  49.3k|    "movq %%r9, %q4\n"
  448|       |    /* (r10,r8) += n3 */
  449|  49.3k|    "addq %%r14, %%r10\n"
  450|  49.3k|    "adcq $0, %%r8\n"
  451|       |    /* extract m5 */
  452|  49.3k|    "movq %%r10, %q5\n"
  453|       |    /* extract m6 */
  454|  49.3k|    "movq %%r8, %q6\n"
  455|  49.3k|    : "=&g"(m0), "=&g"(m1), "=&g"(m2), "=g"(m3), "=g"(m4), "=g"(m5), "=g"(m6)
  456|  49.3k|    : "S"(l), "i"(SECP256K1_N_C_0), "i"(SECP256K1_N_C_1)
  ------------------
  |  |   22|  49.3k|#define SECP256K1_N_C_0 (~SECP256K1_N_0 + 1)
  |  |  ------------------
  |  |  |  |   16|  49.3k|#define SECP256K1_N_0 ((uint64_t)0xBFD25E8CD0364141ULL)
  |  |  ------------------
  ------------------
                  : "S"(l), "i"(SECP256K1_N_C_0), "i"(SECP256K1_N_C_1)
  ------------------
  |  |   23|  49.3k|#define SECP256K1_N_C_1 (~SECP256K1_N_1)
  |  |  ------------------
  |  |  |  |   17|  49.3k|#define SECP256K1_N_1 ((uint64_t)0xBAAEDCE6AF48A03BULL)
  |  |  ------------------
  ------------------
  457|  49.3k|    : "rax", "rdx", "r8", "r9", "r10", "r11", "r12", "r13", "r14", "cc");
  458|       |
  459|  49.3k|    SECP256K1_CHECKMEM_MSAN_DEFINE(&m0, sizeof(m0));
  ------------------
  |  |   60|  49.3k|#  define SECP256K1_CHECKMEM_MSAN_DEFINE(p, len) SECP256K1_CHECKMEM_NOOP((p), (len))
  |  |  ------------------
  |  |  |  |   42|  49.3k|#define SECP256K1_CHECKMEM_NOOP(p, len) do { (void)(p); (void)(len); } while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (42:78): [Folded, False: 49.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  460|  49.3k|    SECP256K1_CHECKMEM_MSAN_DEFINE(&m1, sizeof(m1));
  ------------------
  |  |   60|  49.3k|#  define SECP256K1_CHECKMEM_MSAN_DEFINE(p, len) SECP256K1_CHECKMEM_NOOP((p), (len))
  |  |  ------------------
  |  |  |  |   42|  49.3k|#define SECP256K1_CHECKMEM_NOOP(p, len) do { (void)(p); (void)(len); } while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (42:78): [Folded, False: 49.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  461|  49.3k|    SECP256K1_CHECKMEM_MSAN_DEFINE(&m2, sizeof(m2));
  ------------------
  |  |   60|  49.3k|#  define SECP256K1_CHECKMEM_MSAN_DEFINE(p, len) SECP256K1_CHECKMEM_NOOP((p), (len))
  |  |  ------------------
  |  |  |  |   42|  49.3k|#define SECP256K1_CHECKMEM_NOOP(p, len) do { (void)(p); (void)(len); } while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (42:78): [Folded, False: 49.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  462|  49.3k|    SECP256K1_CHECKMEM_MSAN_DEFINE(&m3, sizeof(m3));
  ------------------
  |  |   60|  49.3k|#  define SECP256K1_CHECKMEM_MSAN_DEFINE(p, len) SECP256K1_CHECKMEM_NOOP((p), (len))
  |  |  ------------------
  |  |  |  |   42|  49.3k|#define SECP256K1_CHECKMEM_NOOP(p, len) do { (void)(p); (void)(len); } while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (42:78): [Folded, False: 49.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  463|  49.3k|    SECP256K1_CHECKMEM_MSAN_DEFINE(&m4, sizeof(m4));
  ------------------
  |  |   60|  49.3k|#  define SECP256K1_CHECKMEM_MSAN_DEFINE(p, len) SECP256K1_CHECKMEM_NOOP((p), (len))
  |  |  ------------------
  |  |  |  |   42|  49.3k|#define SECP256K1_CHECKMEM_NOOP(p, len) do { (void)(p); (void)(len); } while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (42:78): [Folded, False: 49.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  464|  49.3k|    SECP256K1_CHECKMEM_MSAN_DEFINE(&m5, sizeof(m5));
  ------------------
  |  |   60|  49.3k|#  define SECP256K1_CHECKMEM_MSAN_DEFINE(p, len) SECP256K1_CHECKMEM_NOOP((p), (len))
  |  |  ------------------
  |  |  |  |   42|  49.3k|#define SECP256K1_CHECKMEM_NOOP(p, len) do { (void)(p); (void)(len); } while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (42:78): [Folded, False: 49.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  465|  49.3k|    SECP256K1_CHECKMEM_MSAN_DEFINE(&m6, sizeof(m6));
  ------------------
  |  |   60|  49.3k|#  define SECP256K1_CHECKMEM_MSAN_DEFINE(p, len) SECP256K1_CHECKMEM_NOOP((p), (len))
  |  |  ------------------
  |  |  |  |   42|  49.3k|#define SECP256K1_CHECKMEM_NOOP(p, len) do { (void)(p); (void)(len); } while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (42:78): [Folded, False: 49.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  466|       |
  467|       |    /* Reduce 385 bits into 258. */
  468|  49.3k|    __asm__ __volatile__(
  469|       |    /* Preload */
  470|  49.3k|    "movq %q9, %%r11\n"
  471|  49.3k|    "movq %q10, %%r12\n"
  472|  49.3k|    "movq %q11, %%r13\n"
  473|       |    /* Initialize (r8,r9,r10) */
  474|  49.3k|    "movq %q5, %%r8\n"
  475|  49.3k|    "xorq %%r9, %%r9\n"
  476|  49.3k|    "xorq %%r10, %%r10\n"
  477|       |    /* (r8,r9) += m4 * c0 */
  478|  49.3k|    "movq %12, %%rax\n"
  479|  49.3k|    "mulq %%r11\n"
  480|  49.3k|    "addq %%rax, %%r8\n"
  481|  49.3k|    "adcq %%rdx, %%r9\n"
  482|       |    /* extract p0 */
  483|  49.3k|    "movq %%r8, %q0\n"
  484|  49.3k|    "xorq %%r8, %%r8\n"
  485|       |    /* (r9,r10) += m1 */
  486|  49.3k|    "addq %q6, %%r9\n"
  487|  49.3k|    "adcq $0, %%r10\n"
  488|       |    /* (r9,r10,r8) += m5 * c0 */
  489|  49.3k|    "movq %12, %%rax\n"
  490|  49.3k|    "mulq %%r12\n"
  491|  49.3k|    "addq %%rax, %%r9\n"
  492|  49.3k|    "adcq %%rdx, %%r10\n"
  493|  49.3k|    "adcq $0, %%r8\n"
  494|       |    /* (r9,r10,r8) += m4 * c1 */
  495|  49.3k|    "movq %13, %%rax\n"
  496|  49.3k|    "mulq %%r11\n"
  497|  49.3k|    "addq %%rax, %%r9\n"
  498|  49.3k|    "adcq %%rdx, %%r10\n"
  499|  49.3k|    "adcq $0, %%r8\n"
  500|       |    /* extract p1 */
  501|  49.3k|    "movq %%r9, %q1\n"
  502|  49.3k|    "xorq %%r9, %%r9\n"
  503|       |    /* (r10,r8,r9) += m2 */
  504|  49.3k|    "addq %q7, %%r10\n"
  505|  49.3k|    "adcq $0, %%r8\n"
  506|  49.3k|    "adcq $0, %%r9\n"
  507|       |    /* (r10,r8,r9) += m6 * c0 */
  508|  49.3k|    "movq %12, %%rax\n"
  509|  49.3k|    "mulq %%r13\n"
  510|  49.3k|    "addq %%rax, %%r10\n"
  511|  49.3k|    "adcq %%rdx, %%r8\n"
  512|  49.3k|    "adcq $0, %%r9\n"
  513|       |    /* (r10,r8,r9) += m5 * c1 */
  514|  49.3k|    "movq %13, %%rax\n"
  515|  49.3k|    "mulq %%r12\n"
  516|  49.3k|    "addq %%rax, %%r10\n"
  517|  49.3k|    "adcq %%rdx, %%r8\n"
  518|  49.3k|    "adcq $0, %%r9\n"
  519|       |    /* (r10,r8,r9) += m4 */
  520|  49.3k|    "addq %%r11, %%r10\n"
  521|  49.3k|    "adcq $0, %%r8\n"
  522|  49.3k|    "adcq $0, %%r9\n"
  523|       |    /* extract p2 */
  524|  49.3k|    "movq %%r10, %q2\n"
  525|       |    /* (r8,r9) += m3 */
  526|  49.3k|    "addq %q8, %%r8\n"
  527|  49.3k|    "adcq $0, %%r9\n"
  528|       |    /* (r8,r9) += m6 * c1 */
  529|  49.3k|    "movq %13, %%rax\n"
  530|  49.3k|    "mulq %%r13\n"
  531|  49.3k|    "addq %%rax, %%r8\n"
  532|  49.3k|    "adcq %%rdx, %%r9\n"
  533|       |    /* (r8,r9) += m5 */
  534|  49.3k|    "addq %%r12, %%r8\n"
  535|  49.3k|    "adcq $0, %%r9\n"
  536|       |    /* extract p3 */
  537|  49.3k|    "movq %%r8, %q3\n"
  538|       |    /* (r9) += m6 */
  539|  49.3k|    "addq %%r13, %%r9\n"
  540|       |    /* extract p4 */
  541|  49.3k|    "movq %%r9, %q4\n"
  542|  49.3k|    : "=&g"(p0), "=&g"(p1), "=&g"(p2), "=g"(p3), "=g"(p4)
  543|  49.3k|    : "g"(m0), "g"(m1), "g"(m2), "g"(m3), "g"(m4), "g"(m5), "g"(m6), "i"(SECP256K1_N_C_0), "i"(SECP256K1_N_C_1)
  ------------------
  |  |   22|  49.3k|#define SECP256K1_N_C_0 (~SECP256K1_N_0 + 1)
  |  |  ------------------
  |  |  |  |   16|  49.3k|#define SECP256K1_N_0 ((uint64_t)0xBFD25E8CD0364141ULL)
  |  |  ------------------
  ------------------
                  : "g"(m0), "g"(m1), "g"(m2), "g"(m3), "g"(m4), "g"(m5), "g"(m6), "i"(SECP256K1_N_C_0), "i"(SECP256K1_N_C_1)
  ------------------
  |  |   23|  49.3k|#define SECP256K1_N_C_1 (~SECP256K1_N_1)
  |  |  ------------------
  |  |  |  |   17|  49.3k|#define SECP256K1_N_1 ((uint64_t)0xBAAEDCE6AF48A03BULL)
  |  |  ------------------
  ------------------
  544|  49.3k|    : "rax", "rdx", "r8", "r9", "r10", "r11", "r12", "r13", "cc");
  545|       |
  546|  49.3k|    SECP256K1_CHECKMEM_MSAN_DEFINE(&p0, sizeof(p0));
  ------------------
  |  |   60|  49.3k|#  define SECP256K1_CHECKMEM_MSAN_DEFINE(p, len) SECP256K1_CHECKMEM_NOOP((p), (len))
  |  |  ------------------
  |  |  |  |   42|  49.3k|#define SECP256K1_CHECKMEM_NOOP(p, len) do { (void)(p); (void)(len); } while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (42:78): [Folded, False: 49.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  547|  49.3k|    SECP256K1_CHECKMEM_MSAN_DEFINE(&p1, sizeof(p1));
  ------------------
  |  |   60|  49.3k|#  define SECP256K1_CHECKMEM_MSAN_DEFINE(p, len) SECP256K1_CHECKMEM_NOOP((p), (len))
  |  |  ------------------
  |  |  |  |   42|  49.3k|#define SECP256K1_CHECKMEM_NOOP(p, len) do { (void)(p); (void)(len); } while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (42:78): [Folded, False: 49.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  548|  49.3k|    SECP256K1_CHECKMEM_MSAN_DEFINE(&p2, sizeof(p2));
  ------------------
  |  |   60|  49.3k|#  define SECP256K1_CHECKMEM_MSAN_DEFINE(p, len) SECP256K1_CHECKMEM_NOOP((p), (len))
  |  |  ------------------
  |  |  |  |   42|  49.3k|#define SECP256K1_CHECKMEM_NOOP(p, len) do { (void)(p); (void)(len); } while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (42:78): [Folded, False: 49.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  549|  49.3k|    SECP256K1_CHECKMEM_MSAN_DEFINE(&p3, sizeof(p3));
  ------------------
  |  |   60|  49.3k|#  define SECP256K1_CHECKMEM_MSAN_DEFINE(p, len) SECP256K1_CHECKMEM_NOOP((p), (len))
  |  |  ------------------
  |  |  |  |   42|  49.3k|#define SECP256K1_CHECKMEM_NOOP(p, len) do { (void)(p); (void)(len); } while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (42:78): [Folded, False: 49.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  550|  49.3k|    SECP256K1_CHECKMEM_MSAN_DEFINE(&p4, sizeof(p4));
  ------------------
  |  |   60|  49.3k|#  define SECP256K1_CHECKMEM_MSAN_DEFINE(p, len) SECP256K1_CHECKMEM_NOOP((p), (len))
  |  |  ------------------
  |  |  |  |   42|  49.3k|#define SECP256K1_CHECKMEM_NOOP(p, len) do { (void)(p); (void)(len); } while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (42:78): [Folded, False: 49.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  551|       |
  552|       |    /* Reduce 258 bits into 256. */
  553|  49.3k|    __asm__ __volatile__(
  554|       |    /* Preload */
  555|  49.3k|    "movq %q5, %%r10\n"
  556|       |    /* (rax,rdx) = p4 * c0 */
  557|  49.3k|    "movq %7, %%rax\n"
  558|  49.3k|    "mulq %%r10\n"
  559|       |    /* (rax,rdx) += p0 */
  560|  49.3k|    "addq %q1, %%rax\n"
  561|  49.3k|    "adcq $0, %%rdx\n"
  562|       |    /* extract r0 */
  563|  49.3k|    "movq %%rax, 0(%q6)\n"
  564|       |    /* Move to (r8,r9) */
  565|  49.3k|    "movq %%rdx, %%r8\n"
  566|  49.3k|    "xorq %%r9, %%r9\n"
  567|       |    /* (r8,r9) += p1 */
  568|  49.3k|    "addq %q2, %%r8\n"
  569|  49.3k|    "adcq $0, %%r9\n"
  570|       |    /* (r8,r9) += p4 * c1 */
  571|  49.3k|    "movq %8, %%rax\n"
  572|  49.3k|    "mulq %%r10\n"
  573|  49.3k|    "addq %%rax, %%r8\n"
  574|  49.3k|    "adcq %%rdx, %%r9\n"
  575|       |    /* Extract r1 */
  576|  49.3k|    "movq %%r8, 8(%q6)\n"
  577|  49.3k|    "xorq %%r8, %%r8\n"
  578|       |    /* (r9,r8) += p4 */
  579|  49.3k|    "addq %%r10, %%r9\n"
  580|  49.3k|    "adcq $0, %%r8\n"
  581|       |    /* (r9,r8) += p2 */
  582|  49.3k|    "addq %q3, %%r9\n"
  583|  49.3k|    "adcq $0, %%r8\n"
  584|       |    /* Extract r2 */
  585|  49.3k|    "movq %%r9, 16(%q6)\n"
  586|  49.3k|    "xorq %%r9, %%r9\n"
  587|       |    /* (r8,r9) += p3 */
  588|  49.3k|    "addq %q4, %%r8\n"
  589|  49.3k|    "adcq $0, %%r9\n"
  590|       |    /* Extract r3 */
  591|  49.3k|    "movq %%r8, 24(%q6)\n"
  592|       |    /* Extract c */
  593|  49.3k|    "movq %%r9, %q0\n"
  594|  49.3k|    : "=g"(c)
  595|  49.3k|    : "g"(p0), "g"(p1), "g"(p2), "g"(p3), "g"(p4), "D"(r), "i"(SECP256K1_N_C_0), "i"(SECP256K1_N_C_1)
  ------------------
  |  |   22|  49.3k|#define SECP256K1_N_C_0 (~SECP256K1_N_0 + 1)
  |  |  ------------------
  |  |  |  |   16|  49.3k|#define SECP256K1_N_0 ((uint64_t)0xBFD25E8CD0364141ULL)
  |  |  ------------------
  ------------------
                  : "g"(p0), "g"(p1), "g"(p2), "g"(p3), "g"(p4), "D"(r), "i"(SECP256K1_N_C_0), "i"(SECP256K1_N_C_1)
  ------------------
  |  |   23|  49.3k|#define SECP256K1_N_C_1 (~SECP256K1_N_1)
  |  |  ------------------
  |  |  |  |   17|  49.3k|#define SECP256K1_N_1 ((uint64_t)0xBAAEDCE6AF48A03BULL)
  |  |  ------------------
  ------------------
  596|  49.3k|    : "rax", "rdx", "r8", "r9", "r10", "cc", "memory");
  597|       |
  598|  49.3k|    SECP256K1_CHECKMEM_MSAN_DEFINE(r, sizeof(*r));
  ------------------
  |  |   60|  49.3k|#  define SECP256K1_CHECKMEM_MSAN_DEFINE(p, len) SECP256K1_CHECKMEM_NOOP((p), (len))
  |  |  ------------------
  |  |  |  |   42|  49.3k|#define SECP256K1_CHECKMEM_NOOP(p, len) do { (void)(p); (void)(len); } while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (42:78): [Folded, False: 49.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  599|  49.3k|    SECP256K1_CHECKMEM_MSAN_DEFINE(&c, sizeof(c));
  ------------------
  |  |   60|  49.3k|#  define SECP256K1_CHECKMEM_MSAN_DEFINE(p, len) SECP256K1_CHECKMEM_NOOP((p), (len))
  |  |  ------------------
  |  |  |  |   42|  49.3k|#define SECP256K1_CHECKMEM_NOOP(p, len) do { (void)(p); (void)(len); } while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (42:78): [Folded, False: 49.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  600|       |
  601|       |#else
  602|       |    secp256k1_uint128 c128;
  603|       |    uint64_t c, c0, c1, c2;
  604|       |    uint64_t n0 = l[4], n1 = l[5], n2 = l[6], n3 = l[7];
  605|       |    uint64_t m0, m1, m2, m3, m4, m5;
  606|       |    uint32_t m6;
  607|       |    uint64_t p0, p1, p2, p3;
  608|       |    uint32_t p4;
  609|       |
  610|       |    /* Reduce 512 bits into 385. */
  611|       |    /* m[0..6] = l[0..3] + n[0..3] * SECP256K1_N_C. */
  612|       |    c0 = l[0]; c1 = 0; c2 = 0;
  613|       |    muladd_fast(n0, SECP256K1_N_C_0);
  614|       |    extract_fast(m0);
  615|       |    sumadd_fast(l[1]);
  616|       |    muladd(n1, SECP256K1_N_C_0);
  617|       |    muladd(n0, SECP256K1_N_C_1);
  618|       |    extract(m1);
  619|       |    sumadd(l[2]);
  620|       |    muladd(n2, SECP256K1_N_C_0);
  621|       |    muladd(n1, SECP256K1_N_C_1);
  622|       |    sumadd(n0);
  623|       |    extract(m2);
  624|       |    sumadd(l[3]);
  625|       |    muladd(n3, SECP256K1_N_C_0);
  626|       |    muladd(n2, SECP256K1_N_C_1);
  627|       |    sumadd(n1);
  628|       |    extract(m3);
  629|       |    muladd(n3, SECP256K1_N_C_1);
  630|       |    sumadd(n2);
  631|       |    extract(m4);
  632|       |    sumadd_fast(n3);
  633|       |    extract_fast(m5);
  634|       |    VERIFY_CHECK(c0 <= 1);
  635|       |    m6 = c0;
  636|       |
  637|       |    /* Reduce 385 bits into 258. */
  638|       |    /* p[0..4] = m[0..3] + m[4..6] * SECP256K1_N_C. */
  639|       |    c0 = m0; c1 = 0; c2 = 0;
  640|       |    muladd_fast(m4, SECP256K1_N_C_0);
  641|       |    extract_fast(p0);
  642|       |    sumadd_fast(m1);
  643|       |    muladd(m5, SECP256K1_N_C_0);
  644|       |    muladd(m4, SECP256K1_N_C_1);
  645|       |    extract(p1);
  646|       |    sumadd(m2);
  647|       |    muladd(m6, SECP256K1_N_C_0);
  648|       |    muladd(m5, SECP256K1_N_C_1);
  649|       |    sumadd(m4);
  650|       |    extract(p2);
  651|       |    sumadd_fast(m3);
  652|       |    muladd_fast(m6, SECP256K1_N_C_1);
  653|       |    sumadd_fast(m5);
  654|       |    extract_fast(p3);
  655|       |    p4 = c0 + m6;
  656|       |    VERIFY_CHECK(p4 <= 2);
  657|       |
  658|       |    /* Reduce 258 bits into 256. */
  659|       |    /* r[0..3] = p[0..3] + p[4] * SECP256K1_N_C. */
  660|       |    secp256k1_u128_from_u64(&c128, p0);
  661|       |    secp256k1_u128_accum_mul(&c128, SECP256K1_N_C_0, p4);
  662|       |    r->d[0] = secp256k1_u128_to_u64(&c128); secp256k1_u128_rshift(&c128, 64);
  663|       |    secp256k1_u128_accum_u64(&c128, p1);
  664|       |    secp256k1_u128_accum_mul(&c128, SECP256K1_N_C_1, p4);
  665|       |    r->d[1] = secp256k1_u128_to_u64(&c128); secp256k1_u128_rshift(&c128, 64);
  666|       |    secp256k1_u128_accum_u64(&c128, p2);
  667|       |    secp256k1_u128_accum_u64(&c128, p4);
  668|       |    r->d[2] = secp256k1_u128_to_u64(&c128); secp256k1_u128_rshift(&c128, 64);
  669|       |    secp256k1_u128_accum_u64(&c128, p3);
  670|       |    r->d[3] = secp256k1_u128_to_u64(&c128);
  671|       |    c = secp256k1_u128_hi_u64(&c128);
  672|       |#endif
  673|       |
  674|       |    /* Final reduction of r. */
  675|  49.3k|    secp256k1_scalar_reduce(r, c + secp256k1_scalar_check_overflow(r));
  676|  49.3k|}
secp256k1.c:secp256k1_scalar_add:
   94|   142k|static int secp256k1_scalar_add(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {
   95|   142k|    int overflow;
   96|   142k|    secp256k1_uint128 t;
   97|   142k|    SECP256K1_SCALAR_VERIFY(a);
  ------------------
  |  |  103|   142k|#define SECP256K1_SCALAR_VERIFY(r) secp256k1_scalar_verify(r)
  ------------------
   98|   142k|    SECP256K1_SCALAR_VERIFY(b);
  ------------------
  |  |  103|   142k|#define SECP256K1_SCALAR_VERIFY(r) secp256k1_scalar_verify(r)
  ------------------
   99|       |
  100|   142k|    secp256k1_u128_from_u64(&t, a->d[0]);
  101|   142k|    secp256k1_u128_accum_u64(&t, b->d[0]);
  102|   142k|    r->d[0] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);
  103|   142k|    secp256k1_u128_accum_u64(&t, a->d[1]);
  104|   142k|    secp256k1_u128_accum_u64(&t, b->d[1]);
  105|   142k|    r->d[1] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);
  106|   142k|    secp256k1_u128_accum_u64(&t, a->d[2]);
  107|   142k|    secp256k1_u128_accum_u64(&t, b->d[2]);
  108|   142k|    r->d[2] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);
  109|   142k|    secp256k1_u128_accum_u64(&t, a->d[3]);
  110|   142k|    secp256k1_u128_accum_u64(&t, b->d[3]);
  111|   142k|    r->d[3] = secp256k1_u128_to_u64(&t); secp256k1_u128_rshift(&t, 64);
  112|   142k|    overflow = secp256k1_u128_to_u64(&t) + secp256k1_scalar_check_overflow(r);
  113|   142k|    VERIFY_CHECK(overflow == 0 || overflow == 1);
  114|   142k|    secp256k1_scalar_reduce(r, overflow);
  115|       |
  116|   142k|    SECP256K1_SCALAR_VERIFY(r);
  ------------------
  |  |  103|   142k|#define SECP256K1_SCALAR_VERIFY(r) secp256k1_scalar_verify(r)
  ------------------
  117|   142k|    return overflow;
  118|   142k|}

secp256k1.c:secp256k1_scalar_verify:
   42|  4.66M|static void secp256k1_scalar_verify(const secp256k1_scalar *r) {
   43|  4.66M|    VERIFY_CHECK(secp256k1_scalar_check_overflow(r) == 0);
   44|       |
   45|  4.66M|    (void)r;
   46|  4.66M|}
secp256k1.c:secp256k1_scalar_set_b32_seckey:
   34|  99.9k|static int secp256k1_scalar_set_b32_seckey(secp256k1_scalar *r, const unsigned char *bin) {
   35|  99.9k|    int overflow;
   36|  99.9k|    secp256k1_scalar_set_b32(r, bin, &overflow);
   37|       |
   38|  99.9k|    SECP256K1_SCALAR_VERIFY(r);
  ------------------
  |  |  103|  99.9k|#define SECP256K1_SCALAR_VERIFY(r) secp256k1_scalar_verify(r)
  ------------------
   39|  99.9k|    return (!overflow) & (!secp256k1_scalar_is_zero(r));
   40|  99.9k|}
secp256k1.c:secp256k1_scalar_clear:
   30|   191k|SECP256K1_INLINE static void secp256k1_scalar_clear(secp256k1_scalar *r) {
   31|   191k|    secp256k1_memclear(r, sizeof(secp256k1_scalar));
   32|   191k|}
secp256k1.c:secp256k1_scalar_split_lambda:
  142|  15.5k|static void secp256k1_scalar_split_lambda(secp256k1_scalar * SECP256K1_RESTRICT r1, secp256k1_scalar * SECP256K1_RESTRICT r2, const secp256k1_scalar * SECP256K1_RESTRICT k) {
  143|  15.5k|    secp256k1_scalar c1, c2;
  144|  15.5k|    static const secp256k1_scalar minus_b1 = SECP256K1_SCALAR_CONST(
  ------------------
  |  |   17|  15.5k|#define SECP256K1_SCALAR_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {{((uint64_t)(d1)) << 32 | (d0), ((uint64_t)(d3)) << 32 | (d2), ((uint64_t)(d5)) << 32 | (d4), ((uint64_t)(d7)) << 32 | (d6)}}
  ------------------
  145|  15.5k|        0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,
  146|  15.5k|        0xE4437ED6UL, 0x010E8828UL, 0x6F547FA9UL, 0x0ABFE4C3UL
  147|  15.5k|    );
  148|  15.5k|    static const secp256k1_scalar minus_b2 = SECP256K1_SCALAR_CONST(
  ------------------
  |  |   17|  15.5k|#define SECP256K1_SCALAR_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {{((uint64_t)(d1)) << 32 | (d0), ((uint64_t)(d3)) << 32 | (d2), ((uint64_t)(d5)) << 32 | (d4), ((uint64_t)(d7)) << 32 | (d6)}}
  ------------------
  149|  15.5k|        0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFFUL, 0xFFFFFFFEUL,
  150|  15.5k|        0x8A280AC5UL, 0x0774346DUL, 0xD765CDA8UL, 0x3DB1562CUL
  151|  15.5k|    );
  152|  15.5k|    static const secp256k1_scalar g1 = SECP256K1_SCALAR_CONST(
  ------------------
  |  |   17|  15.5k|#define SECP256K1_SCALAR_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {{((uint64_t)(d1)) << 32 | (d0), ((uint64_t)(d3)) << 32 | (d2), ((uint64_t)(d5)) << 32 | (d4), ((uint64_t)(d7)) << 32 | (d6)}}
  ------------------
  153|  15.5k|        0x3086D221UL, 0xA7D46BCDUL, 0xE86C90E4UL, 0x9284EB15UL,
  154|  15.5k|        0x3DAA8A14UL, 0x71E8CA7FUL, 0xE893209AUL, 0x45DBB031UL
  155|  15.5k|    );
  156|  15.5k|    static const secp256k1_scalar g2 = SECP256K1_SCALAR_CONST(
  ------------------
  |  |   17|  15.5k|#define SECP256K1_SCALAR_CONST(d7, d6, d5, d4, d3, d2, d1, d0) {{((uint64_t)(d1)) << 32 | (d0), ((uint64_t)(d3)) << 32 | (d2), ((uint64_t)(d5)) << 32 | (d4), ((uint64_t)(d7)) << 32 | (d6)}}
  ------------------
  157|  15.5k|        0xE4437ED6UL, 0x010E8828UL, 0x6F547FA9UL, 0x0ABFE4C4UL,
  158|  15.5k|        0x221208ACUL, 0x9DF506C6UL, 0x1571B4AEUL, 0x8AC47F71UL
  159|  15.5k|    );
  160|  15.5k|    SECP256K1_SCALAR_VERIFY(k);
  ------------------
  |  |  103|  15.5k|#define SECP256K1_SCALAR_VERIFY(r) secp256k1_scalar_verify(r)
  ------------------
  161|  15.5k|    VERIFY_CHECK(r1 != k);
  162|  15.5k|    VERIFY_CHECK(r2 != k);
  163|  15.5k|    VERIFY_CHECK(r1 != r2);
  164|       |
  165|       |    /* these _var calls are constant time since the shift amount is constant */
  166|  15.5k|    secp256k1_scalar_mul_shift_var(&c1, k, &g1, 384);
  167|  15.5k|    secp256k1_scalar_mul_shift_var(&c2, k, &g2, 384);
  168|  15.5k|    secp256k1_scalar_mul(&c1, &c1, &minus_b1);
  169|  15.5k|    secp256k1_scalar_mul(&c2, &c2, &minus_b2);
  170|  15.5k|    secp256k1_scalar_add(r2, &c1, &c2);
  171|  15.5k|    secp256k1_scalar_mul(r1, r2, &secp256k1_const_lambda);
  172|  15.5k|    secp256k1_scalar_negate(r1, r1);
  173|  15.5k|    secp256k1_scalar_add(r1, r1, k);
  174|       |
  175|  15.5k|    SECP256K1_SCALAR_VERIFY(r1);
  ------------------
  |  |  103|  15.5k|#define SECP256K1_SCALAR_VERIFY(r) secp256k1_scalar_verify(r)
  ------------------
  176|  15.5k|    SECP256K1_SCALAR_VERIFY(r2);
  ------------------
  |  |  103|  15.5k|#define SECP256K1_SCALAR_VERIFY(r) secp256k1_scalar_verify(r)
  ------------------
  177|       |#ifdef VERIFY
  178|       |    secp256k1_scalar_split_lambda_verify(r1, r2, k);
  179|       |#endif
  180|  15.5k|}

secp256k1_context_preallocated_destroy:
  176|      2|void secp256k1_context_preallocated_destroy(secp256k1_context* ctx) {
  177|      2|    ARG_CHECK_VOID(ctx == NULL || secp256k1_context_is_proper(ctx));
  ------------------
  |  |   52|      2|#define ARG_CHECK_VOID(cond) do { \
  |  |   53|      2|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|      4|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 2]
  |  |  |  |  |  Branch (136:39): [True: 0, False: 2]
  |  |  |  |  |  Branch (136:39): [True: 2, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   54|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   55|      0|        return; \
  |  |   56|      0|    } \
  |  |   57|      2|} while(0)
  |  |  ------------------
  |  |  |  Branch (57:9): [Folded, False: 2]
  |  |  ------------------
  ------------------
  178|       |
  179|       |    /* Defined as noop */
  180|      2|    if (ctx == NULL) {
  ------------------
  |  Branch (180:9): [True: 0, False: 2]
  ------------------
  181|      0|        return;
  182|      0|    }
  183|       |
  184|      2|    secp256k1_ecmult_gen_context_clear(&ctx->ecmult_gen_ctx);
  185|      2|}
secp256k1_context_destroy:
  187|      2|void secp256k1_context_destroy(secp256k1_context* ctx) {
  188|      2|    ARG_CHECK_VOID(ctx == NULL || secp256k1_context_is_proper(ctx));
  ------------------
  |  |   52|      2|#define ARG_CHECK_VOID(cond) do { \
  |  |   53|      2|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|      4|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 2]
  |  |  |  |  |  Branch (136:39): [True: 0, False: 2]
  |  |  |  |  |  Branch (136:39): [True: 2, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   54|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   55|      0|        return; \
  |  |   56|      0|    } \
  |  |   57|      2|} while(0)
  |  |  ------------------
  |  |  |  Branch (57:9): [Folded, False: 2]
  |  |  ------------------
  ------------------
  189|       |
  190|       |    /* Defined as noop */
  191|      2|    if (ctx == NULL) {
  ------------------
  |  Branch (191:9): [True: 0, False: 2]
  ------------------
  192|      0|        return;
  193|      0|    }
  194|       |
  195|      2|    secp256k1_context_preallocated_destroy(ctx);
  196|      2|    free(ctx);
  197|      2|}
secp256k1_ec_pubkey_serialize:
  268|  47.5k|int secp256k1_ec_pubkey_serialize(const secp256k1_context* ctx, unsigned char *output, size_t *outputlen, const secp256k1_pubkey* pubkey, unsigned int flags) {
  269|  47.5k|    secp256k1_ge Q;
  270|  47.5k|    size_t len;
  271|  47.5k|    int ret = 0;
  272|       |
  273|  47.5k|    VERIFY_CHECK(ctx != NULL);
  274|  47.5k|    ARG_CHECK(outputlen != NULL);
  ------------------
  |  |   45|  47.5k|#define ARG_CHECK(cond) do { \
  |  |   46|  47.5k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  47.5k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 47.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  47.5k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 47.5k]
  |  |  ------------------
  ------------------
  275|  47.5k|    ARG_CHECK(*outputlen >= ((flags & SECP256K1_FLAGS_BIT_COMPRESSION) ? 33u : 65u));
  ------------------
  |  |   45|  47.5k|#define ARG_CHECK(cond) do { \
  |  |   46|  47.5k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  95.0k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 47.5k]
  |  |  |  |  |  Branch (136:39): [True: 47.5k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  47.5k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 47.5k]
  |  |  ------------------
  ------------------
  276|  47.5k|    len = *outputlen;
  277|  47.5k|    *outputlen = 0;
  278|  47.5k|    ARG_CHECK(output != NULL);
  ------------------
  |  |   45|  47.5k|#define ARG_CHECK(cond) do { \
  |  |   46|  47.5k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  47.5k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 47.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  47.5k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 47.5k]
  |  |  ------------------
  ------------------
  279|  47.5k|    memset(output, 0, len);
  280|  47.5k|    ARG_CHECK(pubkey != NULL);
  ------------------
  |  |   45|  47.5k|#define ARG_CHECK(cond) do { \
  |  |   46|  47.5k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  47.5k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 47.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  47.5k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 47.5k]
  |  |  ------------------
  ------------------
  281|  47.5k|    ARG_CHECK((flags & SECP256K1_FLAGS_TYPE_MASK) == SECP256K1_FLAGS_TYPE_COMPRESSION);
  ------------------
  |  |   45|  47.5k|#define ARG_CHECK(cond) do { \
  |  |   46|  47.5k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  47.5k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 47.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  47.5k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 47.5k]
  |  |  ------------------
  ------------------
  282|  47.5k|    if (secp256k1_pubkey_load(ctx, &Q, pubkey)) {
  ------------------
  |  Branch (282:9): [True: 47.5k, False: 0]
  ------------------
  283|  47.5k|        ret = secp256k1_eckey_pubkey_serialize(&Q, output, &len, !!(flags & SECP256K1_FLAGS_BIT_COMPRESSION));
  ------------------
  |  |  210|  47.5k|#define SECP256K1_FLAGS_BIT_COMPRESSION (1 << 8)
  ------------------
  284|  47.5k|        if (ret) {
  ------------------
  |  Branch (284:13): [True: 47.5k, False: 0]
  ------------------
  285|  47.5k|            *outputlen = len;
  286|  47.5k|        }
  287|  47.5k|    }
  288|  47.5k|    return ret;
  289|  47.5k|}
secp256k1_ec_seckey_verify:
  580|  20.7k|int secp256k1_ec_seckey_verify(const secp256k1_context* ctx, const unsigned char *seckey) {
  581|  20.7k|    secp256k1_scalar sec;
  582|  20.7k|    int ret;
  583|  20.7k|    VERIFY_CHECK(ctx != NULL);
  584|  20.7k|    ARG_CHECK(seckey != NULL);
  ------------------
  |  |   45|  20.7k|#define ARG_CHECK(cond) do { \
  |  |   46|  20.7k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  20.7k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 20.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  20.7k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 20.7k]
  |  |  ------------------
  ------------------
  585|       |
  586|  20.7k|    ret = secp256k1_scalar_set_b32_seckey(&sec, seckey);
  587|  20.7k|    secp256k1_scalar_clear(&sec);
  588|  20.7k|    return ret;
  589|  20.7k|}
secp256k1_ec_pubkey_create:
  604|  45.4k|int secp256k1_ec_pubkey_create(const secp256k1_context* ctx, secp256k1_pubkey *pubkey, const unsigned char *seckey) {
  605|  45.4k|    secp256k1_ge p;
  606|  45.4k|    secp256k1_scalar seckey_scalar;
  607|  45.4k|    int ret = 0;
  608|  45.4k|    VERIFY_CHECK(ctx != NULL);
  609|  45.4k|    ARG_CHECK(pubkey != NULL);
  ------------------
  |  |   45|  45.4k|#define ARG_CHECK(cond) do { \
  |  |   46|  45.4k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  45.4k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 45.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  45.4k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 45.4k]
  |  |  ------------------
  ------------------
  610|  45.4k|    memset(pubkey, 0, sizeof(*pubkey));
  611|  45.4k|    ARG_CHECK(secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx));
  ------------------
  |  |   45|  45.4k|#define ARG_CHECK(cond) do { \
  |  |   46|  45.4k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  45.4k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 45.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  45.4k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 45.4k]
  |  |  ------------------
  ------------------
  612|  45.4k|    ARG_CHECK(seckey != NULL);
  ------------------
  |  |   45|  45.4k|#define ARG_CHECK(cond) do { \
  |  |   46|  45.4k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  45.4k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 45.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  45.4k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 45.4k]
  |  |  ------------------
  ------------------
  613|       |
  614|  45.4k|    ret = secp256k1_ec_pubkey_create_helper(&ctx->ecmult_gen_ctx, &seckey_scalar, &p, seckey);
  615|  45.4k|    secp256k1_pubkey_save(pubkey, &p);
  616|  45.4k|    secp256k1_memczero(pubkey, sizeof(*pubkey), !ret);
  617|       |
  618|  45.4k|    secp256k1_scalar_clear(&seckey_scalar);
  619|  45.4k|    return ret;
  620|  45.4k|}
secp256k1_ec_seckey_tweak_add:
  664|  18.1k|int secp256k1_ec_seckey_tweak_add(const secp256k1_context* ctx, unsigned char *seckey, const unsigned char *tweak32) {
  665|  18.1k|    secp256k1_scalar sec;
  666|  18.1k|    int ret = 0;
  667|  18.1k|    VERIFY_CHECK(ctx != NULL);
  668|  18.1k|    ARG_CHECK(seckey != NULL);
  ------------------
  |  |   45|  18.1k|#define ARG_CHECK(cond) do { \
  |  |   46|  18.1k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  18.1k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 18.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  18.1k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 18.1k]
  |  |  ------------------
  ------------------
  669|  18.1k|    ARG_CHECK(tweak32 != NULL);
  ------------------
  |  |   45|  18.1k|#define ARG_CHECK(cond) do { \
  |  |   46|  18.1k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  18.1k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 18.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  18.1k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 18.1k]
  |  |  ------------------
  ------------------
  670|       |
  671|  18.1k|    ret = secp256k1_scalar_set_b32_seckey(&sec, seckey);
  672|  18.1k|    ret &= secp256k1_ec_seckey_tweak_add_helper(&sec, tweak32);
  673|  18.1k|    secp256k1_scalar_cmov(&sec, &secp256k1_scalar_zero, !ret);
  674|  18.1k|    secp256k1_scalar_get_b32(seckey, &sec);
  675|       |
  676|  18.1k|    secp256k1_scalar_clear(&sec);
  677|  18.1k|    return ret;
  678|  18.1k|}
secp256k1.c:secp256k1_context_is_proper:
   82|      4|static int secp256k1_context_is_proper(const secp256k1_context* ctx) {
   83|      4|    return secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx);
   84|      4|}
secp256k1.c:secp256k1_pubkey_save:
  246|  55.8k|static void secp256k1_pubkey_save(secp256k1_pubkey* pubkey, secp256k1_ge* ge) {
  247|  55.8k|    secp256k1_ge_to_bytes(pubkey->data, ge);
  248|  55.8k|}
secp256k1.c:secp256k1_pubkey_load:
  240|  58.4k|static int secp256k1_pubkey_load(const secp256k1_context* ctx, secp256k1_ge* ge, const secp256k1_pubkey* pubkey) {
  241|  58.4k|    secp256k1_ge_from_bytes(ge, pubkey->data);
  242|  58.4k|    ARG_CHECK(!secp256k1_fe_is_zero(&ge->x));
  ------------------
  |  |   45|  58.4k|#define ARG_CHECK(cond) do { \
  |  |   46|  58.4k|    if (EXPECT(!(cond), 0)) { \
  |  |  ------------------
  |  |  |  |  136|  58.4k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (136:21): [True: 0, False: 58.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|        secp256k1_callback_call(&ctx->illegal_callback, #cond); \
  |  |   48|      0|        return 0; \
  |  |   49|      0|    } \
  |  |   50|  58.4k|} while(0)
  |  |  ------------------
  |  |  |  Branch (50:9): [Folded, False: 58.4k]
  |  |  ------------------
  ------------------
  243|  58.4k|    return 1;
  244|  58.4k|}
secp256k1.c:secp256k1_ec_pubkey_create_helper:
  591|  58.4k|static int secp256k1_ec_pubkey_create_helper(const secp256k1_ecmult_gen_context *ecmult_gen_ctx, secp256k1_scalar *seckey_scalar, secp256k1_ge *p, const unsigned char *seckey) {
  592|  58.4k|    secp256k1_gej pj;
  593|  58.4k|    int ret;
  594|       |
  595|  58.4k|    ret = secp256k1_scalar_set_b32_seckey(seckey_scalar, seckey);
  596|  58.4k|    secp256k1_scalar_cmov(seckey_scalar, &secp256k1_scalar_one, !ret);
  597|       |
  598|  58.4k|    secp256k1_ecmult_gen(ecmult_gen_ctx, &pj, seckey_scalar);
  599|  58.4k|    secp256k1_ge_set_gej(p, &pj);
  600|  58.4k|    secp256k1_gej_clear(&pj);
  601|  58.4k|    return ret;
  602|  58.4k|}
secp256k1.c:secp256k1_ec_seckey_tweak_add_helper:
  653|  18.1k|static int secp256k1_ec_seckey_tweak_add_helper(secp256k1_scalar *sec, const unsigned char *tweak32) {
  654|  18.1k|    secp256k1_scalar term;
  655|  18.1k|    int overflow = 0;
  656|  18.1k|    int ret = 0;
  657|       |
  658|  18.1k|    secp256k1_scalar_set_b32(&term, tweak32, &overflow);
  659|  18.1k|    ret = (!overflow) & secp256k1_eckey_privkey_tweak_add(sec, &term);
  660|  18.1k|    secp256k1_scalar_clear(&term);
  661|  18.1k|    return ret;
  662|  18.1k|}
secp256k1.c:secp256k1_declassify:
  236|  31.1k|static SECP256K1_INLINE void secp256k1_declassify(const secp256k1_context* ctx, const void *p, size_t len) {
  237|  31.1k|    if (EXPECT(ctx->declassify, 0)) SECP256K1_CHECKMEM_DEFINE(p, len);
  ------------------
  |  |  136|  31.1k|#define EXPECT(x,c) __builtin_expect((x),(c))
  |  |  ------------------
  |  |  |  Branch (136:21): [True: 0, False: 31.1k]
  |  |  ------------------
  ------------------
                  if (EXPECT(ctx->declassify, 0)) SECP256K1_CHECKMEM_DEFINE(p, len);
  ------------------
  |  |   91|      0|#  define SECP256K1_CHECKMEM_DEFINE(p, len) SECP256K1_CHECKMEM_NOOP((p), (len))
  |  |  ------------------
  |  |  |  |   42|      0|#define SECP256K1_CHECKMEM_NOOP(p, len) do { (void)(p); (void)(len); } while(0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (42:78): [Folded, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  238|  31.1k|}

secp256k1.c:secp256k1_memcmp_var:
  255|  2.59k|static SECP256K1_INLINE int secp256k1_memcmp_var(const void *s1, const void *s2, size_t n) {
  256|  2.59k|    const unsigned char *p1 = s1, *p2 = s2;
  257|  2.59k|    size_t i;
  258|       |
  259|  36.3k|    for (i = 0; i < n; i++) {
  ------------------
  |  Branch (259:17): [True: 33.7k, False: 2.59k]
  ------------------
  260|  33.7k|        int diff = p1[i] - p2[i];
  261|  33.7k|        if (diff != 0) {
  ------------------
  |  Branch (261:13): [True: 0, False: 33.7k]
  ------------------
  262|      0|            return diff;
  263|      0|        }
  264|  33.7k|    }
  265|  2.59k|    return 0;
  266|  2.59k|}
secp256k1.c:secp256k1_read_be64:
  416|   578k|SECP256K1_INLINE static uint64_t secp256k1_read_be64(const unsigned char* p) {
  417|   578k|    return (uint64_t)p[0] << 56 |
  418|   578k|           (uint64_t)p[1] << 48 |
  419|   578k|           (uint64_t)p[2] << 40 |
  420|   578k|           (uint64_t)p[3] << 32 |
  421|   578k|           (uint64_t)p[4] << 24 |
  422|   578k|           (uint64_t)p[5] << 16 |
  423|   578k|           (uint64_t)p[6] << 8  |
  424|   578k|           (uint64_t)p[7];
  425|   578k|}
secp256k1.c:secp256k1_ctz64_var:
  382|  19.2M|static SECP256K1_INLINE int secp256k1_ctz64_var(uint64_t x) {
  383|  19.2M|    VERIFY_CHECK(x != 0);
  384|  19.2M|#if (__has_builtin(__builtin_ctzl) || SECP256K1_GNUC_PREREQ(3,4))
  385|       |    /* If the unsigned long type is sufficient to represent the largest uint64_t, consider __builtin_ctzl. */
  386|  19.2M|    if (((unsigned long)UINT64_MAX) == UINT64_MAX) {
  ------------------
  |  Branch (386:9): [True: 19.2M, Folded]
  ------------------
  387|  19.2M|        return __builtin_ctzl(x);
  388|  19.2M|    }
  389|      0|#endif
  390|      0|#if (__has_builtin(__builtin_ctzll) || SECP256K1_GNUC_PREREQ(3,4))
  391|       |    /* Otherwise consider __builtin_ctzll (the unsigned long long type is always at least 64 bits). */
  392|      0|    return __builtin_ctzll(x);
  393|       |#else
  394|       |    /* If no suitable CTZ builtin is available, use a (variable time) software emulation. */
  395|       |    return secp256k1_ctz64_var_debruijn(x);
  396|       |#endif
  397|  19.2M|}
secp256k1.c:secp256k1_rotr32:
  440|  15.7M|SECP256K1_INLINE static uint32_t secp256k1_rotr32(const uint32_t x, const unsigned int by) {
  441|       |#if defined(_MSC_VER)
  442|       |    return _rotr(x, by);  /* needs <stdlib.h> */
  443|       |#else
  444|       |    /* Reduce rotation amount to avoid UB when shifting. */
  445|  15.7M|    const unsigned int mask = CHAR_BIT * sizeof(x) - 1;
  446|       |    /* Turned into a rot instruction by GCC and clang. */
  447|  15.7M|    return (x >> (by & mask)) | (x << ((-by) & mask));
  448|  15.7M|#endif
  449|  15.7M|}
secp256k1.c:secp256k1_memczero:
  208|  61.0k|static SECP256K1_INLINE void secp256k1_memczero(void *s, size_t len, int flag) {
  209|  61.0k|    unsigned char *p = (unsigned char *)s;
  210|       |    /* Access flag with a volatile-qualified lvalue.
  211|       |       This prevents clang from figuring out (after inlining) that flag can
  212|       |       take only be 0 or 1, which leads to variable time code. */
  213|  61.0k|    volatile int vflag = flag;
  214|  61.0k|    unsigned char mask = -(unsigned char) vflag;
  215|  4.05M|    while (len) {
  ------------------
  |  Branch (215:12): [True: 3.98M, False: 61.0k]
  ------------------
  216|  3.98M|        *p &= ~mask;
  217|  3.98M|        p++;
  218|  3.98M|        len--;
  219|  3.98M|    }
  220|  61.0k|}
secp256k1.c:secp256k1_read_be32:
  400|  1.79M|SECP256K1_INLINE static uint32_t secp256k1_read_be32(const unsigned char* p) {
  401|  1.79M|    return (uint32_t)p[0] << 24 |
  402|  1.79M|           (uint32_t)p[1] << 16 |
  403|  1.79M|           (uint32_t)p[2] << 8  |
  404|  1.79M|           (uint32_t)p[3];
  405|  1.79M|}
secp256k1.c:secp256k1_write_be32:
  408|   711k|SECP256K1_INLINE static void secp256k1_write_be32(unsigned char* p, uint32_t x) {
  409|   711k|    p[3] = x;
  410|   711k|    p[2] = x >>  8;
  411|   711k|    p[1] = x >> 16;
  412|   711k|    p[0] = x >> 24;
  413|   711k|}
secp256k1.c:secp256k1_write_be64:
  428|   103k|SECP256K1_INLINE static void secp256k1_write_be64(unsigned char* p, uint64_t x) {
  429|   103k|    p[7] = x;
  430|   103k|    p[6] = x >>  8;
  431|   103k|    p[5] = x >> 16;
  432|   103k|    p[4] = x >> 24;
  433|   103k|    p[3] = x >> 32;
  434|   103k|    p[2] = x >> 40;
  435|   103k|    p[1] = x >> 48;
  436|   103k|    p[0] = x >> 56;
  437|   103k|}
secp256k1.c:secp256k1_memclear:
  223|   534k|static SECP256K1_INLINE void secp256k1_memclear(void *ptr, size_t len) {
  224|       |#if defined(_MSC_VER)
  225|       |    /* SecureZeroMemory is guaranteed not to be optimized out by MSVC. */
  226|       |    SecureZeroMemory(ptr, len);
  227|       |#elif defined(__GNUC__)
  228|       |    /* We use a memory barrier that scares the compiler away from optimizing out the memset.
  229|       |     *
  230|       |     * Quoting Adam Langley <agl@google.com> in commit ad1907fe73334d6c696c8539646c21b11178f20f
  231|       |     * in BoringSSL (ISC License):
  232|       |     *    As best as we can tell, this is sufficient to break any optimisations that
  233|       |     *    might try to eliminate "superfluous" memsets.
  234|       |     * This method is used in memzero_explicit() the Linux kernel, too. Its advantage is that it
  235|       |     * is pretty efficient, because the compiler can still implement the memset() efficiently,
  236|       |     * just not remove it entirely. See "Dead Store Elimination (Still) Considered Harmful" by
  237|       |     * Yang et al. (USENIX Security 2017) for more background.
  238|       |     */
  239|   534k|    memset(ptr, 0, len);
  240|   534k|    __asm__ __volatile__("" : : "r"(ptr) : "memory");
  241|       |#else
  242|       |    void *(*volatile const volatile_memset)(void *, int, size_t) = memset;
  243|       |    volatile_memset(ptr, 0, len);
  244|       |#endif
  245|       |#ifdef VERIFY
  246|       |    SECP256K1_CHECKMEM_UNDEFINE(ptr, len);
  247|       |#endif
  248|   534k|}

_Z9SerializeI10DataStreamEvRT_t:
  249|  8.29k|template <typename Stream> void Serialize(Stream& s, uint16_t a)  { ser_writedata16(s, a); }
_Z15ser_writedata16I10DataStreamEvRT_t:
   59|  8.29k|{
   60|  8.29k|    obj = htole16_internal(obj);
   61|  8.29k|    s.write(std::as_bytes(std::span{&obj, 1}));
   62|  8.29k|}
_Z9SerializeI10DataStreamEvRT_j:
  251|  16.5k|template <typename Stream> void Serialize(Stream& s, uint32_t a)  { ser_writedata32(s, a); }
_Z15ser_writedata32I10DataStreamEvRT_j:
   64|  16.5k|{
   65|  16.5k|    obj = htole32_internal(obj);
   66|  16.5k|    s.write(std::as_bytes(std::span{&obj, 1}));
   67|  16.5k|}
_Z9SerializeI10DataStream11XOnlyPubKeyQ12SerializableIT0_T_EEvRS3_RKS2_:
  744|  5.70k|{
  745|  5.70k|    a.Serialize(os);
  746|  5.70k|}
_ZNK11XOnlyPubKey9SerializeI10DataStreamEEvRT_:
  211|  5.70k|    {                                                                                               \
  212|  5.70k|        static_assert(std::is_same_v<const cls&, decltype(*this)>, "Serialize type mismatch");      \
  213|  5.70k|        Ser(s, *this);                                                                              \
  214|  5.70k|    }                                                                                               \
_ZN11XOnlyPubKey3SerI10DataStreamEEvRT_RKS_:
  167|  5.70k|    static void Ser(Stream& s, const cls& obj) { SerializationOps(obj, s, ActionSerialize{}); } \
_ZN15ActionSerialize16SerReadWriteManyI10DataStreamJ7uint256EEEvRT_DpRKT0_:
 1004|  5.70k|    {
 1005|  5.70k|        ::SerializeMany(s, args...);
 1006|  5.70k|    }
_Z13SerializeManyI10DataStreamJ7uint256EEvRT_DpRKT0_:
  986|  5.70k|{
  987|  5.70k|    (::Serialize(s, args), ...);
  988|  5.70k|}
_Z9SerializeI10DataStream7uint256Q12SerializableIT0_T_EEvRS3_RKS2_:
  744|  5.70k|{
  745|  5.70k|    a.Serialize(os);
  746|  5.70k|}
_Z9SerializeI10DataStreamTk9BasicByteKhLm32EEvRT_NSt3__14spanIT0_XT1_EEE:
  257|  5.70k|template <typename Stream, BasicByte B, size_t N> void Serialize(Stream& s, std::span<B, N> span)      { s.write(std::as_bytes(span)); }
_Z9SerializeI10HashWriterTk9BasicByteKSt4byteEvRT_NSt3__14spanIT0_Lm18446744073709551615EEE:
  258|  24.9k|template <typename Stream, BasicByte B>           void Serialize(Stream& s, std::span<B> span)         { s.write(std::as_bytes(span)); }
_Z9SerializeI10DataStream24Sv2SignatureNoiseMessageQ12SerializableIT0_T_EEvRS3_RKS2_:
  744|  2.59k|{
  745|  2.59k|    a.Serialize(os);
  746|  2.59k|}
_Z9SerializeI10DataStreamTk9BasicBytehLm64EEvRT_RKNSt3__15arrayIT0_XT1_EEE:
  256|  2.59k|template <typename Stream, BasicByte B, size_t N> void Serialize(Stream& s, const std::array<B, N>& a) { s.write(MakeByteSpan(a)); }
_Z11UnserializeI10DataStreamR24Sv2SignatureNoiseMessageQ14UnserializableIT0_T_EEvRS4_OS3_:
  753|  2.07k|{
  754|  2.07k|    a.Unserialize(is);
  755|  2.07k|}
_Z11UnserializeI10DataStreamEvRT_Rt:
  265|  2.07k|template <typename Stream> void Unserialize(Stream& s, uint16_t& a)  { a = ser_readdata16(s); }
_Z14ser_readdata16I10DataStreamEtRT_:
   85|  2.07k|{
   86|  2.07k|    uint16_t obj;
   87|  2.07k|    s.read(std::as_writable_bytes(std::span{&obj, 1}));
   88|  2.07k|    return le16toh_internal(obj);
   89|  2.07k|}
_Z11UnserializeI10DataStreamEvRT_Rj:
  267|  4.14k|template <typename Stream> void Unserialize(Stream& s, uint32_t& a)  { a = ser_readdata32(s); }
_Z14ser_readdata32I10DataStreamEjRT_:
   91|  4.14k|{
   92|  4.14k|    uint32_t obj;
   93|  4.14k|    s.read(std::as_writable_bytes(std::span{&obj, 1}));
   94|  4.14k|    return le32toh_internal(obj);
   95|  4.14k|}
_Z11UnserializeI10DataStreamTk9BasicBytehLm64EEvRT_RNSt3__15arrayIT0_XT1_EEE:
  272|  2.07k|template <typename Stream, BasicByte B, size_t N> void Unserialize(Stream& s, std::array<B, N>& a)  { s.read(MakeWritableByteSpan(a)); }
_Z9SerializeI10HashWriter7uint256Q12SerializableIT0_T_EEvRS3_RKS2_:
  744|  24.9k|{
  745|  24.9k|    a.Serialize(os);
  746|  24.9k|}
_Z9SerializeI10HashWriterTk9BasicByteKhLm32EEvRT_NSt3__14spanIT0_XT1_EEE:
  257|  24.9k|template <typename Stream, BasicByte B, size_t N> void Serialize(Stream& s, std::span<B, N> span)      { s.write(std::as_bytes(span)); }

_Z12MakeByteSpanI7uint256EDaRKT_:
   85|  22.8k|{
   86|  22.8k|    return std::as_bytes(std::span{v});
   87|  22.8k|}
_Z13MakeUCharSpanINSt3__14spanIKSt4byteLm18446744073709551615EEEEDTcl13UCharSpanCasttlS1_fp_EEERKT_:
  111|  1.26k|template <typename V> constexpr auto MakeUCharSpan(const V& v) -> decltype(UCharSpanCast(std::span{v})) { return UCharSpanCast(std::span{v}); }
_Z13UCharSpanCastIKSt4byteLm18446744073709551615EEDaNSt3__14spanIT_XT0_EEE:
  108|  1.26k|template <typename T, size_t N> constexpr auto UCharSpanCast(std::span<T, N> s) { return std::span<std::remove_pointer_t<decltype(UCharCast(s.data()))>, N>{UCharCast(s.data()), s.size()}; }
_Z12MakeByteSpanINSt3__15arrayIhLm32EEEEDaRKT_:
   85|  69.8k|{
   86|  69.8k|    return std::as_bytes(std::span{v});
   87|  69.8k|}
_Z12MakeByteSpanINSt3__15arrayIhLm64EEEEDaRKT_:
   85|  2.59k|{
   86|  2.59k|    return std::as_bytes(std::span{v});
   87|  2.59k|}
_Z20MakeWritableByteSpanIRNSt3__15arrayIhLm64EEEEDaOT_:
   90|  2.07k|{
   91|  2.07k|    return std::as_writable_bytes(std::span{std::forward<V>(v)});
   92|  2.07k|}
_Z13UCharSpanCastIKhLm18446744073709551615EEDaNSt3__14spanIT_XT0_EEE:
  108|  18.1k|template <typename T, size_t N> constexpr auto UCharSpanCast(std::span<T, N> s) { return std::span<std::remove_pointer_t<decltype(UCharCast(s.data()))>, N>{UCharCast(s.data()), s.size()}; }
_Z13MakeUCharSpanINSt3__14spanIKhLm18446744073709551615EEEEDTcl13UCharSpanCasttlS1_fp_EEERKT_:
  111|  18.1k|template <typename V> constexpr auto MakeUCharSpan(const V& v) -> decltype(UCharSpanCast(std::span{v})) { return UCharSpanCast(std::span{v}); }
_Z9UCharCastPh:
   96|  2.59k|inline unsigned char* UCharCast(unsigned char* c) { return c; }
_Z9UCharCastPKh:
  100|  18.1k|inline const unsigned char* UCharCast(const unsigned char* c) { return c; }
_Z9UCharCastPSt4byte:
   98|   124k|inline unsigned char* UCharCast(std::byte* c) { return reinterpret_cast<unsigned char*>(c); }
_Z9UCharCastPKSt4byte:
  102|   617k|inline const unsigned char* UCharCast(const std::byte* c) { return reinterpret_cast<const unsigned char*>(c); }

_ZN10DataStreamC2ENSt3__14spanIKSt4byteLm18446744073709551615EEE:
  149|  2.07k|    explicit DataStream(std::span<const value_type> sp) : vch(sp.data(), sp.data() + sp.size()) {}
_ZN10DataStream5beginEv:
  161|  11.4k|    iterator begin()                                 { return vch.begin() + m_read_pos; }
_ZN10DataStream3endEv:
  163|  5.70k|    iterator end()                                   { return vch.end(); }
_ZNK10DataStream4sizeEv:
  164|  5.19k|    size_type size() const                           { return vch.size() - m_read_pos; }
_ZN10DataStream4dataEv:
  171|  2.59k|    value_type* data()                               { return vch.data() + m_read_pos; }
_ZN10DataStream4readENSt3__14spanISt4byteLm18446744073709551615EEE:
  202|  8.28k|    {
  203|  8.28k|        if (dst.size() == 0) return;
  ------------------
  |  Branch (203:13): [True: 0, False: 8.28k]
  ------------------
  204|       |
  205|       |        // Read from the beginning of the buffer
  206|  8.28k|        auto next_read_pos{CheckedAdd(m_read_pos, dst.size())};
  207|  8.28k|        if (!next_read_pos.has_value() || next_read_pos.value() > vch.size()) {
  ------------------
  |  Branch (207:13): [True: 0, False: 8.28k]
  |  Branch (207:43): [True: 0, False: 8.28k]
  ------------------
  208|      0|            throw std::ios_base::failure("DataStream::read(): end of data");
  209|      0|        }
  210|  8.28k|        memcpy(dst.data(), &vch[m_read_pos], dst.size());
  211|  8.28k|        if (next_read_pos.value() == vch.size()) {
  ------------------
  |  Branch (211:13): [True: 2.07k, False: 6.21k]
  ------------------
  212|  2.07k|            m_read_pos = 0;
  213|  2.07k|            vch.clear();
  214|  2.07k|            return;
  215|  2.07k|        }
  216|  6.21k|        m_read_pos = next_read_pos.value();
  217|  6.21k|    }
_ZN10DataStream5writeENSt3__14spanIKSt4byteLm18446744073709551615EEE:
  235|  33.1k|    {
  236|       |        // Write to the end of the buffer
  237|  33.1k|        vch.insert(vch.end(), src.begin(), src.end());
  238|  33.1k|    }
_ZN10DataStreamC2Ev:
  147|  8.29k|    explicit DataStream() = default;
_ZN10DataStreamlsItEERS_RKT_:
  242|  8.29k|    {
  243|  8.29k|        ::Serialize(*this, obj);
  244|  8.29k|        return (*this);
  245|  8.29k|    }
_ZN10DataStreamlsIjEERS_RKT_:
  242|  16.5k|    {
  243|  16.5k|        ::Serialize(*this, obj);
  244|  16.5k|        return (*this);
  245|  16.5k|    }
_ZN10DataStreamlsI11XOnlyPubKeyEERS_RKT_:
  242|  5.70k|    {
  243|  5.70k|        ::Serialize(*this, obj);
  244|  5.70k|        return (*this);
  245|  5.70k|    }
_ZN10DataStreamlsINSt3__14spanIKhLm32EEEEERS_RKT_:
  242|  5.70k|    {
  243|  5.70k|        ::Serialize(*this, obj);
  244|  5.70k|        return (*this);
  245|  5.70k|    }
_ZN10DataStreamlsI24Sv2SignatureNoiseMessageEERS_RKT_:
  242|  2.59k|    {
  243|  2.59k|        ::Serialize(*this, obj);
  244|  2.59k|        return (*this);
  245|  2.59k|    }
_ZN10DataStreamlsINSt3__15arrayIhLm64EEEEERS_RKT_:
  242|  2.59k|    {
  243|  2.59k|        ::Serialize(*this, obj);
  244|  2.59k|        return (*this);
  245|  2.59k|    }
_ZN10DataStreamrsIR24Sv2SignatureNoiseMessageEERS_OT_:
  249|  2.07k|    {
  250|  2.07k|        ::Unserialize(*this, obj);
  251|  2.07k|        return (*this);
  252|  2.07k|    }
_ZN10DataStreamrsIRtEERS_OT_:
  249|  2.07k|    {
  250|  2.07k|        ::Unserialize(*this, obj);
  251|  2.07k|        return (*this);
  252|  2.07k|    }
_ZN10DataStreamrsIRjEERS_OT_:
  249|  4.14k|    {
  250|  4.14k|        ::Unserialize(*this, obj);
  251|  4.14k|        return (*this);
  252|  4.14k|    }
_ZN10DataStreamrsIRNSt3__15arrayIhLm64EEEEERS_OT_:
  249|  2.07k|    {
  250|  2.07k|        ::Unserialize(*this, obj);
  251|  2.07k|        return (*this);
  252|  2.07k|    }

_Z18make_secure_uniqueINSt3__15arrayIhLm32EEEJEENS0_10unique_ptrIT_19SecureUniqueDeleterIS4_EEEDpOT0_:
   72|  33.7k|{
   73|  33.7k|    T* p = secure_allocator<T>().allocate(1);
   74|       |
   75|       |    // initialize in place, and return as secure_unique_ptr
   76|  33.7k|    try {
   77|  33.7k|        return secure_unique_ptr<T>(new (p) T(std::forward<Args>(as)...));
   78|  33.7k|    } catch (...) {
   79|      0|        secure_allocator<T>().deallocate(p, 1);
   80|      0|        throw;
   81|      0|    }
   82|  33.7k|}
_ZN16secure_allocatorINSt3__15arrayIhLm32EEEE8allocateEm:
   28|  33.7k|    {
   29|  33.7k|        T* allocation = static_cast<T*>(LockedPoolManager::Instance().alloc(sizeof(T) * n));
   30|  33.7k|        if (!allocation) {
  ------------------
  |  Branch (30:13): [True: 0, False: 33.7k]
  ------------------
   31|      0|            throw std::bad_alloc();
   32|      0|        }
   33|  33.7k|        return allocation;
   34|  33.7k|    }
_ZN16secure_allocatorINSt3__15arrayIhLm32EEEE10deallocateEPS2_m:
   37|  33.7k|    {
   38|  33.7k|        if (p != nullptr) {
  ------------------
  |  Branch (38:13): [True: 33.7k, False: 0]
  ------------------
   39|  33.7k|            memory_cleanse(p, sizeof(T) * n);
   40|  33.7k|        }
   41|  33.7k|        LockedPoolManager::Instance().free(p);
   42|  33.7k|    }
_ZN19SecureUniqueDeleterINSt3__15arrayIhLm32EEEEclEPS2_:
   62|  33.7k|    void operator()(T* t) noexcept {
   63|  33.7k|        secure_allocator<T>().deallocate(t, 1);
   64|  33.7k|    }
_Z18make_secure_uniqueINSt3__15arrayIhLm96EEEJEENS0_10unique_ptrIT_19SecureUniqueDeleterIS4_EEEDpOT0_:
   72|  2.59k|{
   73|  2.59k|    T* p = secure_allocator<T>().allocate(1);
   74|       |
   75|       |    // initialize in place, and return as secure_unique_ptr
   76|  2.59k|    try {
   77|  2.59k|        return secure_unique_ptr<T>(new (p) T(std::forward<Args>(as)...));
   78|  2.59k|    } catch (...) {
   79|      0|        secure_allocator<T>().deallocate(p, 1);
   80|      0|        throw;
   81|      0|    }
   82|  2.59k|}
_ZN16secure_allocatorINSt3__15arrayIhLm96EEEE8allocateEm:
   28|  2.59k|    {
   29|  2.59k|        T* allocation = static_cast<T*>(LockedPoolManager::Instance().alloc(sizeof(T) * n));
   30|  2.59k|        if (!allocation) {
  ------------------
  |  Branch (30:13): [True: 0, False: 2.59k]
  ------------------
   31|      0|            throw std::bad_alloc();
   32|      0|        }
   33|  2.59k|        return allocation;
   34|  2.59k|    }
_ZN16secure_allocatorINSt3__15arrayIhLm96EEEE10deallocateEPS2_m:
   37|  2.59k|    {
   38|  2.59k|        if (p != nullptr) {
  ------------------
  |  Branch (38:13): [True: 2.59k, False: 0]
  ------------------
   39|  2.59k|            memory_cleanse(p, sizeof(T) * n);
   40|  2.59k|        }
   41|  2.59k|        LockedPoolManager::Instance().free(p);
   42|  2.59k|    }
_ZN19SecureUniqueDeleterINSt3__15arrayIhLm96EEEEclEPS2_:
   62|  2.59k|    void operator()(T* t) noexcept {
   63|  2.59k|        secure_allocator<T>().deallocate(t, 1);
   64|  2.59k|    }
_ZN16secure_allocatorIhE8allocateEm:
   28|  20.7k|    {
   29|  20.7k|        T* allocation = static_cast<T*>(LockedPoolManager::Instance().alloc(sizeof(T) * n));
   30|  20.7k|        if (!allocation) {
  ------------------
  |  Branch (30:13): [True: 0, False: 20.7k]
  ------------------
   31|      0|            throw std::bad_alloc();
   32|      0|        }
   33|  20.7k|        return allocation;
   34|  20.7k|    }
_ZN16secure_allocatorIhE10deallocateEPhm:
   37|  20.7k|    {
   38|  20.7k|        if (p != nullptr) {
  ------------------
  |  Branch (38:13): [True: 20.7k, False: 0]
  ------------------
   39|  20.7k|            memory_cleanse(p, sizeof(T) * n);
   40|  20.7k|        }
   41|  20.7k|        LockedPoolManager::Instance().free(p);
   42|  20.7k|    }
random.cpp:_ZN16secure_allocatorIN12_GLOBAL__N_18RNGStateEE10deallocateEPS1_m:
   37|      2|    {
   38|      2|        if (p != nullptr) {
  ------------------
  |  Branch (38:13): [True: 2, False: 0]
  ------------------
   39|      2|            memory_cleanse(p, sizeof(T) * n);
   40|      2|        }
   41|      2|        LockedPoolManager::Instance().free(p);
   42|      2|    }

_ZN25zero_after_free_allocatorISt4byteE10deallocateEPS0_m:
   30|  35.2k|    {
   31|  35.2k|        if (p != nullptr)
  ------------------
  |  Branch (31:13): [True: 35.2k, False: 0]
  ------------------
   32|  35.2k|            memory_cleanse(p, sizeof(T) * n);
   33|  35.2k|        std::allocator<T>{}.deallocate(p, n);
   34|  35.2k|    }
_ZN25zero_after_free_allocatorISt4byteE8allocateEm:
   25|  35.2k|    {
   26|  35.2k|        return std::allocator<T>{}.allocate(n);
   27|  35.2k|    }

_Z14memory_cleansePvm:
   15|   247k|{
   16|       |#if defined(WIN32)
   17|       |    /* SecureZeroMemory is guaranteed not to be optimized out. */
   18|       |    SecureZeroMemory(ptr, len);
   19|       |#else
   20|   247k|    std::memset(ptr, 0, len);
   21|       |
   22|       |    /* Memory barrier that scares the compiler away from optimizing out the memset.
   23|       |     *
   24|       |     * Quoting Adam Langley <agl@google.com> in commit ad1907fe73334d6c696c8539646c21b11178f20f
   25|       |     * in BoringSSL (ISC License):
   26|       |     *    As best as we can tell, this is sufficient to break any optimisations that
   27|       |     *    might try to eliminate "superfluous" memsets.
   28|       |     * This method is used in memzero_explicit() the Linux kernel, too. Its advantage is that it
   29|       |     * is pretty efficient because the compiler can still implement the memset() efficiently,
   30|       |     * just not remove it entirely. See "Dead Store Elimination (Still) Considered Harmful" by
   31|       |     * Yang et al. (USENIX Security 2017) for more background.
   32|       |     */
   33|   247k|    __asm__ __volatile__("" : : "r"(ptr) : "memory");
   34|   247k|#endif
   35|   247k|}

_ZN5ArenaD2Ev:
   48|      2|Arena::~Arena() = default;
_ZN5Arena5allocEm:
   51|  57.0k|{
   52|       |    // Round to next multiple of alignment
   53|  57.0k|    size = align_up(size, alignment);
   54|       |
   55|       |    // Don't handle zero-sized chunks
   56|  57.0k|    if (size == 0)
  ------------------
  |  Branch (56:9): [True: 0, False: 57.0k]
  ------------------
   57|      0|        return nullptr;
   58|       |
   59|       |    // Pick a large enough free-chunk. Returns an iterator pointing to the first element that is not less than key.
   60|       |    // This allocation strategy is best-fit. According to "Dynamic Storage Allocation: A Survey and Critical Review",
   61|       |    // Wilson et. al. 1995, https://www.scs.stanford.edu/14wi-cs140/sched/readings/wilson.pdf, best-fit and first-fit
   62|       |    // policies seem to work well in practice.
   63|  57.0k|    auto size_ptr_it = size_to_free_chunk.lower_bound(size);
   64|  57.0k|    if (size_ptr_it == size_to_free_chunk.end())
  ------------------
  |  Branch (64:9): [True: 0, False: 57.0k]
  ------------------
   65|      0|        return nullptr;
   66|       |
   67|       |    // Create the used-chunk, taking its space from the end of the free-chunk
   68|  57.0k|    const size_t size_remaining = size_ptr_it->first - size;
   69|  57.0k|    char* const free_chunk = static_cast<char*>(size_ptr_it->second);
   70|  57.0k|    auto allocated = chunks_used.emplace(free_chunk + size_remaining, size).first;
   71|  57.0k|    chunks_free_end.erase(free_chunk + size_ptr_it->first);
   72|  57.0k|    if (size_ptr_it->first == size) {
  ------------------
  |  Branch (72:9): [True: 5.19k, False: 51.9k]
  ------------------
   73|       |        // whole chunk is used up
   74|  5.19k|        chunks_free.erase(size_ptr_it->second);
   75|  51.9k|    } else {
   76|       |        // still some memory left in the chunk
   77|  51.9k|        auto it_remaining = size_to_free_chunk.emplace(size_remaining, size_ptr_it->second);
   78|  51.9k|        chunks_free[size_ptr_it->second] = it_remaining;
   79|  51.9k|        chunks_free_end.emplace(free_chunk + size_remaining, it_remaining);
   80|  51.9k|    }
   81|  57.0k|    size_to_free_chunk.erase(size_ptr_it);
   82|       |
   83|  57.0k|    return allocated->first;
   84|  57.0k|}
_ZN5Arena4freeEPv:
   87|  57.0k|{
   88|       |    // Freeing the nullptr pointer is OK.
   89|  57.0k|    if (ptr == nullptr) {
  ------------------
  |  Branch (89:9): [True: 0, False: 57.0k]
  ------------------
   90|      0|        return;
   91|      0|    }
   92|       |
   93|       |    // Remove chunk from used map
   94|  57.0k|    auto i = chunks_used.find(ptr);
   95|  57.0k|    if (i == chunks_used.end()) {
  ------------------
  |  Branch (95:9): [True: 0, False: 57.0k]
  ------------------
   96|      0|        throw std::runtime_error("Arena: invalid or double free");
   97|      0|    }
   98|  57.0k|    auto freed = std::make_pair(static_cast<char*>(i->first), i->second);
   99|  57.0k|    chunks_used.erase(i);
  100|       |
  101|       |    // coalesce freed with previous chunk
  102|  57.0k|    auto prev = chunks_free_end.find(freed.first);
  103|  57.0k|    if (prev != chunks_free_end.end()) {
  ------------------
  |  Branch (103:9): [True: 48.5k, False: 8.59k]
  ------------------
  104|  48.5k|        freed.first -= prev->second->first;
  105|  48.5k|        freed.second += prev->second->first;
  106|  48.5k|        size_to_free_chunk.erase(prev->second);
  107|  48.5k|        chunks_free_end.erase(prev);
  108|  48.5k|    }
  109|       |
  110|       |    // coalesce freed with chunk after freed
  111|  57.0k|    auto next = chunks_free.find(freed.first + freed.second);
  112|  57.0k|    if (next != chunks_free.end()) {
  ------------------
  |  Branch (112:9): [True: 3.40k, False: 53.6k]
  ------------------
  113|  3.40k|        freed.second += next->second->first;
  114|  3.40k|        size_to_free_chunk.erase(next->second);
  115|  3.40k|        chunks_free.erase(next);
  116|  3.40k|    }
  117|       |
  118|       |    // Add/set space with coalesced free chunk
  119|  57.0k|    auto it = size_to_free_chunk.emplace(freed.second, freed.first);
  120|  57.0k|    chunks_free[freed.first] = it;
  121|  57.0k|    chunks_free_end[freed.first + freed.second] = it;
  122|  57.0k|}
_ZN24PosixLockedPageAllocator10FreeLockedEPvm:
  254|      2|{
  255|      2|    len = align_up(len, page_size);
  256|      2|    memory_cleanse(addr, len);
  257|      2|    munlock(addr, len);
  258|      2|    munmap(addr, len);
  259|      2|}
_ZN10LockedPoolD2Ev:
  282|      2|LockedPool::~LockedPool() = default;
_ZN10LockedPool5allocEm:
  285|  57.0k|{
  286|  57.0k|    std::lock_guard<std::mutex> lock(mutex);
  287|       |
  288|       |    // Don't handle impossible sizes
  289|  57.0k|    if (size == 0 || size > ARENA_SIZE)
  ------------------
  |  Branch (289:9): [True: 0, False: 57.0k]
  |  Branch (289:22): [True: 0, False: 57.0k]
  ------------------
  290|      0|        return nullptr;
  291|       |
  292|       |    // Try allocating from each current arena
  293|  57.0k|    for (auto &arena: arenas) {
  ------------------
  |  Branch (293:21): [True: 57.0k, False: 0]
  ------------------
  294|  57.0k|        void *addr = arena.alloc(size);
  295|  57.0k|        if (addr) {
  ------------------
  |  Branch (295:13): [True: 57.0k, False: 0]
  ------------------
  296|  57.0k|            return addr;
  297|  57.0k|        }
  298|  57.0k|    }
  299|       |    // If that fails, create a new one
  300|      0|    if (new_arena(ARENA_SIZE, ARENA_ALIGN)) {
  ------------------
  |  Branch (300:9): [True: 0, False: 0]
  ------------------
  301|      0|        return arenas.back().alloc(size);
  302|      0|    }
  303|      0|    return nullptr;
  304|      0|}
_ZN10LockedPool4freeEPv:
  307|  57.0k|{
  308|  57.0k|    std::lock_guard<std::mutex> lock(mutex);
  309|       |    // TODO we can do better than this linear search by keeping a map of arena
  310|       |    // extents to arena, and looking up the address.
  311|  57.0k|    for (auto &arena: arenas) {
  ------------------
  |  Branch (311:21): [True: 57.0k, False: 0]
  ------------------
  312|  57.0k|        if (arena.addressInArena(ptr)) {
  ------------------
  |  Branch (312:13): [True: 57.0k, False: 0]
  ------------------
  313|  57.0k|            arena.free(ptr);
  314|  57.0k|            return;
  315|  57.0k|        }
  316|  57.0k|    }
  317|      0|    throw std::runtime_error("LockedPool: invalid address not pointing to any arena");
  318|  57.0k|}
_ZN10LockedPool15LockedPageArenaD2Ev:
  369|      2|{
  370|      2|    allocator->FreeLocked(base, size);
  371|      2|}
lockedpool.cpp:_ZL8align_upmm:
   32|  57.0k|{
   33|  57.0k|    return (x + align - 1) & ~(align - 1);
   34|  57.0k|}

_ZN17LockedPoolManager8InstanceEv:
  223|   114k|    {
  224|   114k|        static std::once_flag init_flag;
  225|   114k|        std::call_once(init_flag, LockedPoolManager::CreateInstance);
  226|   114k|        return *LockedPoolManager::_instance;
  227|   114k|    }
_ZNK5Arena14addressInArenaEPv:
   90|  57.0k|    bool addressInArena(void *ptr) const { return ptr >= base && ptr < end; }
  ------------------
  |  Branch (90:51): [True: 57.0k, False: 0]
  |  Branch (90:66): [True: 57.0k, False: 0]
  ------------------
_ZN19LockedPageAllocatorD2Ev:
   22|      2|    virtual ~LockedPageAllocator() = default;

_ZN24Sv2SignatureNoiseMessageC2EtjjRK11XOnlyPubKeyRK4CKey:
   14|  2.59k|Sv2SignatureNoiseMessage::Sv2SignatureNoiseMessage(uint16_t version, uint32_t valid_from, uint32_t valid_to, const XOnlyPubKey& static_key, const CKey& authority_key) : m_version{version}, m_valid_from{valid_from}, m_valid_to{valid_to}, m_static_key{static_key}
   15|  2.59k|{
   16|  2.59k|    SignSchnorr(authority_key, m_sig);
   17|  2.59k|}
_ZN24Sv2SignatureNoiseMessage7GetHashEv:
   20|  5.70k|{
   21|  5.70k|    DataStream ss{};
   22|  5.70k|    ss << m_version
   23|  5.70k|       << m_valid_from
   24|  5.70k|       << m_valid_to
   25|  5.70k|       << m_static_key;
   26|       |
   27|  5.70k|    LogTrace(BCLog::SV2, "Certificate hashed data: %s\n", HexStr(ss));
  ------------------
  |  |  264|  5.70k|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|  5.70k|    do {                                                              \
  |  |  |  |  257|  5.70k|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 5.70k]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|  5.70k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 5.70k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   28|       |
   29|  5.70k|    CSHA256 hasher;
   30|  5.70k|    hasher.Write(reinterpret_cast<unsigned char*>(&(*ss.begin())), ss.end() - ss.begin());
   31|       |
   32|  5.70k|    uint256 hash_output;
   33|  5.70k|    hasher.Finalize(hash_output.begin());
   34|  5.70k|    return hash_output;
   35|  5.70k|}
_ZN24Sv2SignatureNoiseMessage8ValidateE11XOnlyPubKey:
   38|  6.02k|{
   39|  6.02k|    if (m_version > 0) {
  ------------------
  |  Branch (39:9): [True: 494, False: 5.52k]
  ------------------
   40|    494|        LogTrace(BCLog::SV2, "Invalid certificate version: %d\n", m_version);
  ------------------
  |  |  264|    494|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|    494|    do {                                                              \
  |  |  |  |  257|    494|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 494]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|    494|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 494]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   41|    494|        return false;
   42|    494|    }
   43|  5.52k|    auto now{GetTime<std::chrono::seconds>()};
   44|  5.52k|    if (std::chrono::seconds{m_valid_from} > now) {
  ------------------
  |  Branch (44:9): [True: 289, False: 5.23k]
  ------------------
   45|    289|        LogTrace(BCLog::SV2, "Certificate valid from is in the future: %d\n", m_valid_from);
  ------------------
  |  |  264|    289|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|    289|    do {                                                              \
  |  |  |  |  257|    289|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 289]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|    289|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 289]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   46|    289|        return false;
   47|    289|    }
   48|  5.23k|    if (std::chrono::seconds{m_valid_to} < now) {
  ------------------
  |  Branch (48:9): [True: 2.13k, False: 3.10k]
  ------------------
   49|  2.13k|        LogTrace(BCLog::SV2, "Certificate expired: %d\n", m_valid_to);
  ------------------
  |  |  264|  2.13k|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|  2.13k|    do {                                                              \
  |  |  |  |  257|  2.13k|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 2.13k]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|  2.13k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 2.13k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   50|  2.13k|        return false;
   51|  2.13k|    }
   52|       |
   53|  3.10k|    if (!authority_key.VerifySchnorr(this->GetHash(), m_sig)) {
  ------------------
  |  Branch (53:9): [True: 1.19k, False: 1.90k]
  ------------------
   54|  1.19k|        LogTrace(BCLog::SV2, "Certificate signature is invalid\n");
  ------------------
  |  |  264|  1.19k|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|  1.19k|    do {                                                              \
  |  |  |  |  257|  1.19k|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 1.19k]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|  1.19k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 1.19k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   55|  1.19k|        return false;
   56|  1.19k|    }
   57|  1.90k|    return true;
   58|  3.10k|}
_ZN24Sv2SignatureNoiseMessage11SignSchnorrERK4CKeyNSt3__14spanIhLm18446744073709551615EEE:
   61|  2.59k|{
   62|  2.59k|    authority_key.SignSchnorr(this->GetHash(), sig, nullptr, {});
   63|  2.59k|}
_ZN14Sv2CipherStateC2EONSt3__15arrayIhLm32EEE:
   65|  13.1k|Sv2CipherState::Sv2CipherState(NoiseHash&& key) : m_key(std::move(key)) {};
_ZN14Sv2CipherState13DecryptWithAdENSt3__14spanIKSt4byteLm18446744073709551615EEENS1_IS2_Lm18446744073709551615EEES5_:
   68|  34.6k|{
   69|  34.6k|    Assume(Sv2Cipher::EncryptedMessageSize(plain.size()) == ciphertext.size());
  ------------------
  |  |  118|  34.6k|#define Assume(val) inline_assertion_check<false>(val, __FILE__, __LINE__, __func__, #val)
  ------------------
   70|       |
   71|  34.6k|    if (m_nonce == UINT64_MAX) {
  ------------------
  |  Branch (71:9): [True: 0, False: 34.6k]
  ------------------
   72|       |        // This nonce value is reserved, see chapter 5.1 of the Noise paper.
   73|      0|        LogTrace(BCLog::SV2, "Nonce exceeds maximum value\n");
  ------------------
  |  |  264|      0|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|      0|    do {                                                              \
  |  |  |  |  257|      0|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   74|      0|        return false;
   75|      0|    }
   76|  34.6k|    AEADChaCha20Poly1305::Nonce96 nonce = {0, m_nonce};
   77|  34.6k|    auto key = MakeByteSpan(m_key);
   78|  34.6k|    AEADChaCha20Poly1305 aead{key};
   79|  34.6k|    if (!aead.Decrypt(ciphertext, associated_data, nonce, plain)) {
  ------------------
  |  Branch (79:9): [True: 916, False: 33.7k]
  ------------------
   80|    916|        LogTrace(BCLog::SV2, "Message decryption failed\n");
  ------------------
  |  |  264|    916|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|    916|    do {                                                              \
  |  |  |  |  257|    916|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 916]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|    916|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 916]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   81|    916|        return false;
   82|    916|    }
   83|       |    // Only increase nonce if decryption succeeded
   84|  33.7k|    m_nonce++;
   85|  33.7k|    return true;
   86|  34.6k|}
_ZN14Sv2CipherState13EncryptWithAdENSt3__14spanIKSt4byteLm18446744073709551615EEES4_NS1_IS2_Lm18446744073709551615EEE:
   89|  35.2k|{
   90|  35.2k|    Assume(Sv2Cipher::EncryptedMessageSize(plain.size()) == ciphertext.size());
  ------------------
  |  |  118|  35.2k|#define Assume(val) inline_assertion_check<false>(val, __FILE__, __LINE__, __func__, #val)
  ------------------
   91|       |
   92|  35.2k|    if (m_nonce == UINT64_MAX) {
  ------------------
  |  Branch (92:9): [True: 0, False: 35.2k]
  ------------------
   93|       |        // This nonce value is reserved, see chapter 5.1 of the Noise paper.
   94|      0|        LogTrace(BCLog::SV2, "Nonce exceeds maximum value\n");
  ------------------
  |  |  264|      0|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|      0|    do {                                                              \
  |  |  |  |  257|      0|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|      0|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   95|      0|        return false;
   96|      0|    }
   97|  35.2k|    AEADChaCha20Poly1305::Nonce96 nonce = {0, m_nonce++};
   98|  35.2k|    auto key = MakeByteSpan(m_key);
   99|  35.2k|    AEADChaCha20Poly1305 aead{key};
  100|  35.2k|    aead.Encrypt(plain, associated_data, nonce, ciphertext);
  101|  35.2k|    return true;
  102|  35.2k|}
_ZN14Sv2CipherState14EncryptMessageENSt3__14spanIKSt4byteLm18446744073709551615EEENS1_IS2_Lm18446744073709551615EEE:
  105|  34.3k|{
  106|  34.3k|    Assume(ciphertext.size() == Sv2Cipher::EncryptedMessageSize(plain.size()));
  ------------------
  |  |  118|  34.3k|#define Assume(val) inline_assertion_check<false>(val, __FILE__, __LINE__, __func__, #val)
  ------------------
  107|       |
  108|  34.3k|    std::vector<std::byte> ad; // No associated data
  109|       |
  110|  34.3k|    constexpr size_t max_chunk_size = NOISE_MAX_CHUNK_SIZE - Poly1305::TAGLEN;
  111|  34.3k|    size_t num_chunks = (plain.size() + max_chunk_size - 1) / max_chunk_size;
  112|  34.3k|    if (num_chunks > 1) {
  ------------------
  |  Branch (112:9): [True: 2.15k, False: 32.1k]
  ------------------
  113|  2.15k|        LogTrace(BCLog::SV2,
  ------------------
  |  |  264|  2.15k|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|  2.15k|    do {                                                              \
  |  |  |  |  257|  2.15k|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 2.15k]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|  2.15k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 2.15k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  114|  2.15k|                 "Split into %d chunks (max %d bytes)\n",
  115|  2.15k|                 num_chunks, max_chunk_size);
  116|  2.15k|    }
  117|       |
  118|       |    // Copy input bytes into output buffer
  119|  34.3k|    const std::vector<std::byte> padding(Poly1305::TAGLEN, std::byte(0));
  120|  64.3k|    for (size_t i = 0; i < num_chunks; ++i) {
  ------------------
  |  Branch (120:24): [True: 30.0k, False: 34.3k]
  ------------------
  121|  30.0k|        size_t chunk_start = i * max_chunk_size;
  122|  30.0k|        size_t chunk_end = std::min(chunk_start + max_chunk_size, plain.size());
  123|  30.0k|        size_t chunk_size = chunk_end - chunk_start;
  124|  30.0k|        const auto encrypted_chunk_start = ciphertext.begin() + i * NOISE_MAX_CHUNK_SIZE;
  125|  30.0k|        std::copy(plain.begin() + chunk_start, plain.begin() + chunk_start + chunk_size, encrypted_chunk_start);
  126|  30.0k|        std::copy(padding.begin(), padding.end(), encrypted_chunk_start + chunk_size);
  127|  30.0k|    }
  128|       |
  129|       |    // Encrypt each chunk
  130|  34.3k|    size_t bytes_written = 0;
  131|  64.3k|    for (size_t i = 0; i < num_chunks; ++i) {
  ------------------
  |  Branch (131:24): [True: 30.0k, False: 34.3k]
  ------------------
  132|  30.0k|        size_t chunk_size = std::min(ciphertext.size() - bytes_written, NOISE_MAX_CHUNK_SIZE);
  133|  30.0k|        std::span<std::byte> chunk = ciphertext.subspan(bytes_written, chunk_size);
  134|  30.0k|        std::span<std::byte> chunk_plain = ciphertext.subspan(bytes_written, chunk_size - Poly1305::TAGLEN);
  135|  30.0k|        if (!EncryptWithAd(ad, chunk_plain, chunk)) {
  ------------------
  |  Branch (135:13): [True: 0, False: 30.0k]
  ------------------
  136|      0|            return false;
  137|      0|        }
  138|  30.0k|        bytes_written += chunk.size();
  139|  30.0k|    }
  140|       |
  141|  34.3k|    Assume(bytes_written == ciphertext.size());
  ------------------
  |  |  118|  34.3k|#define Assume(val) inline_assertion_check<false>(val, __FILE__, __LINE__, __func__, #val)
  ------------------
  142|  34.3k|    return true;
  143|  34.3k|}
_ZN14Sv2CipherState14DecryptMessageENSt3__14spanISt4byteLm18446744073709551615EEES3_:
  146|  34.3k|{
  147|  34.3k|    Assume(Sv2Cipher::EncryptedMessageSize(plain.size()) == ciphertext.size());
  ------------------
  |  |  118|  34.3k|#define Assume(val) inline_assertion_check<false>(val, __FILE__, __LINE__, __func__, #val)
  ------------------
  148|       |
  149|  34.3k|    size_t processed = 0;
  150|  34.3k|    size_t plain_position = 0;
  151|  34.3k|    std::vector<std::byte> ad; // No associated data
  152|       |
  153|  63.8k|    while (processed < ciphertext.size()) {
  ------------------
  |  Branch (153:12): [True: 29.9k, False: 33.9k]
  ------------------
  154|  29.9k|        size_t chunk_size = std::min(ciphertext.size() - processed, NOISE_MAX_CHUNK_SIZE);
  155|  29.9k|        std::span<std::byte> chunk_cipher = ciphertext.subspan(processed, chunk_size);
  156|  29.9k|        std::span<std::byte> chunk_plain = plain.subspan(plain_position, chunk_size - Poly1305::TAGLEN);
  157|  29.9k|        if (!DecryptWithAd(ad, chunk_cipher, chunk_plain)) return false;
  ------------------
  |  Branch (157:13): [True: 393, False: 29.5k]
  ------------------
  158|  29.5k|        processed += chunk_size;
  159|  29.5k|        plain_position += chunk_size - Poly1305::TAGLEN;
  160|  29.5k|    }
  161|       |
  162|  33.9k|    return true;
  163|  34.3k|}
_ZN17Sv2SymmetricState7MixHashENSt3__14spanIKSt4byteLm18446744073709551615EEE:
  166|  24.9k|{
  167|  24.9k|    m_hash_output = (HashWriter{} << m_hash_output << input).GetSHA256();
  168|  24.9k|}
_ZN17Sv2SymmetricState6MixKeyENSt3__14spanIKSt4byteLm18446744073709551615EEE:
  171|  9.89k|{
  172|  9.89k|    NoiseHash out0;
  173|  9.89k|    NoiseHash out1;
  174|  9.89k|    HKDF2(input_key_material, out0, out1);
  175|  9.89k|    m_chaining_key = std::move(out0);
  176|  9.89k|    m_cipher_state = Sv2CipherState{std::move(out1)};
  177|  9.89k|}
_ZN17Sv2SymmetricState14LogChainingKeyEv:
  185|  9.89k|{
  186|  9.89k|    LogTrace(BCLog::SV2, "Chaining key: %s\n", GetChainingKey());
  ------------------
  |  |  264|  9.89k|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|  9.89k|    do {                                                              \
  |  |  |  |  257|  9.89k|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 9.89k]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|  9.89k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 9.89k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  187|  9.89k|}
_ZN17Sv2SymmetricState5HKDF2ENSt3__14spanIKSt4byteLm18446744073709551615EEERNS0_5arrayIhLm32EEES7_:
  190|  11.5k|{
  191|  11.5k|    NoiseHash tmp_key;
  192|  11.5k|    CHMAC_SHA256 tmp_mac(m_chaining_key.data(), m_chaining_key.size());
  193|  11.5k|    tmp_mac.Write(UCharCast(input_key_material.data()), input_key_material.size());
  194|  11.5k|    tmp_mac.Finalize(tmp_key.data());
  195|       |
  196|  11.5k|    CHMAC_SHA256 out0_mac(tmp_key.data(), tmp_key.size());
  197|  11.5k|    uint8_t one[1]{0x1};
  198|  11.5k|    out0_mac.Write(one, 1);
  199|  11.5k|    out0_mac.Finalize(out0.data());
  200|       |
  201|  11.5k|    std::vector<uint8_t> in1;
  202|  11.5k|    in1.reserve(HASHLEN + 1);
  203|  11.5k|    std::copy(out0.begin(), out0.end(), std::back_inserter(in1));
  204|  11.5k|    in1.push_back(0x02);
  205|       |
  206|  11.5k|    CHMAC_SHA256 out1_mac(tmp_key.data(), tmp_key.size());
  207|  11.5k|    out1_mac.Write(&in1[0], in1.size());
  208|  11.5k|    out1_mac.Finalize(out1.data());
  209|  11.5k|}
_ZN17Sv2SymmetricState14EncryptAndHashENSt3__14spanIKSt4byteLm18446744073709551615EEENS1_IS2_Lm18446744073709551615EEE:
  212|  5.19k|{
  213|  5.19k|    Assume(Sv2Cipher::EncryptedMessageSize(plain.size()) == ciphertext.size());
  ------------------
  |  |  118|  5.19k|#define Assume(val) inline_assertion_check<false>(val, __FILE__, __LINE__, __func__, #val)
  ------------------
  214|       |
  215|  5.19k|    if (!m_cipher_state.EncryptWithAd(MakeByteSpan(m_hash_output), plain, ciphertext)) {
  ------------------
  |  Branch (215:9): [True: 0, False: 5.19k]
  ------------------
  216|      0|        return false;
  217|      0|    }
  218|  5.19k|    MixHash(ciphertext);
  219|  5.19k|    return true;
  220|  5.19k|}
_ZN17Sv2SymmetricState14DecryptAndHashENSt3__14spanISt4byteLm18446744073709551615EEES3_:
  223|  4.70k|{
  224|  4.70k|    Assume(Sv2Cipher::EncryptedMessageSize(plain.size()) == ciphertext.size());
  ------------------
  |  |  118|  4.70k|#define Assume(val) inline_assertion_check<false>(val, __FILE__, __LINE__, __func__, #val)
  ------------------
  225|       |
  226|       |    // The handshake requires mix hashing the cipher text NOT the decrypted
  227|       |    // plaintext.
  228|  4.70k|    std::vector<std::byte> ciphertext_copy;
  229|  4.70k|    ciphertext_copy.assign(ciphertext.begin(), ciphertext.end());
  230|       |
  231|  4.70k|    bool res = m_cipher_state.DecryptWithAd(MakeByteSpan(m_hash_output), ciphertext, plain);
  232|  4.70k|    if (!res) return false;
  ------------------
  |  Branch (232:9): [True: 523, False: 4.18k]
  ------------------
  233|  4.18k|    MixHash(ciphertext_copy);
  234|  4.18k|    return true;
  235|  4.70k|}
_ZN17Sv2SymmetricState5SplitEv:
  238|  1.61k|{
  239|  1.61k|    NoiseHash send_key;
  240|  1.61k|    NoiseHash recv_key;
  241|  1.61k|    HKDF2({}, send_key, recv_key);
  242|  1.61k|    return {Sv2CipherState{std::move(send_key)}, Sv2CipherState{std::move(recv_key)}};
  243|  1.61k|}
_ZN17Sv2SymmetricState13GetHashOutputEv:
  246|  1.61k|{
  247|  1.61k|    return m_hash_output;
  248|  1.61k|}
_ZN17Sv2HandshakeState15SetEphemeralKeyEO4CKey:
  251|  5.19k|{
  252|  5.19k|    m_ephemeral_key = key;
  253|  5.19k|    m_ephemeral_ellswift_pk = m_ephemeral_key.EllSwiftCreate(MakeByteSpan(GetRandHash()));
  254|  5.19k|};
_ZN17Sv2HandshakeState19WriteMsgEphemeralPKENSt3__14spanISt4byteLm18446744073709551615EEE:
  264|  2.59k|{
  265|  2.59k|    if (msg.size() < ELLSWIFT_PUB_KEY_SIZE) {
  ------------------
  |  Branch (265:9): [True: 0, False: 2.59k]
  ------------------
  266|      0|        throw std::runtime_error(strprintf("Invalid message size: %d bytes < %d", msg.size(), ELLSWIFT_PUB_KEY_SIZE));
  ------------------
  |  | 1172|      0|#define strprintf tfm::format
  ------------------
  267|      0|    }
  268|       |
  269|  2.59k|    if (!m_ephemeral_key.IsValid()) {
  ------------------
  |  Branch (269:9): [True: 0, False: 2.59k]
  ------------------
  270|      0|        GenerateEphemeralKey();
  271|      0|    }
  272|       |
  273|  2.59k|    LogTrace(BCLog::SV2, "Write our ephemeral key\n");
  ------------------
  |  |  264|  2.59k|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|  2.59k|    do {                                                              \
  |  |  |  |  257|  2.59k|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 2.59k]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|  2.59k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 2.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  274|  2.59k|    std::copy(m_ephemeral_ellswift_pk.begin(), m_ephemeral_ellswift_pk.end(), msg.begin());
  275|       |
  276|  2.59k|    m_symmetric_state.MixHash(msg.subspan(0, ELLSWIFT_PUB_KEY_SIZE));
  277|  2.59k|    LogTrace(BCLog::SV2, "Mix hash: %s\n", HexStr(m_symmetric_state.GetHashOutput()));
  ------------------
  |  |  264|  2.59k|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|  2.59k|    do {                                                              \
  |  |  |  |  257|  2.59k|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 2.59k]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|  2.59k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 2.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  278|       |
  279|  2.59k|    std::vector<std::byte> empty;
  280|  2.59k|    m_symmetric_state.MixHash(empty);
  281|  2.59k|}
_ZN17Sv2HandshakeState18ReadMsgEphemeralPKENSt3__14spanISt4byteLm18446744073709551615EEE:
  284|  2.59k|{
  285|  2.59k|    LogTrace(BCLog::SV2, "Read their ephemeral key\n");
  ------------------
  |  |  264|  2.59k|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|  2.59k|    do {                                                              \
  |  |  |  |  257|  2.59k|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 2.59k]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|  2.59k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 2.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  286|  2.59k|    Assume(msg.size() == ELLSWIFT_PUB_KEY_SIZE);
  ------------------
  |  |  118|  2.59k|#define Assume(val) inline_assertion_check<false>(val, __FILE__, __LINE__, __func__, #val)
  ------------------
  287|  2.59k|    m_remote_ephemeral_ellswift_pk = EllSwiftPubKey(msg);
  288|       |
  289|  2.59k|    m_symmetric_state.MixHash(msg.subspan(0, ELLSWIFT_PUB_KEY_SIZE));
  290|  2.59k|    LogTrace(BCLog::SV2, "Mix hash: %s\n", HexStr(m_symmetric_state.GetHashOutput()));
  ------------------
  |  |  264|  2.59k|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|  2.59k|    do {                                                              \
  |  |  |  |  257|  2.59k|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 2.59k]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|  2.59k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 2.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  291|       |
  292|  2.59k|    std::vector<std::byte> empty;
  293|  2.59k|    m_symmetric_state.MixHash(empty);
  294|  2.59k|}
_ZN17Sv2HandshakeState10WriteMsgESENSt3__14spanISt4byteLm18446744073709551615EEE:
  297|  2.59k|{
  298|  2.59k|    if (msg.size() < HANDSHAKE_STEP2_SIZE) {
  ------------------
  |  Branch (298:9): [True: 0, False: 2.59k]
  ------------------
  299|      0|        throw std::runtime_error(strprintf("Invalid message size: %d bytes < %d", msg.size(), HANDSHAKE_STEP2_SIZE));
  ------------------
  |  | 1172|      0|#define strprintf tfm::format
  ------------------
  300|      0|    }
  301|       |
  302|  2.59k|    ssize_t bytes_written = 0;
  303|       |
  304|  2.59k|    if (!m_ephemeral_key.IsValid()) {
  ------------------
  |  Branch (304:9): [True: 0, False: 2.59k]
  ------------------
  305|      0|        GenerateEphemeralKey();
  306|      0|    }
  307|       |
  308|       |    // Send our ephemeral pk.
  309|  2.59k|    LogTrace(BCLog::SV2, "Write our ephemeral key\n");
  ------------------
  |  |  264|  2.59k|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|  2.59k|    do {                                                              \
  |  |  |  |  257|  2.59k|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 2.59k]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|  2.59k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 2.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  310|  2.59k|    std::copy(m_ephemeral_ellswift_pk.begin(), m_ephemeral_ellswift_pk.end(), msg.begin());
  311|       |
  312|  2.59k|    m_symmetric_state.MixHash(msg.subspan(0, ELLSWIFT_PUB_KEY_SIZE));
  313|  2.59k|    bytes_written += ELLSWIFT_PUB_KEY_SIZE;
  314|       |
  315|  2.59k|    LogTrace(BCLog::SV2, "Mix hash: %s\n", HexStr(m_symmetric_state.GetHashOutput()));
  ------------------
  |  |  264|  2.59k|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|  2.59k|    do {                                                              \
  |  |  |  |  257|  2.59k|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 2.59k]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|  2.59k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 2.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  316|       |
  317|  2.59k|    LogTrace(BCLog::SV2, "Perform ECDH with the remote ephemeral key\n");
  ------------------
  |  |  264|  2.59k|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|  2.59k|    do {                                                              \
  |  |  |  |  257|  2.59k|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 2.59k]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|  2.59k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 2.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  318|  2.59k|    ECDHSecret ecdh_secret{m_ephemeral_key.ComputeBIP324ECDHSecret(m_remote_ephemeral_ellswift_pk,
  319|  2.59k|                                                                   m_ephemeral_ellswift_pk,
  320|  2.59k|                                                                   /*initiating=*/false)};
  321|       |
  322|  2.59k|    LogTrace(BCLog::SV2, "Mix key with ECDH result: ephemeral ours -- remote ephemeral\n");
  ------------------
  |  |  264|  2.59k|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|  2.59k|    do {                                                              \
  |  |  |  |  257|  2.59k|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 2.59k]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|  2.59k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 2.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  323|  2.59k|    m_symmetric_state.MixKey(ecdh_secret);
  324|  2.59k|    m_symmetric_state.LogChainingKey();
  325|       |
  326|       |    // Send our static pk.
  327|  2.59k|    LogTrace(BCLog::SV2, "Encrypt and write our static key\n");
  ------------------
  |  |  264|  2.59k|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|  2.59k|    do {                                                              \
  |  |  |  |  257|  2.59k|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 2.59k]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|  2.59k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 2.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  328|       |
  329|  2.59k|    if (!m_symmetric_state.EncryptAndHash(m_static_ellswift_pk, msg.subspan(ELLSWIFT_PUB_KEY_SIZE, ELLSWIFT_PUB_KEY_SIZE + Poly1305::TAGLEN))) {
  ------------------
  |  Branch (329:9): [True: 0, False: 2.59k]
  ------------------
  330|       |        // This should never happen
  331|      0|        Assume(false);
  ------------------
  |  |  118|      0|#define Assume(val) inline_assertion_check<false>(val, __FILE__, __LINE__, __func__, #val)
  ------------------
  332|      0|        throw std::runtime_error("Failed to encrypt our ephemeral key\n");
  333|      0|    }
  334|       |
  335|  2.59k|    bytes_written += ELLSWIFT_PUB_KEY_SIZE + Poly1305::TAGLEN;
  336|       |
  337|  2.59k|    LogTrace(BCLog::SV2, "Mix hash: %s\n", HexStr(m_symmetric_state.GetHashOutput()));
  ------------------
  |  |  264|  2.59k|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|  2.59k|    do {                                                              \
  |  |  |  |  257|  2.59k|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 2.59k]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|  2.59k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 2.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  338|       |
  339|  2.59k|    LogTrace(BCLog::SV2, "Perform ECDH between our static and remote ephemeral key\n");
  ------------------
  |  |  264|  2.59k|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|  2.59k|    do {                                                              \
  |  |  |  |  257|  2.59k|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 2.59k]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|  2.59k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 2.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  340|  2.59k|    ECDHSecret ecdh_static_secret{m_static_key.ComputeBIP324ECDHSecret(m_remote_ephemeral_ellswift_pk,
  341|  2.59k|                                                                       m_static_ellswift_pk,
  342|  2.59k|                                                                       /*initiating=*/false)};
  343|  2.59k|    LogTrace(BCLog::SV2, "ECDH result: %s\n", HexStr(ecdh_static_secret));
  ------------------
  |  |  264|  2.59k|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|  2.59k|    do {                                                              \
  |  |  |  |  257|  2.59k|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 2.59k]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|  2.59k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 2.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  344|       |
  345|  2.59k|    LogTrace(BCLog::SV2, "Mix key with ECDH result: static ours -- remote ephemeral\n");
  ------------------
  |  |  264|  2.59k|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|  2.59k|    do {                                                              \
  |  |  |  |  257|  2.59k|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 2.59k]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|  2.59k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 2.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  346|  2.59k|    m_symmetric_state.MixKey(ecdh_static_secret);
  347|  2.59k|    m_symmetric_state.LogChainingKey();
  348|       |
  349|       |    // Serialize our digital signature noise message and encrypt.
  350|  2.59k|    DataStream ss{};
  351|  2.59k|    Assume(m_certificate);
  ------------------
  |  |  118|  2.59k|#define Assume(val) inline_assertion_check<false>(val, __FILE__, __LINE__, __func__, #val)
  ------------------
  352|  2.59k|    ss << m_certificate.value();
  353|  2.59k|    Assume(ss.size() == Sv2SignatureNoiseMessage::SIZE);
  ------------------
  |  |  118|  2.59k|#define Assume(val) inline_assertion_check<false>(val, __FILE__, __LINE__, __func__, #val)
  ------------------
  354|       |
  355|  2.59k|    LogTrace(BCLog::SV2, "Encrypt certificate: %s\n", HexStr(ss));
  ------------------
  |  |  264|  2.59k|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|  2.59k|    do {                                                              \
  |  |  |  |  257|  2.59k|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 2.59k]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|  2.59k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 2.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  356|  2.59k|    if (!m_symmetric_state.EncryptAndHash(ss, msg.subspan(bytes_written, Sv2SignatureNoiseMessage::SIZE + Poly1305::TAGLEN))) {
  ------------------
  |  Branch (356:9): [True: 0, False: 2.59k]
  ------------------
  357|       |        // This should never happen
  358|      0|        Assume(false);
  ------------------
  |  |  118|      0|#define Assume(val) inline_assertion_check<false>(val, __FILE__, __LINE__, __func__, #val)
  ------------------
  359|      0|        throw std::runtime_error("Failed to encrypt our certificate\n");
  360|      0|    }
  361|       |
  362|  2.59k|    LogTrace(BCLog::SV2, "Mix hash: %s\n", HexStr(m_symmetric_state.GetHashOutput()));
  ------------------
  |  |  264|  2.59k|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|  2.59k|    do {                                                              \
  |  |  |  |  257|  2.59k|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 2.59k]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|  2.59k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 2.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  363|       |
  364|  2.59k|    bytes_written += Sv2SignatureNoiseMessage::SIZE + Poly1305::TAGLEN;
  365|  2.59k|    Assume(bytes_written == HANDSHAKE_STEP2_SIZE);
  ------------------
  |  |  118|  2.59k|#define Assume(val) inline_assertion_check<false>(val, __FILE__, __LINE__, __func__, #val)
  ------------------
  366|  2.59k|}
_ZN17Sv2HandshakeState9ReadMsgESENSt3__14spanISt4byteLm18446744073709551615EEE:
  369|  2.59k|{
  370|  2.59k|    Assume(msg.size() == HANDSHAKE_STEP2_SIZE);
  ------------------
  |  |  118|  2.59k|#define Assume(val) inline_assertion_check<false>(val, __FILE__, __LINE__, __func__, #val)
  ------------------
  371|  2.59k|    ssize_t bytes_read = 0;
  372|       |
  373|       |    // Read the remote ephemeral key from the msg and decrypt.
  374|  2.59k|    LogTrace(BCLog::SV2, "Read remote ephemeral key\n");
  ------------------
  |  |  264|  2.59k|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|  2.59k|    do {                                                              \
  |  |  |  |  257|  2.59k|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 2.59k]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|  2.59k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 2.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  375|  2.59k|    m_remote_ephemeral_ellswift_pk = EllSwiftPubKey(msg.subspan(0, ELLSWIFT_PUB_KEY_SIZE));
  376|  2.59k|    bytes_read += ELLSWIFT_PUB_KEY_SIZE;
  377|       |
  378|  2.59k|    m_symmetric_state.MixHash(m_remote_ephemeral_ellswift_pk);
  379|  2.59k|    LogTrace(BCLog::SV2, "Mix hash: %s\n", HexStr(m_symmetric_state.GetHashOutput()));
  ------------------
  |  |  264|  2.59k|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|  2.59k|    do {                                                              \
  |  |  |  |  257|  2.59k|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 2.59k]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|  2.59k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 2.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  380|       |
  381|  2.59k|    LogTrace(BCLog::SV2, "Perform ECDH with the remote ephemeral key\n");
  ------------------
  |  |  264|  2.59k|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|  2.59k|    do {                                                              \
  |  |  |  |  257|  2.59k|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 2.59k]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|  2.59k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 2.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  382|  2.59k|    ECDHSecret ecdh_secret{m_ephemeral_key.ComputeBIP324ECDHSecret(m_remote_ephemeral_ellswift_pk,
  383|  2.59k|                                                                   m_ephemeral_ellswift_pk,
  384|  2.59k|                                                                   /*initiating=*/true)};
  385|       |
  386|  2.59k|    LogTrace(BCLog::SV2, "Mix key with ECDH result: ephemeral ours -- remote ephemeral\n");
  ------------------
  |  |  264|  2.59k|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|  2.59k|    do {                                                              \
  |  |  |  |  257|  2.59k|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 2.59k]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|  2.59k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 2.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  387|  2.59k|    m_symmetric_state.MixKey(ecdh_secret);
  388|  2.59k|    m_symmetric_state.LogChainingKey();
  389|       |
  390|  2.59k|    LogTrace(BCLog::SV2, "Decrypt remote static key\n");
  ------------------
  |  |  264|  2.59k|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|  2.59k|    do {                                                              \
  |  |  |  |  257|  2.59k|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 2.59k]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|  2.59k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 2.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  391|  2.59k|    std::array<std::byte, ELLSWIFT_PUB_KEY_SIZE> remote_static_key_bytes;
  392|  2.59k|    bool res = m_symmetric_state.DecryptAndHash(msg.subspan(ELLSWIFT_PUB_KEY_SIZE, ELLSWIFT_PUB_KEY_SIZE + Poly1305::TAGLEN), remote_static_key_bytes);
  393|  2.59k|    if (!res) return false;
  ------------------
  |  Branch (393:9): [True: 486, False: 2.10k]
  ------------------
  394|  2.10k|    bytes_read += ELLSWIFT_PUB_KEY_SIZE + Poly1305::TAGLEN;
  395|       |
  396|  2.10k|    LogTrace(BCLog::SV2, "Mix hash: %s\n", HexStr(m_symmetric_state.GetHashOutput()));
  ------------------
  |  |  264|  2.10k|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|  2.10k|    do {                                                              \
  |  |  |  |  257|  2.10k|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 2.10k]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|  2.10k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 2.10k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  397|       |
  398|       |    // Load remote static key from the decryted msg
  399|  2.10k|    m_remote_static_ellswift_pk = EllSwiftPubKey(remote_static_key_bytes);
  400|       |
  401|  2.10k|    LogTrace(BCLog::SV2, "Perform ECDH on the remote static key\n");
  ------------------
  |  |  264|  2.10k|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|  2.10k|    do {                                                              \
  |  |  |  |  257|  2.10k|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 2.10k]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|  2.10k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 2.10k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  402|  2.10k|    ECDHSecret ecdh_static_secret{m_ephemeral_key.ComputeBIP324ECDHSecret(m_remote_static_ellswift_pk,
  403|  2.10k|                                                                          m_ephemeral_ellswift_pk,
  404|  2.10k|                                                                          /*initiating=*/true)};
  405|  2.10k|    LogTrace(BCLog::SV2, "ECDH result: %s\n", HexStr(ecdh_static_secret));
  ------------------
  |  |  264|  2.10k|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|  2.10k|    do {                                                              \
  |  |  |  |  257|  2.10k|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 2.10k]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|  2.10k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 2.10k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  406|       |
  407|  2.10k|    LogTrace(BCLog::SV2, "Mix key with ECDH result: ephemeral ours -- remote static\n");
  ------------------
  |  |  264|  2.10k|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|  2.10k|    do {                                                              \
  |  |  |  |  257|  2.10k|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 2.10k]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|  2.10k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 2.10k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  408|  2.10k|    m_symmetric_state.MixKey(ecdh_static_secret);
  409|  2.10k|    m_symmetric_state.LogChainingKey();
  410|       |
  411|  2.10k|    LogTrace(BCLog::SV2, "Decrypt remote certificate\n");
  ------------------
  |  |  264|  2.10k|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|  2.10k|    do {                                                              \
  |  |  |  |  257|  2.10k|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 2.10k]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|  2.10k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 2.10k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  412|  2.10k|    std::array<std::byte, Sv2SignatureNoiseMessage::SIZE> remote_cert_bytes;
  413|  2.10k|    res = m_symmetric_state.DecryptAndHash(msg.subspan(bytes_read, Sv2SignatureNoiseMessage::SIZE + Poly1305::TAGLEN), remote_cert_bytes);
  414|  2.10k|    if (!res) return false;
  ------------------
  |  Branch (414:9): [True: 37, False: 2.07k]
  ------------------
  415|  2.07k|    bytes_read += (Sv2SignatureNoiseMessage::SIZE + Poly1305::TAGLEN);
  416|  2.07k|    LogTrace(BCLog::SV2, "Mix hash: %s\n", HexStr(m_symmetric_state.GetHashOutput()));
  ------------------
  |  |  264|  2.07k|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|  2.07k|    do {                                                              \
  |  |  |  |  257|  2.07k|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 2.07k]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|  2.07k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 2.07k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  417|       |
  418|  2.07k|    LogTrace(BCLog::SV2, "Validate remote certificate\n");
  ------------------
  |  |  264|  2.07k|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|  2.07k|    do {                                                              \
  |  |  |  |  257|  2.07k|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 2.07k]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|  2.07k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 2.07k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  419|  2.07k|    DataStream ss_cert(remote_cert_bytes);
  420|  2.07k|    Sv2SignatureNoiseMessage cert;
  421|  2.07k|    ss_cert >> cert;
  422|  2.07k|    cert.m_static_key = XOnlyPubKey(m_remote_static_ellswift_pk.Decode());
  423|  2.07k|    Assume(m_authority_pubkey);
  ------------------
  |  |  118|  2.07k|#define Assume(val) inline_assertion_check<false>(val, __FILE__, __LINE__, __func__, #val)
  ------------------
  424|  2.07k|    if (!cert.Validate(m_authority_pubkey.value())) {
  ------------------
  |  Branch (424:9): [True: 1.26k, False: 806]
  ------------------
  425|       |        // We initiated the connection, so it's safe to unconditionally log this:
  426|  1.26k|        LogWarning("Invalid certificate: %s\n", HexStr(remote_cert_bytes));
  ------------------
  |  |  241|  1.26k|#define LogWarning(...) LogPrintLevel_(BCLog::LogFlags::ALL, BCLog::Level::Warning, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  235|  1.26k|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  ------------------
  ------------------
  427|  1.26k|        return false;
  428|  1.26k|    }
  429|       |
  430|    806|    Assume(bytes_read == HANDSHAKE_STEP2_SIZE);
  ------------------
  |  |  118|    806|#define Assume(val) inline_assertion_check<false>(val, __FILE__, __LINE__, __func__, #val)
  ------------------
  431|    806|    return true;
  432|  2.07k|}
_ZN17Sv2HandshakeState19SplitSymmetricStateEv:
  435|  1.61k|{
  436|  1.61k|    return m_symmetric_state.Split();
  437|  1.61k|}
_ZN17Sv2HandshakeState13GetHashOutputEv:
  440|  1.61k|{
  441|  1.61k|    return m_symmetric_state.GetHashOutput();
  442|  1.61k|}
_ZN9Sv2Cipher15FinishHandshakeEv:
  463|  1.61k|{
  464|  1.61k|    Assume(m_handshake_state);
  ------------------
  |  |  118|  1.61k|#define Assume(val) inline_assertion_check<false>(val, __FILE__, __LINE__, __func__, #val)
  ------------------
  465|       |
  466|  1.61k|    auto cipher_state{m_handshake_state->SplitSymmetricState()};
  467|       |
  468|  1.61k|    m_hash = m_handshake_state->GetHashOutput();
  469|       |
  470|  1.61k|    m_cs1 = std::move(cipher_state[0]);
  471|  1.61k|    m_cs2 = std::move(cipher_state[1]);
  472|       |
  473|  1.61k|    m_handshake_state.reset();
  474|  1.61k|}
_ZN9Sv2Cipher20EncryptedMessageSizeEm:
  477|   251k|{
  478|   251k|    constexpr size_t chunk_size = NOISE_MAX_CHUNK_SIZE - Poly1305::TAGLEN;
  479|   251k|    const size_t num_chunks = (msg_len + chunk_size - 1) / chunk_size;
  480|   251k|    return msg_len + (num_chunks * Poly1305::TAGLEN);
  481|   251k|}
_ZN9Sv2Cipher14DecryptMessageENSt3__14spanISt4byteLm18446744073709551615EEES3_:
  484|  34.3k|{
  485|  34.3k|    Assume(EncryptedMessageSize(plain.size()) == ciphertext.size());
  ------------------
  |  |  118|  34.3k|#define Assume(val) inline_assertion_check<false>(val, __FILE__, __LINE__, __func__, #val)
  ------------------
  486|       |
  487|  34.3k|    if (m_initiator) {
  ------------------
  |  Branch (487:9): [True: 32.3k, False: 1.92k]
  ------------------
  488|  32.3k|        return m_cs2.DecryptMessage(ciphertext, plain);
  489|  32.3k|    } else {
  490|  1.92k|        return m_cs1.DecryptMessage(ciphertext, plain);
  491|  1.92k|    }
  492|  34.3k|}
_ZN9Sv2Cipher14EncryptMessageENSt3__14spanIKSt4byteLm18446744073709551615EEENS1_IS2_Lm18446744073709551615EEE:
  495|  34.3k|{
  496|  34.3k|    Assume(output.size() == Sv2Cipher::EncryptedMessageSize(input.size()));
  ------------------
  |  |  118|  34.3k|#define Assume(val) inline_assertion_check<false>(val, __FILE__, __LINE__, __func__, #val)
  ------------------
  497|       |
  498|  34.3k|    if (m_initiator) {
  ------------------
  |  Branch (498:9): [True: 1.92k, False: 32.3k]
  ------------------
  499|  1.92k|        return m_cs1.EncryptMessage(input, output);
  500|  32.3k|    } else {
  501|  32.3k|        return m_cs2.EncryptMessage(input, output);
  502|  32.3k|    }
  503|  34.3k|}

_ZN9Sv2CipherC2EbNSt3__110unique_ptrI17Sv2HandshakeStateNS0_14default_deleteIS2_EEEE:
  271|  1.61k|    Sv2Cipher(bool initiator, std::unique_ptr<Sv2HandshakeState> handshake_state) : m_initiator{initiator}, m_handshake_state{std::move(handshake_state)} {};
_ZN17Sv2SymmetricStateC2Ev:
  155|  5.19k|    Sv2SymmetricState() : m_chaining_key{PROTOCOL_NAME_HASH} {}
_ZN17Sv2HandshakeStateC2EO4CKey11XOnlyPubKey:
  202|  2.59k|                      XOnlyPubKey authority_pubkey) : m_static_key{static_key},
  203|  2.59k|                                                        m_authority_pubkey{authority_pubkey}
  204|  2.59k|    {
  205|  2.59k|        m_static_ellswift_pk = static_key.EllSwiftCreate(MakeByteSpan(GetRandHash()));
  206|  2.59k|    };
_ZN17Sv2HandshakeStateC2EO4CKeyO24Sv2SignatureNoiseMessage:
  212|  2.59k|                      Sv2SignatureNoiseMessage&& certificate) : m_static_key{static_key},
  213|  2.59k|                                                                m_certificate{certificate}
  214|  2.59k|    {
  215|  2.59k|        m_static_ellswift_pk = static_key.EllSwiftCreate(MakeByteSpan(GetRandHash()));
  216|  2.59k|    };
_ZN24Sv2SignatureNoiseMessageC2Ev:
   52|  4.66k|    Sv2SignatureNoiseMessage() = default;
_ZN14Sv2CipherStateC2Ev:
   90|  8.41k|    Sv2CipherState() = default;
_ZNK24Sv2SignatureNoiseMessage9SerializeI10DataStreamEEvRT_:
   63|  2.59k|    {
   64|  2.59k|        s << m_version
   65|  2.59k|          << m_valid_from
   66|  2.59k|          << m_valid_to
   67|  2.59k|          << m_sig;
   68|  2.59k|    }
_ZN24Sv2SignatureNoiseMessage11UnserializeI10DataStreamEEvRT_:
   71|  2.07k|    {
   72|  2.07k|        s >> m_version
   73|  2.07k|          >> m_valid_from
   74|  2.07k|          >> m_valid_to
   75|  2.07k|          >> m_sig;
   76|  2.07k|    }

_ZN14AnnotatedMixinINSt3__115recursive_mutexEED2Ev:
   89|      2|    ~AnnotatedMixin() {
   90|      2|        DeleteLock((void*)this);
   91|      2|    }
_Z13LeaveCriticalv:
   71|  12.9k|inline void LeaveCritical() {}
_Z17MaybeCheckNotHeldR14AnnotatedMixinINSt3__15mutexEE:
  249|  12.9k|inline Mutex& MaybeCheckNotHeld(Mutex& cs) EXCLUSIVE_LOCKS_REQUIRED(!cs) LOCK_RETURNED(cs) { return cs; }
_Z10DeleteLockPv:
   77|      6|inline void DeleteLock(void* cs) {}
_ZN14AnnotatedMixinINSt3__15mutexEED2Ev:
   89|      4|    ~AnnotatedMixin() {
   90|      4|        DeleteLock((void*)this);
   91|      4|    }
_ZN10UniqueLockI14AnnotatedMixinINSt3__15mutexEEEC2ERS3_PKcS7_ib:
  172|  12.9k|    UniqueLock(MutexType& mutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) EXCLUSIVE_LOCK_FUNCTION(mutexIn) : Base(mutexIn, std::defer_lock)
  173|  12.9k|    {
  174|  12.9k|        if (fTry)
  ------------------
  |  Branch (174:13): [True: 0, False: 12.9k]
  ------------------
  175|      0|            TryEnter(pszName, pszFile, nLine);
  176|  12.9k|        else
  177|  12.9k|            Enter(pszName, pszFile, nLine);
  178|  12.9k|    }
_Z13EnterCriticalINSt3__15mutexEEvPKcS3_iPT_b:
   70|  12.9k|inline void EnterCritical(const char* pszName, const char* pszFile, int nLine, MutexType* cs, bool fTry = false) {}
_ZN10UniqueLockI14AnnotatedMixinINSt3__15mutexEEE5EnterEPKcS6_i:
  152|  12.9k|    {
  153|  12.9k|        EnterCritical(pszName, pszFile, nLine, Base::mutex());
  154|       |#ifdef DEBUG_LOCKCONTENTION
  155|       |        if (Base::try_lock()) return;
  156|       |        LOG_TIME_MICROS_WITH_CATEGORY(strprintf("lock contention %s, %s:%d", pszName, pszFile, nLine), BCLog::LOCK);
  157|       |#endif
  158|  12.9k|        Base::lock();
  159|  12.9k|    }
_ZN10UniqueLockI14AnnotatedMixinINSt3__15mutexEEED2Ev:
  192|  12.9k|    {
  193|  12.9k|        if (Base::owns_lock())
  ------------------
  |  Branch (193:13): [True: 12.9k, False: 0]
  ------------------
  194|  12.9k|            LeaveCritical();
  195|  12.9k|    }

_ZN18FuzzedDataProvider11ConsumeBoolEv:
  289|  77.1k|inline bool FuzzedDataProvider::ConsumeBool() {
  290|  77.1k|  return 1 & ConsumeIntegral<uint8_t>();
  291|  77.1k|}
_ZN18FuzzedDataProvider15ConsumeIntegralIhEET_v:
  195|  77.1k|template <typename T> T FuzzedDataProvider::ConsumeIntegral() {
  196|  77.1k|  return ConsumeIntegralInRange(std::numeric_limits<T>::min(),
  197|  77.1k|                                std::numeric_limits<T>::max());
  198|  77.1k|}
_ZN18FuzzedDataProvider22ConsumeIntegralInRangeIhEET_S1_S1_:
  205|  77.1k|T FuzzedDataProvider::ConsumeIntegralInRange(T min, T max) {
  206|  77.1k|  static_assert(std::is_integral_v<T>, "An integral type is required.");
  207|  77.1k|  static_assert(sizeof(T) <= sizeof(uint64_t), "Unsupported integral type.");
  208|       |
  209|  77.1k|  if (min > max)
  ------------------
  |  Branch (209:7): [True: 0, False: 77.1k]
  ------------------
  210|      0|    abort();
  211|       |
  212|       |  // Use the biggest type possible to hold the range and the result.
  213|  77.1k|  uint64_t range = static_cast<uint64_t>(max) - static_cast<uint64_t>(min);
  214|  77.1k|  uint64_t result = 0;
  215|  77.1k|  size_t offset = 0;
  216|       |
  217|   147k|  while (offset < sizeof(T) * CHAR_BIT && (range >> offset) > 0 &&
  ------------------
  |  Branch (217:10): [True: 77.1k, False: 70.0k]
  |  Branch (217:43): [True: 77.1k, False: 0]
  ------------------
  218|  77.1k|         remaining_bytes_ != 0) {
  ------------------
  |  Branch (218:10): [True: 70.0k, False: 7.14k]
  ------------------
  219|       |    // Pull bytes off the end of the seed data. Experimentally, this seems to
  220|       |    // allow the fuzzer to more easily explore the input space. This makes
  221|       |    // sense, since it works by modifying inputs that caused new code to run,
  222|       |    // and this data is often used to encode length of data read by
  223|       |    // |ConsumeBytes|. Separating out read lengths makes it easier modify the
  224|       |    // contents of the data that is actually read.
  225|  70.0k|    --remaining_bytes_;
  226|  70.0k|    result = (result << CHAR_BIT) | data_ptr_[remaining_bytes_];
  227|  70.0k|    offset += CHAR_BIT;
  228|  70.0k|  }
  229|       |
  230|       |  // Avoid division by 0, in case |range + 1| results in overflow.
  231|  77.1k|  if (range != std::numeric_limits<decltype(range)>::max())
  ------------------
  |  Branch (231:7): [True: 77.1k, False: 0]
  ------------------
  232|  77.1k|    result = result % (range + 1);
  233|       |
  234|  77.1k|  return static_cast<T>(static_cast<uint64_t>(min) + result);
  235|  77.1k|}
_ZN18FuzzedDataProviderC2EPKhm:
   37|  2.59k|      : data_ptr_(data), remaining_bytes_(size) {}
_ZN18FuzzedDataProvider15remaining_bytesEv:
   85|  34.7k|  size_t remaining_bytes() { return remaining_bytes_; }
_ZN18FuzzedDataProvider22ConsumeIntegralInRangeIjEET_S1_S1_:
  205|  40.8k|T FuzzedDataProvider::ConsumeIntegralInRange(T min, T max) {
  206|  40.8k|  static_assert(std::is_integral_v<T>, "An integral type is required.");
  207|  40.8k|  static_assert(sizeof(T) <= sizeof(uint64_t), "Unsupported integral type.");
  208|       |
  209|  40.8k|  if (min > max)
  ------------------
  |  Branch (209:7): [True: 0, False: 40.8k]
  ------------------
  210|      0|    abort();
  211|       |
  212|       |  // Use the biggest type possible to hold the range and the result.
  213|  40.8k|  uint64_t range = static_cast<uint64_t>(max) - static_cast<uint64_t>(min);
  214|  40.8k|  uint64_t result = 0;
  215|  40.8k|  size_t offset = 0;
  216|       |
  217|   155k|  while (offset < sizeof(T) * CHAR_BIT && (range >> offset) > 0 &&
  ------------------
  |  Branch (217:10): [True: 153k, False: 2.28k]
  |  Branch (217:43): [True: 117k, False: 35.4k]
  ------------------
  218|   117k|         remaining_bytes_ != 0) {
  ------------------
  |  Branch (218:10): [True: 114k, False: 3.13k]
  ------------------
  219|       |    // Pull bytes off the end of the seed data. Experimentally, this seems to
  220|       |    // allow the fuzzer to more easily explore the input space. This makes
  221|       |    // sense, since it works by modifying inputs that caused new code to run,
  222|       |    // and this data is often used to encode length of data read by
  223|       |    // |ConsumeBytes|. Separating out read lengths makes it easier modify the
  224|       |    // contents of the data that is actually read.
  225|   114k|    --remaining_bytes_;
  226|   114k|    result = (result << CHAR_BIT) | data_ptr_[remaining_bytes_];
  227|   114k|    offset += CHAR_BIT;
  228|   114k|  }
  229|       |
  230|       |  // Avoid division by 0, in case |range + 1| results in overflow.
  231|  40.8k|  if (range != std::numeric_limits<decltype(range)>::max())
  ------------------
  |  Branch (231:7): [True: 40.8k, False: 0]
  ------------------
  232|  40.8k|    result = result % (range + 1);
  233|       |
  234|  40.8k|  return static_cast<T>(static_cast<uint64_t>(min) + result);
  235|  40.8k|}
_ZN18FuzzedDataProvider12ConsumeBytesISt4byteEENSt3__16vectorIT_NS2_9allocatorIS4_EEEEm:
  109|  2.59k|std::vector<T> FuzzedDataProvider::ConsumeBytes(size_t num_bytes) {
  110|  2.59k|  num_bytes = std::min(num_bytes, remaining_bytes_);
  111|  2.59k|  return ConsumeBytes<T>(num_bytes, num_bytes);
  112|  2.59k|}
_ZN18FuzzedDataProvider12ConsumeBytesISt4byteEENSt3__16vectorIT_NS2_9allocatorIS4_EEEEmm:
  353|  2.59k|std::vector<T> FuzzedDataProvider::ConsumeBytes(size_t size, size_t num_bytes) {
  354|  2.59k|  static_assert(sizeof(T) == sizeof(uint8_t), "Incompatible data type.");
  355|       |
  356|       |  // The point of using the size-based constructor below is to increase the
  357|       |  // odds of having a vector object with capacity being equal to the length.
  358|       |  // That part is always implementation specific, but at least both libc++ and
  359|       |  // libstdc++ allocate the requested number of bytes in that constructor,
  360|       |  // which seems to be a natural choice for other implementations as well.
  361|       |  // To increase the odds even more, we also call |shrink_to_fit| below.
  362|  2.59k|  std::vector<T> result(size);
  363|  2.59k|  if (size == 0) {
  ------------------
  |  Branch (363:7): [True: 0, False: 2.59k]
  ------------------
  364|      0|    if (num_bytes != 0)
  ------------------
  |  Branch (364:9): [True: 0, False: 0]
  ------------------
  365|      0|      abort();
  366|      0|    return result;
  367|      0|  }
  368|       |
  369|  2.59k|  CopyAndAdvance(result.data(), num_bytes);
  370|       |
  371|       |  // Even though |shrink_to_fit| is also implementation specific, we expect it
  372|       |  // to provide an additional assurance in case vector's constructor allocated
  373|       |  // a buffer which is larger than the actual amount of data we put inside it.
  374|  2.59k|  result.shrink_to_fit();
  375|  2.59k|  return result;
  376|  2.59k|}
_ZN18FuzzedDataProvider14CopyAndAdvanceEPvm:
  339|  2.59k|                                               size_t num_bytes) {
  340|  2.59k|  std::memcpy(destination, data_ptr_, num_bytes);
  341|  2.59k|  Advance(num_bytes);
  342|  2.59k|}
_ZN18FuzzedDataProvider7AdvanceEm:
  344|  2.59k|inline void FuzzedDataProvider::Advance(size_t num_bytes) {
  345|  2.59k|  if (num_bytes > remaining_bytes_)
  ------------------
  |  Branch (345:7): [True: 0, False: 2.59k]
  ------------------
  346|      0|    abort();
  347|       |
  348|  2.59k|  data_ptr_ += num_bytes;
  349|  2.59k|  remaining_bytes_ -= num_bytes;
  350|  2.59k|}
_ZN18FuzzedDataProvider15ConsumeIntegralItEET_v:
  195|  1.63k|template <typename T> T FuzzedDataProvider::ConsumeIntegral() {
  196|  1.63k|  return ConsumeIntegralInRange(std::numeric_limits<T>::min(),
  197|  1.63k|                                std::numeric_limits<T>::max());
  198|  1.63k|}
_ZN18FuzzedDataProvider22ConsumeIntegralInRangeItEET_S1_S1_:
  205|  1.63k|T FuzzedDataProvider::ConsumeIntegralInRange(T min, T max) {
  206|  1.63k|  static_assert(std::is_integral_v<T>, "An integral type is required.");
  207|  1.63k|  static_assert(sizeof(T) <= sizeof(uint64_t), "Unsupported integral type.");
  208|       |
  209|  1.63k|  if (min > max)
  ------------------
  |  Branch (209:7): [True: 0, False: 1.63k]
  ------------------
  210|      0|    abort();
  211|       |
  212|       |  // Use the biggest type possible to hold the range and the result.
  213|  1.63k|  uint64_t range = static_cast<uint64_t>(max) - static_cast<uint64_t>(min);
  214|  1.63k|  uint64_t result = 0;
  215|  1.63k|  size_t offset = 0;
  216|       |
  217|  2.84k|  while (offset < sizeof(T) * CHAR_BIT && (range >> offset) > 0 &&
  ------------------
  |  Branch (217:10): [True: 2.24k, False: 602]
  |  Branch (217:43): [True: 2.24k, False: 0]
  ------------------
  218|  2.24k|         remaining_bytes_ != 0) {
  ------------------
  |  Branch (218:10): [True: 1.21k, False: 1.03k]
  ------------------
  219|       |    // Pull bytes off the end of the seed data. Experimentally, this seems to
  220|       |    // allow the fuzzer to more easily explore the input space. This makes
  221|       |    // sense, since it works by modifying inputs that caused new code to run,
  222|       |    // and this data is often used to encode length of data read by
  223|       |    // |ConsumeBytes|. Separating out read lengths makes it easier modify the
  224|       |    // contents of the data that is actually read.
  225|  1.21k|    --remaining_bytes_;
  226|  1.21k|    result = (result << CHAR_BIT) | data_ptr_[remaining_bytes_];
  227|  1.21k|    offset += CHAR_BIT;
  228|  1.21k|  }
  229|       |
  230|       |  // Avoid division by 0, in case |range + 1| results in overflow.
  231|  1.63k|  if (range != std::numeric_limits<decltype(range)>::max())
  ------------------
  |  Branch (231:7): [True: 1.63k, False: 0]
  ------------------
  232|  1.63k|    result = result % (range + 1);
  233|       |
  234|  1.63k|  return static_cast<T>(static_cast<uint64_t>(min) + result);
  235|  1.63k|}
_ZN18FuzzedDataProvider15ConsumeIntegralImEET_v:
  195|    806|template <typename T> T FuzzedDataProvider::ConsumeIntegral() {
  196|    806|  return ConsumeIntegralInRange(std::numeric_limits<T>::min(),
  197|    806|                                std::numeric_limits<T>::max());
  198|    806|}
_ZN18FuzzedDataProvider22ConsumeIntegralInRangeImEET_S1_S1_:
  205|    806|T FuzzedDataProvider::ConsumeIntegralInRange(T min, T max) {
  206|    806|  static_assert(std::is_integral_v<T>, "An integral type is required.");
  207|    806|  static_assert(sizeof(T) <= sizeof(uint64_t), "Unsupported integral type.");
  208|       |
  209|    806|  if (min > max)
  ------------------
  |  Branch (209:7): [True: 0, False: 806]
  ------------------
  210|      0|    abort();
  211|       |
  212|       |  // Use the biggest type possible to hold the range and the result.
  213|    806|  uint64_t range = static_cast<uint64_t>(max) - static_cast<uint64_t>(min);
  214|    806|  uint64_t result = 0;
  215|    806|  size_t offset = 0;
  216|       |
  217|  6.40k|  while (offset < sizeof(T) * CHAR_BIT && (range >> offset) > 0 &&
  ------------------
  |  Branch (217:10): [True: 5.72k, False: 682]
  |  Branch (217:43): [True: 5.72k, False: 0]
  ------------------
  218|  5.72k|         remaining_bytes_ != 0) {
  ------------------
  |  Branch (218:10): [True: 5.60k, False: 124]
  ------------------
  219|       |    // Pull bytes off the end of the seed data. Experimentally, this seems to
  220|       |    // allow the fuzzer to more easily explore the input space. This makes
  221|       |    // sense, since it works by modifying inputs that caused new code to run,
  222|       |    // and this data is often used to encode length of data read by
  223|       |    // |ConsumeBytes|. Separating out read lengths makes it easier modify the
  224|       |    // contents of the data that is actually read.
  225|  5.60k|    --remaining_bytes_;
  226|  5.60k|    result = (result << CHAR_BIT) | data_ptr_[remaining_bytes_];
  227|  5.60k|    offset += CHAR_BIT;
  228|  5.60k|  }
  229|       |
  230|       |  // Avoid division by 0, in case |range + 1| results in overflow.
  231|    806|  if (range != std::numeric_limits<decltype(range)>::max())
  ------------------
  |  Branch (231:7): [True: 0, False: 806]
  ------------------
  232|      0|    result = result % (range + 1);
  233|       |
  234|    806|  return static_cast<T>(static_cast<uint64_t>(min) + result);
  235|    806|}

_ZN12CheckGlobalsC2Ev:
   56|  2.59k|CheckGlobals::CheckGlobals() : m_impl(std::make_unique<CheckGlobalsImpl>()) {}
_ZN12CheckGlobalsD2Ev:
   57|  2.59k|CheckGlobals::~CheckGlobals() = default;
_ZN16CheckGlobalsImplC2Ev:
   17|  2.59k|    {
   18|  2.59k|        g_used_g_prng = false;
   19|  2.59k|        g_seeded_g_prng_zero = false;
   20|  2.59k|        g_used_system_time = false;
   21|  2.59k|        SetMockTime(0s);
   22|  2.59k|    }
_ZN16CheckGlobalsImplD2Ev:
   24|  2.59k|    {
   25|  2.59k|        if (g_used_g_prng && !g_seeded_g_prng_zero) {
  ------------------
  |  Branch (25:13): [True: 2.59k, False: 0]
  |  Branch (25:30): [True: 0, False: 2.59k]
  ------------------
   26|      0|            std::cerr << "\n\n"
   27|      0|                         "The current fuzz target used the global random state.\n\n"
   28|       |
   29|      0|                         "This is acceptable, but requires the fuzz target to call \n"
   30|      0|                         "SeedRandomStateForTest(SeedRand::ZEROS) in the first line \n"
   31|      0|                         "of the FUZZ_TARGET function.\n\n"
   32|       |
   33|      0|                         "An alternative solution would be to avoid any use of globals.\n\n"
   34|       |
   35|      0|                         "Without a solution, fuzz instability and non-determinism can lead \n"
   36|      0|                         "to non-reproducible bugs or inefficient fuzzing.\n\n"
   37|      0|                      << std::endl;
   38|      0|            std::abort(); // Abort, because AFL may try to recover from a std::exit
   39|      0|        }
   40|       |
   41|  2.59k|        if (g_used_system_time) {
  ------------------
  |  Branch (41:13): [True: 0, False: 2.59k]
  ------------------
   42|      0|            std::cerr << "\n\n"
   43|      0|                         "The current fuzz target accessed system time.\n\n"
   44|       |
   45|      0|                         "This is acceptable, but requires the fuzz target to call \n"
   46|      0|                         "SetMockTime() at the beginning of processing the fuzz input.\n\n"
   47|       |
   48|      0|                         "Without setting mock time, time-dependent behavior can lead \n"
   49|      0|                         "to non-reproducible bugs or inefficient fuzzing.\n\n"
   50|      0|                      << std::endl;
   51|      0|            std::abort();
   52|      0|        }
   53|  2.59k|    }

LLVMFuzzerTestOneInput:
  229|  2.59k|{
  230|  2.59k|    test_one_input({data, size});
  231|  2.59k|    return 0;
  232|  2.59k|}
fuzz.cpp:_ZL14test_one_inputNSt3__14spanIKhLm18446744073709551615EEE:
   95|  2.59k|{
   96|  2.59k|    (*Assert(g_test_one_input))(buffer);
  ------------------
  |  |  106|  2.59k|#define Assert(val) inline_assertion_check<true>(val, __FILE__, __LINE__, __func__, #val)
  ------------------
   97|  2.59k|}

_Z11MaybeDamageR18FuzzedDataProviderRNSt3__16vectorISt4byteNS1_9allocatorIS3_EEEE:
   64|  39.4k|{
   65|  39.4k|    if (transport.size() == 0) return false;
  ------------------
  |  Branch (65:9): [True: 6.43k, False: 33.0k]
  ------------------
   66|       |
   67|       |    // Optionally damage 1 bit in the ciphertext.
   68|  33.0k|    const bool damage = provider.ConsumeBool();
   69|  33.0k|    if (damage) {
  ------------------
  |  Branch (69:9): [True: 1.11k, False: 31.9k]
  ------------------
   70|  1.11k|        unsigned damage_bit = provider.ConsumeIntegralInRange<unsigned>(0,
   71|  1.11k|                                                                        transport.size() * 8U - 1U);
   72|  1.11k|        unsigned damage_pos = damage_bit >> 3;
   73|  1.11k|        LogTrace(BCLog::SV2, "Damage byte %d of %d\n", damage_pos, transport.size());
  ------------------
  |  |  264|  1.11k|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|  1.11k|    do {                                                              \
  |  |  |  |  257|  1.11k|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 1.11k]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|  1.11k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 1.11k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   74|  1.11k|        std::byte damage_val{(uint8_t)(1U << (damage_bit & 7))};
   75|  1.11k|        transport.at(damage_pos) ^= damage_val;
   76|  1.11k|    }
   77|  33.0k|    return damage;
   78|  39.4k|}
_Z38sv2_noise_cipher_roundtrip_fuzz_targetNSt3__14spanIKhLm18446744073709551615EEE:
   81|  2.59k|{
   82|  2.59k|    const CheckGlobals check_globals{};
   83|  2.59k|    SeedRandomStateForTest(SeedRand::ZEROS);
   84|       |    // Test that Sv2Noise's encryption and decryption agree.
   85|       |
   86|       |    // To conserve fuzzer entropy, deterministically generate Alice and Bob keys.
   87|  2.59k|    FuzzedDataProvider provider(buffer.data(), buffer.size());
   88|  2.59k|    auto seed_ent = provider.ConsumeBytes<std::byte>(32);
   89|  2.59k|    seed_ent.resize(32);
   90|  2.59k|    CExtKey seed;
   91|  2.59k|    seed.SetSeed(seed_ent);
   92|       |
   93|  2.59k|    CExtKey tmp;
   94|  2.59k|    if (!seed.Derive(tmp, 0)) return;
  ------------------
  |  Branch (94:9): [True: 0, False: 2.59k]
  ------------------
   95|  2.59k|    CKey alice_authority_key{tmp.key};
   96|       |
   97|  2.59k|    if (!seed.Derive(tmp, 1)) return;
  ------------------
  |  Branch (97:9): [True: 0, False: 2.59k]
  ------------------
   98|  2.59k|    CKey alice_static_key{tmp.key};
   99|       |
  100|  2.59k|    if (!seed.Derive(tmp, 2)) return;
  ------------------
  |  Branch (100:9): [True: 0, False: 2.59k]
  ------------------
  101|  2.59k|    CKey alice_ephemeral_key{tmp.key};
  102|       |
  103|  2.59k|    if (!seed.Derive(tmp, 10)) return;
  ------------------
  |  Branch (103:9): [True: 0, False: 2.59k]
  ------------------
  104|  2.59k|    CKey bob_authority_key{tmp.key};
  105|       |
  106|  2.59k|    if (!seed.Derive(tmp, 11)) return;
  ------------------
  |  Branch (106:9): [True: 0, False: 2.59k]
  ------------------
  107|  2.59k|    CKey bob_static_key{tmp.key};
  108|       |
  109|  2.59k|    if (!seed.Derive(tmp, 12)) return;
  ------------------
  |  Branch (109:9): [True: 0, False: 2.59k]
  ------------------
  110|  2.59k|    CKey bob_ephemeral_key{tmp.key};
  111|       |
  112|  2.59k|    if (!seed.Derive(tmp, 13)) return;
  ------------------
  |  Branch (112:9): [True: 0, False: 2.59k]
  ------------------
  113|  2.59k|    CKey malory_authority_key{tmp.key};
  114|       |
  115|  2.59k|    const bool use_fixture_times = provider.ConsumeBool();
  116|  2.59k|    const bool sign_with_expected_authority = use_fixture_times ? true : provider.ConsumeBool();
  ------------------
  |  Branch (116:47): [True: 788, False: 1.80k]
  ------------------
  117|       |
  118|  2.59k|    uint32_t now{0};
  119|  2.59k|    uint32_t valid_from{0};
  120|  2.59k|    uint32_t valid_to{0};
  121|  2.59k|    uint16_t version{0};
  122|       |
  123|  2.59k|    Sv2SignatureNoiseMessage bob_certificate;
  124|       |
  125|  2.59k|    if (use_fixture_times) {
  ------------------
  |  Branch (125:9): [True: 788, False: 1.80k]
  ------------------
  126|    788|        SetMockTime(TEST_GENESIS_TIME);
  127|    788|        bob_certificate = MakeSkewTolerantCertificate(bob_static_key, bob_authority_key, now, valid_from, valid_to);
  128|  1.80k|    } else {
  129|  1.80k|        now = provider.ConsumeIntegralInRange<uint32_t>(10000U, UINT32_MAX);
  130|  1.80k|        uint32_t past = provider.ConsumeIntegralInRange<uint32_t>(0, now);
  131|  1.80k|        uint32_t future = provider.ConsumeIntegralInRange<uint32_t>(now, UINT32_MAX);
  132|  1.80k|        valid_from = provider.ConsumeBool() ? past : future;
  ------------------
  |  Branch (132:22): [True: 397, False: 1.41k]
  ------------------
  133|  1.80k|        valid_to = provider.ConsumeBool() ? future : past;
  ------------------
  |  Branch (133:20): [True: 484, False: 1.32k]
  ------------------
  134|  1.80k|        version = provider.ConsumeBool() ? 0 : provider.ConsumeIntegral<uint16_t>();
  ------------------
  |  Branch (134:19): [True: 173, False: 1.63k]
  ------------------
  135|       |
  136|  1.80k|        const CKey& signing_authority_key = sign_with_expected_authority ? bob_authority_key : malory_authority_key;
  ------------------
  |  Branch (136:45): [True: 565, False: 1.24k]
  ------------------
  137|  1.80k|        bob_certificate = Sv2SignatureNoiseMessage(version, valid_from, valid_to,
  138|  1.80k|                                                   XOnlyPubKey(bob_static_key.GetPubKey()), signing_authority_key);
  139|  1.80k|    }
  140|       |
  141|  2.59k|    SetMockTime(std::chrono::seconds{now});
  142|       |
  143|  2.59k|    const bool certificate_valid_for_expected = bob_certificate.Validate(XOnlyPubKey(bob_authority_key.GetPubKey()));
  144|  2.59k|    bool expected_valid = sign_with_expected_authority && version == 0 && (valid_from <= now) && (valid_to >= now);
  ------------------
  |  Branch (144:27): [True: 1.35k, False: 1.24k]
  |  Branch (144:59): [True: 1.25k, False: 103]
  |  Branch (144:75): [True: 1.18k, False: 65]
  |  Branch (144:98): [True: 1.10k, False: 84]
  ------------------
  145|  2.59k|    if (use_fixture_times) {
  ------------------
  |  Branch (145:9): [True: 788, False: 1.80k]
  ------------------
  146|    788|        expected_valid = true;
  147|    788|        version = 0;
  148|    788|    }
  149|  2.59k|    assert(certificate_valid_for_expected == expected_valid);
  ------------------
  |  Branch (149:5): [True: 2.59k, False: 0]
  ------------------
  150|  2.59k|    bool valid_certificate = certificate_valid_for_expected;
  151|       |
  152|  2.59k|    if (sign_with_expected_authority) {
  ------------------
  |  Branch (152:9): [True: 1.35k, False: 1.24k]
  ------------------
  153|  1.35k|        const bool alternate_valid = bob_certificate.Validate(XOnlyPubKey(malory_authority_key.GetPubKey()));
  154|  1.35k|        assert(!alternate_valid);
  ------------------
  |  Branch (154:9): [True: 1.35k, False: 0]
  ------------------
  155|  1.35k|    }
  156|       |
  157|  2.59k|    LogTrace(BCLog::SV2,
  ------------------
  |  |  264|  2.59k|#define LogTrace(category, ...) LogPrintLevel(category, BCLog::Level::Trace, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  256|  2.59k|    do {                                                              \
  |  |  |  |  257|  2.59k|        if (LogAcceptCategory((category), (level))) {                 \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (257:13): [True: 0, False: 2.59k]
  |  |  |  |  ------------------
  |  |  |  |  258|      0|            LogPrintLevel_(category, level, __VA_ARGS__);             \
  |  |  |  |  ------------------
  |  |  |  |  |  |  235|      0|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  259|      0|        }                                                             \
  |  |  |  |  260|  2.59k|    } while (0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (260:14): [Folded, False: 2.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  158|  2.59k|             "Certificate scenario fixture=%d, version=%u, now=%u, valid_from=%u, valid_to=%u, signed_expected=%d, valid=%d\n",
  159|  2.59k|             use_fixture_times,
  160|  2.59k|             version,
  161|  2.59k|             now,
  162|  2.59k|             valid_from,
  163|  2.59k|             valid_to,
  164|  2.59k|             sign_with_expected_authority,
  165|  2.59k|             valid_certificate);
  166|       |
  167|       |    // Alice's static is not used in the test
  168|       |    // Alice needs to verify Bob's certificate, so we pass his authority key
  169|  2.59k|    auto alice_handshake = std::make_unique<Sv2HandshakeState>(std::move(alice_static_key), XOnlyPubKey(bob_authority_key.GetPubKey()));
  170|  2.59k|    alice_handshake->SetEphemeralKey(std::move(alice_ephemeral_key));
  171|       |    // Bob is the responder and does not receive (or verify) Alice's certificate,
  172|       |    // so we don't pass her authority key.
  173|  2.59k|    auto bob_handshake = std::make_unique<Sv2HandshakeState>(std::move(bob_static_key), std::move(bob_certificate));
  174|  2.59k|    bob_handshake->SetEphemeralKey(std::move(bob_ephemeral_key));
  175|       |
  176|       |    // Handshake Act 1: e ->
  177|       |
  178|  2.59k|    std::vector<std::byte> transport;
  179|  2.59k|    transport.resize(Sv2HandshakeState::ELLSWIFT_PUB_KEY_SIZE);
  180|       |    // Alice generates her ephemeral public key and write it into the buffer:
  181|  2.59k|    alice_handshake->WriteMsgEphemeralPK(transport);
  182|       |
  183|  2.59k|    bool damage_e = MaybeDamage(provider, transport);
  184|       |
  185|       |    // Bob reads the ephemeral key ()
  186|       |    // With EllSwift encoding this step can't fail
  187|  2.59k|    bob_handshake->ReadMsgEphemeralPK(transport);
  188|  2.59k|    ClearShrink(transport);
  189|       |
  190|       |    // Handshake Act 2: <- e, ee, s, es, SIGNATURE_NOISE_MESSAGE
  191|  2.59k|    transport.resize(Sv2HandshakeState::HANDSHAKE_STEP2_SIZE);
  192|  2.59k|    bob_handshake->WriteMsgES(transport);
  193|       |
  194|  2.59k|    bool damage_es = MaybeDamage(provider, transport);
  195|       |
  196|       |    // This ignores the remote possibility that the fuzzer finds two equivalent
  197|       |    // EllSwift encodings by flipping a single ephemeral key bit.
  198|  2.59k|    assert(alice_handshake->ReadMsgES(transport) == (valid_certificate && !damage_e && !damage_es));
  ------------------
  |  Branch (198:5): [True: 1.10k, False: 1.49k]
  |  Branch (198:5): [True: 878, False: 223]
  |  Branch (198:5): [True: 806, False: 72]
  |  Branch (198:5): [True: 2.59k, False: 0]
  ------------------
  199|       |
  200|  2.59k|    if (!valid_certificate || damage_e || damage_es) return;
  ------------------
  |  Branch (200:9): [True: 1.49k, False: 1.10k]
  |  Branch (200:31): [True: 223, False: 878]
  |  Branch (200:43): [True: 72, False: 806]
  ------------------
  201|       |
  202|       |    // Construct Sv2Cipher from the Sv2HandshakeState and test transport
  203|    806|    auto alice{Sv2Cipher(/*initiator=*/true, std::move(alice_handshake))};
  204|    806|    auto bob{Sv2Cipher(/*initiator=*/false, std::move(bob_handshake))};
  205|    806|    alice.FinishHandshake();
  206|    806|    bob.FinishHandshake();
  207|       |
  208|       |    // Use deterministic RNG to generate content rather than creating it from
  209|       |    // the fuzzer input.
  210|    806|    InsecureRandomContext rng(provider.ConsumeIntegral<uint64_t>());
  211|       |
  212|    806|    LIMITED_WHILE(provider.remaining_bytes(), 1000)
  ------------------
  |  |   23|  34.7k|    for (unsigned _count{limit}; (condition) && _count; --_count)
  |  |  ------------------
  |  |  |  Branch (23:34): [True: 34.3k, False: 413]
  |  |  |  Branch (23:49): [True: 34.3k, False: 0]
  |  |  ------------------
  ------------------
  213|  34.3k|    {
  214|  34.3k|        ClearShrink(transport);
  215|       |
  216|       |        // Alice or Bob sends a message
  217|  34.3k|        bool from_alice = provider.ConsumeBool();
  218|       |
  219|       |        // Set content length (slightly above NOISE_MAX_CHUNK_SIZE)
  220|  34.3k|        unsigned length = provider.ConsumeIntegralInRange<unsigned>(0, NOISE_MAX_CHUNK_SIZE + 100);
  221|  34.3k|        std::vector<std::byte> plain(length);
  222|  34.3k|        for (auto& val : plain)
  ------------------
  |  Branch (222:24): [True: 523M, False: 34.3k]
  ------------------
  223|   523M|            val = std::byte{(uint8_t)rng()};
  224|       |
  225|  34.3k|        const size_t encrypted_size = Sv2Cipher::EncryptedMessageSize(plain.size());
  226|  34.3k|        transport.resize(encrypted_size);
  227|       |
  228|  34.3k|        assert((from_alice ? alice : bob).EncryptMessage(plain, transport));
  ------------------
  |  Branch (228:9): [True: 1.92k, False: 32.3k]
  |  Branch (228:9): [True: 34.3k, False: 0]
  ------------------
  229|       |
  230|  34.3k|        const bool damage = MaybeDamage(provider, transport);
  231|       |
  232|  34.3k|        std::vector<std::byte> plain_read;
  233|  34.3k|        plain_read.resize(plain.size());
  234|       |
  235|  34.3k|        bool ok = (from_alice ? bob : alice).DecryptMessage(transport, plain_read);
  ------------------
  |  Branch (235:20): [True: 1.92k, False: 32.3k]
  ------------------
  236|  34.3k|        assert(!ok == damage);
  ------------------
  |  Branch (236:9): [True: 34.3k, False: 0]
  ------------------
  237|  34.3k|        if (!ok) break;
  ------------------
  |  Branch (237:13): [True: 393, False: 33.9k]
  ------------------
  238|       |
  239|  34.3k|        assert(plain == plain_read);
  ------------------
  |  Branch (239:9): [True: 33.9k, False: 0]
  ------------------
  240|  33.9k|    }
  241|       |
  242|    806|    const char* sabotage_env = std::getenv("SV2_FUZZ_SABOTAGE");
  243|    806|    if (sabotage_env && sabotage_env[0] == '1') {
  ------------------
  |  Branch (243:9): [True: 806, False: 0]
  |  Branch (243:25): [True: 0, False: 806]
  ------------------
  244|      0|#if defined(__GNUC__)
  245|      0|        __builtin_trap();
  246|       |#else
  247|       |        std::abort();
  248|       |#endif
  249|      0|    }
  250|    806|}

_ZN20Sv2BasicTestingSetupD2Ev:
   42|      2|{
   43|      2|    SetMockTime(std::chrono::seconds{0});
   44|       |
   45|      2|    try {
   46|      2|        fs::remove_all(m_tmp_root);
   47|      2|    } catch (const std::exception&) {
   48|       |        // Best effort cleanup.
   49|      0|    }
   50|      2|    m_ecc.reset();
   51|      2|}

_Z27MakeSkewTolerantCertificateRK4CKeyS1_RjS2_S2_jt:
   36|    788|{
   37|    788|    const auto now = GetTime<std::chrono::seconds>();
   38|    788|    const int64_t now_count = now.count();
   39|    788|    const int64_t clamped_now = std::max<int64_t>(0, now_count);
   40|    788|    out_now = static_cast<uint32_t>(clamped_now);
   41|       |
   42|    788|    const int64_t backdated = std::max<int64_t>(0, clamped_now - static_cast<int64_t>(backdate_secs));
   43|    788|    out_valid_from = static_cast<uint32_t>(backdated);
   44|    788|    out_valid_to = std::numeric_limits<unsigned int>::max();
   45|       |
   46|    788|    return Sv2SignatureNoiseMessage(version, out_valid_from, out_valid_to,
   47|    788|                                    XOnlyPubKey(static_key.GetPubKey()), authority_key);
   48|    788|}

__gcov_reset:
   13|      2|extern "C" __attribute__((weak)) void __gcov_reset(void) {}

_Z22SeedRandomStateForTest8SeedRand:
   20|  2.59k|{
   21|  2.59k|    constexpr auto RANDOM_CTX_SEED{"RANDOM_CTX_SEED"};
   22|       |
   23|       |    // Do this once, on the first call, regardless of seedtype, because once
   24|       |    // MakeRandDeterministicDANGEROUS is called, the output of GetRandHash is
   25|       |    // no longer truly random. It should be enough to get the seed once for the
   26|       |    // process.
   27|  2.59k|    static const auto g_ctx_seed = []() -> std::optional<uint256> {
   28|  2.59k|        if (EnableFuzzDeterminism()) return {};
   29|       |        // If RANDOM_CTX_SEED is set, use that as seed.
   30|  2.59k|        if (const char* num{std::getenv(RANDOM_CTX_SEED)}) {
   31|  2.59k|            if (auto num_parsed{uint256::FromUserHex(num)}) {
   32|  2.59k|                return *num_parsed;
   33|  2.59k|            } else {
   34|  2.59k|                std::cerr << RANDOM_CTX_SEED << " must consist of up to " << uint256::size() * 2 << " hex digits (\"0x\" prefix allowed), it was set to: '" << num << "'.\n";
   35|  2.59k|                std::abort();
   36|  2.59k|            }
   37|  2.59k|        }
   38|       |        // Otherwise use a (truly) random value.
   39|  2.59k|        return GetRandHash();
   40|  2.59k|    }();
   41|       |
   42|  2.59k|    g_seeded_g_prng_zero = seedtype == SeedRand::ZEROS;
   43|  2.59k|    if (EnableFuzzDeterminism()) {
  ------------------
  |  Branch (43:9): [True: 2.59k, False: 0]
  ------------------
   44|  2.59k|        Assert(g_seeded_g_prng_zero); // Only SeedRandomStateForTest(SeedRand::ZEROS) is allowed in fuzz tests
  ------------------
  |  |  106|  2.59k|#define Assert(val) inline_assertion_check<true>(val, __FILE__, __LINE__, __func__, #val)
  ------------------
   45|  2.59k|        Assert(!g_used_g_prng);       // The global PRNG must not have been used before SeedRandomStateForTest(SeedRand::ZEROS)
  ------------------
  |  |  106|  2.59k|#define Assert(val) inline_assertion_check<true>(val, __FILE__, __LINE__, __func__, #val)
  ------------------
   46|  2.59k|    }
   47|  2.59k|    const uint256& seed{seedtype == SeedRand::FIXED_SEED ? g_ctx_seed.value() : uint256::ZERO};
  ------------------
  |  Branch (47:25): [True: 0, False: 2.59k]
  ------------------
   48|  2.59k|    LogInfo("Setting random seed for current tests to %s=%s\n", RANDOM_CTX_SEED, seed.GetHex());
  ------------------
  |  |  240|  2.59k|#define LogInfo(...) LogPrintLevel_(BCLog::LogFlags::ALL, BCLog::Level::Info, __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  235|  2.59k|#define LogPrintLevel_(category, level, ...) LogPrintFormatInternal(std::source_location::current(), category, level, __VA_ARGS__)
  |  |  ------------------
  ------------------
   49|  2.59k|    MakeRandDeterministicDANGEROUS(seed);
   50|  2.59k|}

_ZN12StdLockGuardC2ER8StdMutex:
   75|  7.72k|    explicit StdLockGuard(StdMutex& cs) EXCLUSIVE_LOCK_FUNCTION(cs) : std::lock_guard<StdMutex>(cs) {}

_ZN10tinyformat6formatIJNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEES7_NS_17FormatStringCheckIXsZT_EEEDpRKT_:
 1088|  1.26k|{
 1089|  1.26k|    std::ostringstream oss;
 1090|  1.26k|    format(oss, fmt, args...);
 1091|  1.26k|    return oss.str();
 1092|  1.26k|}
_ZN10tinyformat6formatIJNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEEvRNS1_13basic_ostreamIcS4_EENS_17FormatStringCheckIXsZT_EEEDpRKT_:
 1080|  1.26k|{
 1081|  1.26k|    vformat(out, fmt, makeFormatList(args...));
 1082|  1.26k|}
_ZN10tinyformat14makeFormatListIJNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEENS_6detail11FormatListNIXsZT_EEEDpRKT_:
 1044|  1.26k|{
 1045|  1.26k|    return detail::FormatListN<sizeof...(args)>(args...);
 1046|  1.26k|}
_ZN10tinyformat6detail9FormatArg10formatImplINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEvRNS3_13basic_ostreamIcS6_EEPKcSE_iPKv:
  558|  3.86k|        {
  559|  3.86k|            formatValue(out, fmtBegin, fmtEnd, ntrunc, *static_cast<const T*>(value));
  560|  3.86k|        }
_ZN10tinyformat11formatValueINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEvRNS1_13basic_ostreamIcS4_EEPKcSC_iRKT_:
  351|  3.86k|{
  352|  3.86k|#ifndef TINYFORMAT_ALLOW_WCHAR_STRINGS
  353|       |    // Since we don't support printing of wchar_t using "%ls", make it fail at
  354|       |    // compile time in preference to printing as a void* at runtime.
  355|  3.86k|    typedef typename detail::is_wchar<T>::tinyformat_wchar_is_not_supported DummyType;
  356|  3.86k|    (void) DummyType(); // avoid unused type warning with gcc-4.8
  357|  3.86k|#endif
  358|       |    // The mess here is to support the %c and %p conversions: if these
  359|       |    // conversions are active we try to convert the type to a char or const
  360|       |    // void* respectively and format that instead of the value itself.  For the
  361|       |    // %p conversion it's important to avoid dereferencing the pointer, which
  362|       |    // could otherwise lead to a crash when printing a dangling (const char*).
  363|  3.86k|    const bool canConvertToChar = detail::is_convertible<T,char>::value;
  364|  3.86k|    const bool canConvertToVoidPtr = detail::is_convertible<T, const void*>::value;
  365|  3.86k|    if (canConvertToChar && *(fmtEnd-1) == 'c')
  ------------------
  |  Branch (365:9): [Folded, False: 3.86k]
  |  Branch (365:29): [True: 0, False: 0]
  ------------------
  366|      0|        detail::formatValueAsType<T, char>::invoke(out, value);
  367|  3.86k|    else if (canConvertToVoidPtr && *(fmtEnd-1) == 'p')
  ------------------
  |  Branch (367:14): [Folded, False: 3.86k]
  |  Branch (367:37): [True: 0, False: 0]
  ------------------
  368|      0|        detail::formatValueAsType<T, const void*>::invoke(out, value);
  369|       |#ifdef TINYFORMAT_OLD_LIBSTDCPLUSPLUS_WORKAROUND
  370|       |    else if (detail::formatZeroIntegerWorkaround<T>::invoke(out, value)) /**/;
  371|       |#endif
  372|  3.86k|    else if (ntrunc >= 0) {
  ------------------
  |  Branch (372:14): [True: 0, False: 3.86k]
  ------------------
  373|       |        // Take care not to overread C strings in truncating conversions like
  374|       |        // "%.4s" where at most 4 characters may be read.
  375|      0|        detail::formatTruncated(out, value, ntrunc);
  376|      0|    }
  377|  3.86k|    else
  378|  3.86k|        out << value;
  379|  3.86k|}
_ZN10tinyformat17FormatStringCheckILj1EEcvPKcEv:
  197|  1.26k|    operator const char*() { return fmt; }
_ZN10tinyformat6formatIJPKcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEES9_NS_17FormatStringCheckIXsZT_EEEDpRKT_:
 1088|  2.59k|{
 1089|  2.59k|    std::ostringstream oss;
 1090|  2.59k|    format(oss, fmt, args...);
 1091|  2.59k|    return oss.str();
 1092|  2.59k|}
_ZN10tinyformat6formatIJPKcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvRNS3_13basic_ostreamIcS6_EENS_17FormatStringCheckIXsZT_EEEDpRKT_:
 1080|  2.59k|{
 1081|  2.59k|    vformat(out, fmt, makeFormatList(args...));
 1082|  2.59k|}
_ZN10tinyformat14makeFormatListIJPKcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEENS_6detail11FormatListNIXsZT_EEEDpRKT_:
 1044|  2.59k|{
 1045|  2.59k|    return detail::FormatListN<sizeof...(args)>(args...);
 1046|  2.59k|}
_ZN10tinyformat6detail11FormatListNILi2EEC2IJPKcNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDpRKT_:
  990|  2.59k|            : FormatList(&m_formatterStore[0], N),
  991|  2.59k|            m_formatterStore { FormatArg(args)... }
  992|  2.59k|        { static_assert(sizeof...(args) == N, "Number of args must be N"); }
_ZN10tinyformat6detail9FormatArgC2IPKcEERKT_:
  534|  2.59k|            : m_value(static_cast<const void*>(&value)),
  535|  2.59k|            m_formatImpl(&formatImpl<T>),
  536|  2.59k|            m_toIntImpl(&toIntImpl<T>)
  537|  2.59k|        { }
_ZN10tinyformat6detail9FormatArg10formatImplIPKcEEvRNSt3__113basic_ostreamIcNS5_11char_traitsIcEEEES4_S4_iPKv:
  558|  2.59k|        {
  559|  2.59k|            formatValue(out, fmtBegin, fmtEnd, ntrunc, *static_cast<const T*>(value));
  560|  2.59k|        }
_ZN10tinyformat11formatValueIPKcEEvRNSt3__113basic_ostreamIcNS3_11char_traitsIcEEEES2_S2_iRKT_:
  351|  2.59k|{
  352|  2.59k|#ifndef TINYFORMAT_ALLOW_WCHAR_STRINGS
  353|       |    // Since we don't support printing of wchar_t using "%ls", make it fail at
  354|       |    // compile time in preference to printing as a void* at runtime.
  355|  2.59k|    typedef typename detail::is_wchar<T>::tinyformat_wchar_is_not_supported DummyType;
  356|  2.59k|    (void) DummyType(); // avoid unused type warning with gcc-4.8
  357|  2.59k|#endif
  358|       |    // The mess here is to support the %c and %p conversions: if these
  359|       |    // conversions are active we try to convert the type to a char or const
  360|       |    // void* respectively and format that instead of the value itself.  For the
  361|       |    // %p conversion it's important to avoid dereferencing the pointer, which
  362|       |    // could otherwise lead to a crash when printing a dangling (const char*).
  363|  2.59k|    const bool canConvertToChar = detail::is_convertible<T,char>::value;
  364|  2.59k|    const bool canConvertToVoidPtr = detail::is_convertible<T, const void*>::value;
  365|  2.59k|    if (canConvertToChar && *(fmtEnd-1) == 'c')
  ------------------
  |  Branch (365:9): [Folded, False: 2.59k]
  |  Branch (365:29): [True: 0, False: 0]
  ------------------
  366|      0|        detail::formatValueAsType<T, char>::invoke(out, value);
  367|  2.59k|    else if (canConvertToVoidPtr && *(fmtEnd-1) == 'p')
  ------------------
  |  Branch (367:14): [True: 2.59k, Folded]
  |  Branch (367:37): [True: 0, False: 2.59k]
  ------------------
  368|      0|        detail::formatValueAsType<T, const void*>::invoke(out, value);
  369|       |#ifdef TINYFORMAT_OLD_LIBSTDCPLUSPLUS_WORKAROUND
  370|       |    else if (detail::formatZeroIntegerWorkaround<T>::invoke(out, value)) /**/;
  371|       |#endif
  372|  2.59k|    else if (ntrunc >= 0) {
  ------------------
  |  Branch (372:14): [True: 0, False: 2.59k]
  ------------------
  373|       |        // Take care not to overread C strings in truncating conversions like
  374|       |        // "%.4s" where at most 4 characters may be read.
  375|      0|        detail::formatTruncated(out, value, ntrunc);
  376|      0|    }
  377|  2.59k|    else
  378|  2.59k|        out << value;
  379|  2.59k|}
_ZNK10tinyformat6detail9FormatArg6formatERNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEEPKcS9_i:
  541|  6.45k|        {
  542|  6.45k|            TINYFORMAT_ASSERT(m_value);
  ------------------
  |  |  153|  6.45k|#   define TINYFORMAT_ASSERT(cond) assert(cond)
  ------------------
  |  Branch (542:13): [True: 6.45k, False: 0]
  ------------------
  543|  6.45k|            TINYFORMAT_ASSERT(m_formatImpl);
  ------------------
  |  |  153|  6.45k|#   define TINYFORMAT_ASSERT(cond) assert(cond)
  ------------------
  |  Branch (543:13): [True: 6.45k, False: 0]
  ------------------
  544|  6.45k|            m_formatImpl(out, fmtBegin, fmtEnd, ntrunc, m_value);
  545|  6.45k|        }
_ZN10tinyformat10FormatListC2EPNS_6detail9FormatArgEi:
  966|  3.86k|            : m_args(args), m_N(N) { }
_ZN10tinyformat6detail21parseWidthOrPrecisionERiRPKcbPKNS0_9FormatArgES1_i:
  593|  6.45k|{
  594|  6.45k|    if (*c >= '0' && *c <= '9') {
  ------------------
  |  Branch (594:9): [True: 6.45k, False: 0]
  |  Branch (594:22): [True: 0, False: 6.45k]
  ------------------
  595|      0|        n = parseIntAndAdvance(c);
  596|      0|    }
  597|  6.45k|    else if (*c == '*') {
  ------------------
  |  Branch (597:14): [True: 0, False: 6.45k]
  ------------------
  598|      0|        ++c;
  599|      0|        n = 0;
  600|      0|        if (positionalMode) {
  ------------------
  |  Branch (600:13): [True: 0, False: 0]
  ------------------
  601|      0|            int pos = parseIntAndAdvance(c) - 1;
  602|      0|            if (*c != '$')
  ------------------
  |  Branch (602:17): [True: 0, False: 0]
  ------------------
  603|      0|                TINYFORMAT_ERROR("tinyformat: Non-positional argument used after a positional one");
  ------------------
  |  |  135|      0|#define TINYFORMAT_ERROR(reasonString) throw tinyformat::format_error(reasonString)
  ------------------
  604|      0|            if (pos >= 0 && pos < numArgs)
  ------------------
  |  Branch (604:17): [True: 0, False: 0]
  |  Branch (604:29): [True: 0, False: 0]
  ------------------
  605|      0|                n = args[pos].toInt();
  606|      0|            else
  607|      0|                TINYFORMAT_ERROR("tinyformat: Positional argument out of range");
  ------------------
  |  |  135|      0|#define TINYFORMAT_ERROR(reasonString) throw tinyformat::format_error(reasonString)
  ------------------
  608|      0|            ++c;
  609|      0|        }
  610|      0|        else {
  611|      0|            if (argIndex < numArgs)
  ------------------
  |  Branch (611:17): [True: 0, False: 0]
  ------------------
  612|      0|                n = args[argIndex++].toInt();
  613|      0|            else
  614|      0|                TINYFORMAT_ERROR("tinyformat: Not enough arguments to read variable width or precision");
  ------------------
  |  |  135|      0|#define TINYFORMAT_ERROR(reasonString) throw tinyformat::format_error(reasonString)
  ------------------
  615|      0|        }
  616|      0|    }
  617|  6.45k|    else {
  618|  6.45k|        return false;
  619|  6.45k|    }
  620|      0|    return true;
  621|  6.45k|}
_ZN10tinyformat6detail24printFormatStringLiteralERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEEPKc:
  629|  10.3k|{
  630|  10.3k|    const char* c = fmt;
  631|   149k|    for (;; ++c) {
  632|   149k|        if (*c == '\0') {
  ------------------
  |  Branch (632:13): [True: 3.86k, False: 145k]
  ------------------
  633|  3.86k|            out.write(fmt, c - fmt);
  634|  3.86k|            return c;
  635|  3.86k|        }
  636|   145k|        else if (*c == '%') {
  ------------------
  |  Branch (636:18): [True: 6.45k, False: 139k]
  ------------------
  637|  6.45k|            out.write(fmt, c - fmt);
  638|  6.45k|            if (*(c+1) != '%')
  ------------------
  |  Branch (638:17): [True: 6.45k, False: 0]
  ------------------
  639|  6.45k|                return c;
  640|       |            // for "%%", tack trailing % onto next literal section.
  641|      0|            fmt = ++c;
  642|      0|        }
  643|   149k|    }
  644|  10.3k|}
_ZN10tinyformat6detail21streamStateFromFormatERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEERbS7_RiPKcPKNS0_9FormatArgES8_i:
  685|  6.45k|{
  686|  6.45k|    TINYFORMAT_ASSERT(*fmtStart == '%');
  ------------------
  |  |  153|  6.45k|#   define TINYFORMAT_ASSERT(cond) assert(cond)
  ------------------
  |  Branch (686:5): [True: 6.45k, False: 0]
  ------------------
  687|       |    // Reset stream state to defaults.
  688|  6.45k|    out.width(0);
  689|  6.45k|    out.precision(6);
  690|  6.45k|    out.fill(' ');
  691|       |    // Reset most flags; ignore irrelevant unitbuf & skipws.
  692|  6.45k|    out.unsetf(std::ios::adjustfield | std::ios::basefield |
  693|  6.45k|               std::ios::floatfield | std::ios::showbase | std::ios::boolalpha |
  694|  6.45k|               std::ios::showpoint | std::ios::showpos | std::ios::uppercase);
  695|  6.45k|    bool precisionSet = false;
  696|  6.45k|    bool widthSet = false;
  697|  6.45k|    int widthExtra = 0;
  698|  6.45k|    const char* c = fmtStart + 1;
  699|       |
  700|       |    // 1) Parse an argument index (if followed by '$') or a width possibly
  701|       |    // preceded with '0' flag.
  702|  6.45k|    if (*c >= '0' && *c <= '9') {
  ------------------
  |  Branch (702:9): [True: 6.45k, False: 0]
  |  Branch (702:22): [True: 0, False: 6.45k]
  ------------------
  703|      0|        const char tmpc = *c;
  704|      0|        int value = parseIntAndAdvance(c);
  705|      0|        if (*c == '$') {
  ------------------
  |  Branch (705:13): [True: 0, False: 0]
  ------------------
  706|       |            // value is an argument index
  707|      0|            if (value > 0 && value <= numArgs)
  ------------------
  |  Branch (707:17): [True: 0, False: 0]
  |  Branch (707:30): [True: 0, False: 0]
  ------------------
  708|      0|                argIndex = value - 1;
  709|      0|            else
  710|      0|                TINYFORMAT_ERROR("tinyformat: Positional argument out of range");
  ------------------
  |  |  135|      0|#define TINYFORMAT_ERROR(reasonString) throw tinyformat::format_error(reasonString)
  ------------------
  711|      0|            ++c;
  712|      0|            positionalMode = true;
  713|      0|        }
  714|      0|        else if (positionalMode) {
  ------------------
  |  Branch (714:18): [True: 0, False: 0]
  ------------------
  715|      0|            TINYFORMAT_ERROR("tinyformat: Non-positional argument used after a positional one");
  ------------------
  |  |  135|      0|#define TINYFORMAT_ERROR(reasonString) throw tinyformat::format_error(reasonString)
  ------------------
  716|      0|        }
  717|      0|        else {
  718|      0|            if (tmpc == '0') {
  ------------------
  |  Branch (718:17): [True: 0, False: 0]
  ------------------
  719|       |                // Use internal padding so that numeric values are
  720|       |                // formatted correctly, eg -00010 rather than 000-10
  721|      0|                out.fill('0');
  722|      0|                out.setf(std::ios::internal, std::ios::adjustfield);
  723|      0|            }
  724|      0|            if (value != 0) {
  ------------------
  |  Branch (724:17): [True: 0, False: 0]
  ------------------
  725|       |                // Nonzero value means that we parsed width.
  726|      0|                widthSet = true;
  727|      0|                out.width(value);
  728|      0|            }
  729|      0|        }
  730|      0|    }
  731|  6.45k|    else if (positionalMode) {
  ------------------
  |  Branch (731:14): [True: 0, False: 6.45k]
  ------------------
  732|      0|        TINYFORMAT_ERROR("tinyformat: Non-positional argument used after a positional one");
  ------------------
  |  |  135|      0|#define TINYFORMAT_ERROR(reasonString) throw tinyformat::format_error(reasonString)
  ------------------
  733|      0|    }
  734|       |    // 2) Parse flags and width if we did not do it in previous step.
  735|  6.45k|    if (!widthSet) {
  ------------------
  |  Branch (735:9): [True: 6.45k, False: 0]
  ------------------
  736|       |        // Parse flags
  737|  6.45k|        for (;; ++c) {
  738|  6.45k|            switch (*c) {
  739|      0|                case '#':
  ------------------
  |  Branch (739:17): [True: 0, False: 6.45k]
  ------------------
  740|      0|                    out.setf(std::ios::showpoint | std::ios::showbase);
  741|      0|                    continue;
  742|      0|                case '0':
  ------------------
  |  Branch (742:17): [True: 0, False: 6.45k]
  ------------------
  743|       |                    // overridden by left alignment ('-' flag)
  744|      0|                    if (!(out.flags() & std::ios::left)) {
  ------------------
  |  Branch (744:25): [True: 0, False: 0]
  ------------------
  745|       |                        // Use internal padding so that numeric values are
  746|       |                        // formatted correctly, eg -00010 rather than 000-10
  747|      0|                        out.fill('0');
  748|      0|                        out.setf(std::ios::internal, std::ios::adjustfield);
  749|      0|                    }
  750|      0|                    continue;
  751|      0|                case '-':
  ------------------
  |  Branch (751:17): [True: 0, False: 6.45k]
  ------------------
  752|      0|                    out.fill(' ');
  753|      0|                    out.setf(std::ios::left, std::ios::adjustfield);
  754|      0|                    continue;
  755|      0|                case ' ':
  ------------------
  |  Branch (755:17): [True: 0, False: 6.45k]
  ------------------
  756|       |                    // overridden by show positive sign, '+' flag.
  757|      0|                    if (!(out.flags() & std::ios::showpos))
  ------------------
  |  Branch (757:25): [True: 0, False: 0]
  ------------------
  758|      0|                        spacePadPositive = true;
  759|      0|                    continue;
  760|      0|                case '+':
  ------------------
  |  Branch (760:17): [True: 0, False: 6.45k]
  ------------------
  761|      0|                    out.setf(std::ios::showpos);
  762|      0|                    spacePadPositive = false;
  763|      0|                    widthExtra = 1;
  764|      0|                    continue;
  765|  6.45k|                default:
  ------------------
  |  Branch (765:17): [True: 6.45k, False: 0]
  ------------------
  766|  6.45k|                    break;
  767|  6.45k|            }
  768|  6.45k|            break;
  769|  6.45k|        }
  770|       |        // Parse width
  771|  6.45k|        int width = 0;
  772|  6.45k|        widthSet = parseWidthOrPrecision(width, c, positionalMode,
  773|  6.45k|                                         args, argIndex, numArgs);
  774|  6.45k|        if (widthSet) {
  ------------------
  |  Branch (774:13): [True: 0, False: 6.45k]
  ------------------
  775|      0|            if (width < 0) {
  ------------------
  |  Branch (775:17): [True: 0, False: 0]
  ------------------
  776|       |                // negative widths correspond to '-' flag set
  777|      0|                out.fill(' ');
  778|      0|                out.setf(std::ios::left, std::ios::adjustfield);
  779|      0|                width = -width;
  780|      0|            }
  781|      0|            out.width(width);
  782|      0|        }
  783|  6.45k|    }
  784|       |    // 3) Parse precision
  785|  6.45k|    if (*c == '.') {
  ------------------
  |  Branch (785:9): [True: 0, False: 6.45k]
  ------------------
  786|      0|        ++c;
  787|      0|        int precision = 0;
  788|      0|        parseWidthOrPrecision(precision, c, positionalMode,
  789|      0|                              args, argIndex, numArgs);
  790|       |        // Presence of `.` indicates precision set, unless the inferred value
  791|       |        // was negative in which case the default is used.
  792|      0|        precisionSet = precision >= 0;
  793|      0|        if (precisionSet)
  ------------------
  |  Branch (793:13): [True: 0, False: 0]
  ------------------
  794|      0|            out.precision(precision);
  795|      0|    }
  796|       |    // 4) Ignore any C99 length modifier
  797|  6.45k|    while (*c == 'l' || *c == 'h' || *c == 'L' ||
  ------------------
  |  Branch (797:12): [True: 0, False: 6.45k]
  |  Branch (797:25): [True: 0, False: 6.45k]
  |  Branch (797:38): [True: 0, False: 6.45k]
  ------------------
  798|  6.45k|           *c == 'j' || *c == 'z' || *c == 't') {
  ------------------
  |  Branch (798:12): [True: 0, False: 6.45k]
  |  Branch (798:25): [True: 0, False: 6.45k]
  |  Branch (798:38): [True: 0, False: 6.45k]
  ------------------
  799|      0|        ++c;
  800|      0|    }
  801|       |    // 5) We're up to the conversion specifier character.
  802|       |    // Set stream flags based on conversion specifier (thanks to the
  803|       |    // boost::format class for forging the way here).
  804|  6.45k|    bool intConversion = false;
  805|  6.45k|    switch (*c) {
  806|      0|        case 'u': case 'd': case 'i':
  ------------------
  |  Branch (806:9): [True: 0, False: 6.45k]
  |  Branch (806:19): [True: 0, False: 6.45k]
  |  Branch (806:29): [True: 0, False: 6.45k]
  ------------------
  807|      0|            out.setf(std::ios::dec, std::ios::basefield);
  808|      0|            intConversion = true;
  809|      0|            break;
  810|      0|        case 'o':
  ------------------
  |  Branch (810:9): [True: 0, False: 6.45k]
  ------------------
  811|      0|            out.setf(std::ios::oct, std::ios::basefield);
  812|      0|            intConversion = true;
  813|      0|            break;
  814|      0|        case 'X':
  ------------------
  |  Branch (814:9): [True: 0, False: 6.45k]
  ------------------
  815|      0|            out.setf(std::ios::uppercase);
  816|      0|            [[fallthrough]];
  817|      0|        case 'x': case 'p':
  ------------------
  |  Branch (817:9): [True: 0, False: 6.45k]
  |  Branch (817:19): [True: 0, False: 6.45k]
  ------------------
  818|      0|            out.setf(std::ios::hex, std::ios::basefield);
  819|      0|            intConversion = true;
  820|      0|            break;
  821|      0|        case 'E':
  ------------------
  |  Branch (821:9): [True: 0, False: 6.45k]
  ------------------
  822|      0|            out.setf(std::ios::uppercase);
  823|      0|            [[fallthrough]];
  824|      0|        case 'e':
  ------------------
  |  Branch (824:9): [True: 0, False: 6.45k]
  ------------------
  825|      0|            out.setf(std::ios::scientific, std::ios::floatfield);
  826|      0|            out.setf(std::ios::dec, std::ios::basefield);
  827|      0|            break;
  828|      0|        case 'F':
  ------------------
  |  Branch (828:9): [True: 0, False: 6.45k]
  ------------------
  829|      0|            out.setf(std::ios::uppercase);
  830|      0|            [[fallthrough]];
  831|      0|        case 'f':
  ------------------
  |  Branch (831:9): [True: 0, False: 6.45k]
  ------------------
  832|      0|            out.setf(std::ios::fixed, std::ios::floatfield);
  833|      0|            break;
  834|      0|        case 'A':
  ------------------
  |  Branch (834:9): [True: 0, False: 6.45k]
  ------------------
  835|      0|            out.setf(std::ios::uppercase);
  836|      0|            [[fallthrough]];
  837|      0|        case 'a':
  ------------------
  |  Branch (837:9): [True: 0, False: 6.45k]
  ------------------
  838|       |#           ifdef _MSC_VER
  839|       |            // Workaround https://developercommunity.visualstudio.com/content/problem/520472/hexfloat-stream-output-does-not-ignore-precision-a.html
  840|       |            // by always setting maximum precision on MSVC to avoid precision
  841|       |            // loss for doubles.
  842|       |            out.precision(13);
  843|       |#           endif
  844|      0|            out.setf(std::ios::fixed | std::ios::scientific, std::ios::floatfield);
  845|      0|            break;
  846|      0|        case 'G':
  ------------------
  |  Branch (846:9): [True: 0, False: 6.45k]
  ------------------
  847|      0|            out.setf(std::ios::uppercase);
  848|      0|            [[fallthrough]];
  849|      0|        case 'g':
  ------------------
  |  Branch (849:9): [True: 0, False: 6.45k]
  ------------------
  850|      0|            out.setf(std::ios::dec, std::ios::basefield);
  851|       |            // As in boost::format, let stream decide float format.
  852|      0|            out.flags(out.flags() & ~std::ios::floatfield);
  853|      0|            break;
  854|      0|        case 'c':
  ------------------
  |  Branch (854:9): [True: 0, False: 6.45k]
  ------------------
  855|       |            // Handled as special case inside formatValue()
  856|      0|            break;
  857|  6.45k|        case 's':
  ------------------
  |  Branch (857:9): [True: 6.45k, False: 0]
  ------------------
  858|  6.45k|            if (precisionSet)
  ------------------
  |  Branch (858:17): [True: 0, False: 6.45k]
  ------------------
  859|      0|                ntrunc = static_cast<int>(out.precision());
  860|       |            // Make %s print Booleans as "true" and "false"
  861|  6.45k|            out.setf(std::ios::boolalpha);
  862|  6.45k|            break;
  863|      0|        case 'n':
  ------------------
  |  Branch (863:9): [True: 0, False: 6.45k]
  ------------------
  864|       |            // Not supported - will cause problems!
  865|      0|            TINYFORMAT_ERROR("tinyformat: %n conversion spec not supported");
  ------------------
  |  |  135|      0|#define TINYFORMAT_ERROR(reasonString) throw tinyformat::format_error(reasonString)
  ------------------
  866|      0|            break;
  867|      0|        case '\0':
  ------------------
  |  Branch (867:9): [True: 0, False: 6.45k]
  ------------------
  868|      0|            TINYFORMAT_ERROR("tinyformat: Conversion spec incorrectly "
  ------------------
  |  |  135|      0|#define TINYFORMAT_ERROR(reasonString) throw tinyformat::format_error(reasonString)
  ------------------
  869|      0|                             "terminated by end of string");
  870|      0|            return c;
  871|      0|        default:
  ------------------
  |  Branch (871:9): [True: 0, False: 6.45k]
  ------------------
  872|      0|            break;
  873|  6.45k|    }
  874|  6.45k|    if (intConversion && precisionSet && !widthSet) {
  ------------------
  |  Branch (874:9): [True: 0, False: 6.45k]
  |  Branch (874:26): [True: 0, False: 0]
  |  Branch (874:42): [True: 0, False: 0]
  ------------------
  875|       |        // "precision" for integers gives the minimum number of digits (to be
  876|       |        // padded with zeros on the left).  This isn't really supported by the
  877|       |        // iostreams, but we can approximately simulate it with the width if
  878|       |        // the width isn't otherwise used.
  879|      0|        out.width(out.precision() + widthExtra);
  880|      0|        out.setf(std::ios::internal, std::ios::adjustfield);
  881|      0|        out.fill('0');
  882|      0|    }
  883|  6.45k|    return c+1;
  884|  6.45k|}
_ZN10tinyformat6detail10formatImplERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEEPKcPKNS0_9FormatArgEi:
  891|  3.86k|{
  892|       |    // Saved stream state
  893|  3.86k|    std::streamsize origWidth = out.width();
  894|  3.86k|    std::streamsize origPrecision = out.precision();
  895|  3.86k|    std::ios::fmtflags origFlags = out.flags();
  896|  3.86k|    char origFill = out.fill();
  897|       |
  898|       |    // "Positional mode" means all format specs should be of the form "%n$..."
  899|       |    // with `n` an integer. We detect this in `streamStateFromFormat`.
  900|  3.86k|    bool positionalMode = false;
  901|  3.86k|    int argIndex = 0;
  902|  10.3k|    while (true) {
  ------------------
  |  Branch (902:12): [True: 10.3k, Folded]
  ------------------
  903|  10.3k|        fmt = printFormatStringLiteral(out, fmt);
  904|  10.3k|        if (*fmt == '\0') {
  ------------------
  |  Branch (904:13): [True: 3.86k, False: 6.45k]
  ------------------
  905|  3.86k|            if (!positionalMode && argIndex < numArgs) {
  ------------------
  |  Branch (905:17): [True: 3.86k, False: 0]
  |  Branch (905:36): [True: 0, False: 3.86k]
  ------------------
  906|      0|                TINYFORMAT_ERROR("tinyformat: Not enough conversion specifiers in format string");
  ------------------
  |  |  135|      0|#define TINYFORMAT_ERROR(reasonString) throw tinyformat::format_error(reasonString)
  ------------------
  907|      0|            }
  908|  3.86k|            break;
  909|  3.86k|        }
  910|  6.45k|        bool spacePadPositive = false;
  911|  6.45k|        int ntrunc = -1;
  912|  6.45k|        const char* fmtEnd = streamStateFromFormat(out, positionalMode, spacePadPositive, ntrunc, fmt,
  913|  6.45k|                                                   args, argIndex, numArgs);
  914|       |        // NB: argIndex may be incremented by reading variable width/precision
  915|       |        // in `streamStateFromFormat`, so do the bounds check here.
  916|  6.45k|        if (argIndex >= numArgs) {
  ------------------
  |  Branch (916:13): [True: 0, False: 6.45k]
  ------------------
  917|      0|            TINYFORMAT_ERROR("tinyformat: Too many conversion specifiers in format string");
  ------------------
  |  |  135|      0|#define TINYFORMAT_ERROR(reasonString) throw tinyformat::format_error(reasonString)
  ------------------
  918|      0|            return;
  919|      0|        }
  920|  6.45k|        const FormatArg& arg = args[argIndex];
  921|       |        // Format the arg into the stream.
  922|  6.45k|        if (!spacePadPositive) {
  ------------------
  |  Branch (922:13): [True: 6.45k, False: 0]
  ------------------
  923|  6.45k|            arg.format(out, fmt, fmtEnd, ntrunc);
  924|  6.45k|        }
  925|      0|        else {
  926|       |            // The following is a special case with no direct correspondence
  927|       |            // between stream formatting and the printf() behaviour.  Simulate
  928|       |            // it crudely by formatting into a temporary string stream and
  929|       |            // munging the resulting string.
  930|      0|            std::ostringstream tmpStream;
  931|      0|            tmpStream.copyfmt(out);
  932|      0|            tmpStream.setf(std::ios::showpos);
  933|      0|            arg.format(tmpStream, fmt, fmtEnd, ntrunc);
  934|      0|            std::string result = tmpStream.str(); // allocates... yuck.
  935|      0|            for (size_t i = 0, iend = result.size(); i < iend; ++i) {
  ------------------
  |  Branch (935:54): [True: 0, False: 0]
  ------------------
  936|      0|                if (result[i] == '+')
  ------------------
  |  Branch (936:21): [True: 0, False: 0]
  ------------------
  937|      0|                    result[i] = ' ';
  938|      0|            }
  939|      0|            out << result;
  940|      0|        }
  941|  6.45k|        if (!positionalMode)
  ------------------
  |  Branch (941:13): [True: 6.45k, False: 0]
  ------------------
  942|  6.45k|            ++argIndex;
  943|  6.45k|        fmt = fmtEnd;
  944|  6.45k|    }
  945|       |
  946|       |    // Restore stream state
  947|  3.86k|    out.width(origWidth);
  948|  3.86k|    out.precision(origPrecision);
  949|  3.86k|    out.flags(origFlags);
  950|  3.86k|    out.fill(origFill);
  951|  3.86k|}
_ZN10tinyformat7vformatERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEEPKcRKNS_10FormatListE:
 1070|  3.86k|{
 1071|  3.86k|    detail::formatImpl(out, fmt, list.m_args, list.m_N);
 1072|  3.86k|}
_ZN10tinyformat6detail11FormatListNILi1EEC2IJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDpRKT_:
  990|  1.26k|            : FormatList(&m_formatterStore[0], N),
  991|  1.26k|            m_formatterStore { FormatArg(args)... }
  992|  1.26k|        { static_assert(sizeof...(args) == N, "Number of args must be N"); }
_ZN10tinyformat6detail9FormatArgC2INSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEERKT_:
  534|  3.86k|            : m_value(static_cast<const void*>(&value)),
  535|  3.86k|            m_formatImpl(&formatImpl<T>),
  536|  3.86k|            m_toIntImpl(&toIntImpl<T>)
  537|  3.86k|        { }
_ZN10tinyformat17FormatStringCheckILj1EEC2EN4util21ConstevalFormatStringILj1EEE:
  196|  1.26k|    FormatStringCheck(util::ConstevalFormatString<num_params> str) : fmt{str.fmt} {}
_ZN10tinyformat17FormatStringCheckILj2EEcvPKcEv:
  197|  2.59k|    operator const char*() { return fmt; }
_ZN10tinyformat17FormatStringCheckILj2EEC2EN4util21ConstevalFormatStringILj2EEE:
  196|  2.59k|    FormatStringCheck(util::ConstevalFormatString<num_params> str) : fmt{str.fmt} {}

_ZNK9base_blobILj256EE6GetHexEv:
   12|  2.59k|{
   13|  2.59k|    uint8_t m_data_rev[WIDTH];
   14|  85.6k|    for (int i = 0; i < WIDTH; ++i) {
  ------------------
  |  Branch (14:21): [True: 83.0k, False: 2.59k]
  ------------------
   15|  83.0k|        m_data_rev[i] = m_data[WIDTH - 1 - i];
   16|  83.0k|    }
   17|  2.59k|    return HexStr(m_data_rev);
   18|  2.59k|}

_ZNK9base_blobILj256EE9SerializeI10DataStreamEEvRT_:
  113|  5.70k|    {
  114|  5.70k|        s << std::span(m_data);
  115|  5.70k|    }
_ZN7uint256C2ENSt3__14spanIKhLm18446744073709551615EEE:
  203|  16.4k|    constexpr explicit uint256(std::span<const unsigned char> vch) : base_blob<256>(vch) {}
_ZN9base_blobILj256EEC2ENSt3__14spanIKhLm18446744073709551615EEE:
   41|  16.4k|    {
   42|  16.4k|        assert(vch.size() == WIDTH);
  ------------------
  |  Branch (42:9): [True: 16.4k, False: 0]
  ------------------
   43|  16.4k|        std::copy(vch.begin(), vch.end(), m_data.begin());
   44|  16.4k|    }
_ZNK9base_blobILj256EE5beginEv:
  104|  23.8k|    constexpr const unsigned char* begin() const { return m_data.data(); }
_ZN7uint160C2Ev:
  187|  18.1k|    constexpr uint160() = default;
_ZN9base_blobILj160EEC2Ev:
   35|  18.1k|    constexpr base_blob() : m_data() {}
_ZN9base_blobILj160EE4dataEv:
   99|  18.1k|    constexpr unsigned char* data() { return m_data.data(); }
_ZN9base_blobILj160EE4sizeEv:
  107|  18.1k|    static constexpr unsigned int size() { return WIDTH; }
_ZN9base_blobILj256EE5beginEv:
  101|  51.4k|    constexpr unsigned char* begin() { return m_data.data(); }
_ZNK9base_blobILj256EE9SerializeI10HashWriterEEvRT_:
  113|  24.9k|    {
  114|  24.9k|        s << std::span(m_data);
  115|  24.9k|    }
_ZN9base_blobILj256EE4dataEv:
   99|  10.3k|    constexpr unsigned char* data() { return m_data.data(); }
_ZN9base_blobILj256EE4sizeEv:
  107|  51.4k|    static constexpr unsigned int size() { return WIDTH; }
_ZNK9base_blobILj256EE4dataEv:
   98|  31.1k|    constexpr const unsigned char* data() const { return m_data.data(); }
_ZN7uint256C2Ev:
  200|  55.0k|    constexpr uint256() = default;
_ZN9base_blobILj256EEC2Ev:
   35|  55.0k|    constexpr base_blob() : m_data() {}

_Z22inline_assertion_checkILb1ERPKNSt3__18functionIFvNS0_4spanIKhLm18446744073709551615EEEEEEEOT0_SB_PKciSD_SD_:
   77|  2.59k|{
   78|  2.59k|    if (IS_ASSERT || std::is_constant_evaluated() || G_FUZZING_BUILD || G_ABORT_ON_FAILED_ASSUME) {
  ------------------
  |  Branch (78:9): [True: 2.59k, Folded]
  |  Branch (78:22): [Folded, False: 0]
  |  Branch (78:54): [True: 0, Folded]
  |  Branch (78:73): [Folded, False: 0]
  ------------------
   79|  2.59k|        if (!val) {
  ------------------
  |  Branch (79:13): [True: 0, False: 2.59k]
  ------------------
   80|      0|            assertion_fail(file, line, func, assertion);
   81|      0|        }
   82|  2.59k|    }
   83|  2.59k|    return std::forward<T>(val);
   84|  2.59k|}
_Z22inline_assertion_checkILb0EbEOT0_S1_PKciS3_S3_:
   77|   262k|{
   78|   262k|    if (IS_ASSERT || std::is_constant_evaluated() || G_FUZZING_BUILD || G_ABORT_ON_FAILED_ASSUME) {
  ------------------
  |  Branch (78:9): [Folded, False: 0]
  |  Branch (78:22): [Folded, False: 0]
  |  Branch (78:54): [True: 0, Folded]
  |  Branch (78:73): [Folded, False: 0]
  ------------------
   79|   262k|        if (!val) {
  ------------------
  |  Branch (79:13): [True: 0, False: 262k]
  ------------------
   80|      0|            assertion_fail(file, line, func, assertion);
   81|      0|        }
   82|   262k|    }
   83|   262k|    return std::forward<T>(val);
   84|   262k|}
_Z22inline_assertion_checkILb0ERNSt3__18optionalI24Sv2SignatureNoiseMessageEEEOT0_S6_PKciS8_S8_:
   77|  2.59k|{
   78|  2.59k|    if (IS_ASSERT || std::is_constant_evaluated() || G_FUZZING_BUILD || G_ABORT_ON_FAILED_ASSUME) {
  ------------------
  |  Branch (78:9): [Folded, False: 0]
  |  Branch (78:22): [Folded, False: 0]
  |  Branch (78:54): [True: 0, Folded]
  |  Branch (78:73): [Folded, False: 0]
  ------------------
   79|  2.59k|        if (!val) {
  ------------------
  |  Branch (79:13): [True: 0, False: 2.59k]
  ------------------
   80|      0|            assertion_fail(file, line, func, assertion);
   81|      0|        }
   82|  2.59k|    }
   83|  2.59k|    return std::forward<T>(val);
   84|  2.59k|}
_Z22inline_assertion_checkILb0ERNSt3__18optionalI11XOnlyPubKeyEEEOT0_S6_PKciS8_S8_:
   77|  2.07k|{
   78|  2.07k|    if (IS_ASSERT || std::is_constant_evaluated() || G_FUZZING_BUILD || G_ABORT_ON_FAILED_ASSUME) {
  ------------------
  |  Branch (78:9): [Folded, False: 0]
  |  Branch (78:22): [Folded, False: 0]
  |  Branch (78:54): [True: 0, Folded]
  |  Branch (78:73): [Folded, False: 0]
  ------------------
   79|  2.07k|        if (!val) {
  ------------------
  |  Branch (79:13): [True: 0, False: 2.07k]
  ------------------
   80|      0|            assertion_fail(file, line, func, assertion);
   81|      0|        }
   82|  2.07k|    }
   83|  2.07k|    return std::forward<T>(val);
   84|  2.07k|}
_Z22inline_assertion_checkILb0ERNSt3__110unique_ptrI17Sv2HandshakeStateNS0_14default_deleteIS2_EEEEEOT0_S8_PKciSA_SA_:
   77|  1.61k|{
   78|  1.61k|    if (IS_ASSERT || std::is_constant_evaluated() || G_FUZZING_BUILD || G_ABORT_ON_FAILED_ASSUME) {
  ------------------
  |  Branch (78:9): [Folded, False: 0]
  |  Branch (78:22): [Folded, False: 0]
  |  Branch (78:54): [True: 0, Folded]
  |  Branch (78:73): [Folded, False: 0]
  ------------------
   79|  1.61k|        if (!val) {
  ------------------
  |  Branch (79:13): [True: 0, False: 1.61k]
  ------------------
   80|      0|            assertion_fail(file, line, func, assertion);
   81|      0|        }
   82|  1.61k|    }
   83|  1.61k|    return std::forward<T>(val);
   84|  1.61k|}
_Z21EnableFuzzDeterminismv:
   35|  2.59k|{
   36|  2.59k|    if constexpr (G_FUZZING_BUILD) {
   37|  2.59k|        return true;
   38|       |    } else if constexpr (!G_ABORT_ON_FAILED_ASSUME) {
   39|       |        // Running fuzz tests is always disabled if Assume() doesn't abort
   40|       |        // (ie, non-fuzz non-debug builds), as otherwise tests which
   41|       |        // should fail due to a failing Assume may still pass. As such,
   42|       |        // we also statically disable fuzz determinism in that case.
   43|       |        return false;
   44|       |    } else {
   45|       |        return g_enable_dynamic_fuzz_determinism;
   46|       |    }
   47|  2.59k|}
_Z22inline_assertion_checkILb1ERNSt3__16atomicIbEEEOT0_S5_PKciS7_S7_:
   77|  2.59k|{
   78|  2.59k|    if (IS_ASSERT || std::is_constant_evaluated() || G_FUZZING_BUILD || G_ABORT_ON_FAILED_ASSUME) {
  ------------------
  |  Branch (78:9): [True: 2.59k, Folded]
  |  Branch (78:22): [Folded, False: 0]
  |  Branch (78:54): [True: 0, Folded]
  |  Branch (78:73): [Folded, False: 0]
  ------------------
   79|  2.59k|        if (!val) {
  ------------------
  |  Branch (79:13): [True: 0, False: 2.59k]
  ------------------
   80|      0|            assertion_fail(file, line, func, assertion);
   81|      0|        }
   82|  2.59k|    }
   83|  2.59k|    return std::forward<T>(val);
   84|  2.59k|}
_Z22inline_assertion_checkILb1EbEOT0_S1_PKciS3_S3_:
   77|  8.57k|{
   78|  8.57k|    if (IS_ASSERT || std::is_constant_evaluated() || G_FUZZING_BUILD || G_ABORT_ON_FAILED_ASSUME) {
  ------------------
  |  Branch (78:9): [True: 8.57k, Folded]
  |  Branch (78:22): [Folded, False: 0]
  |  Branch (78:54): [True: 0, Folded]
  |  Branch (78:73): [Folded, False: 0]
  ------------------
   79|  8.57k|        if (!val) {
  ------------------
  |  Branch (79:13): [True: 0, False: 8.57k]
  ------------------
   80|      0|            assertion_fail(file, line, func, assertion);
   81|      0|        }
   82|  8.57k|    }
   83|  8.57k|    return std::forward<T>(val);
   84|  8.57k|}

_Z10CheckedAddImENSt3__18optionalIT_EES2_S2_:
   27|  8.28k|{
   28|  8.28k|    if (AdditionOverflow(i, j)) {
  ------------------
  |  Branch (28:9): [True: 0, False: 8.28k]
  ------------------
   29|      0|        return std::nullopt;
   30|      0|    }
   31|  8.28k|    return i + j;
   32|  8.28k|}
_Z16AdditionOverflowImEbT_S0_:
   16|  8.28k|{
   17|  8.28k|    static_assert(std::is_integral_v<T>, "Integral required.");
   18|       |    if constexpr (std::numeric_limits<T>::is_signed) {
   19|       |        return (i > 0 && j > std::numeric_limits<T>::max() - i) ||
   20|       |               (i < 0 && j < std::numeric_limits<T>::min() - i);
   21|       |    }
   22|  8.28k|    return std::numeric_limits<T>::max() - i < j;
   23|  8.28k|}

_ZN4util21ThreadGetInternalNameEv:
   45|  3.86k|std::string util::ThreadGetInternalName() { return g_thread_name; }

_ZN9NodeClock3nowEv:
   27|  6.31k|{
   28|  6.31k|    const auto mocktime{g_mock_time.load(std::memory_order_relaxed)};
   29|  6.31k|    if (!mocktime.count()) {
  ------------------
  |  Branch (29:9): [True: 0, False: 6.31k]
  ------------------
   30|      0|        g_used_system_time = true;
   31|      0|    }
   32|  6.31k|    const auto ret{
   33|  6.31k|        mocktime.count() ?
  ------------------
  |  Branch (33:9): [True: 6.31k, False: 0]
  ------------------
   34|  6.31k|            mocktime :
   35|  6.31k|            std::chrono::system_clock::now().time_since_epoch()};
   36|  6.31k|    assert(ret > 0s);
  ------------------
  |  Branch (36:5): [True: 6.31k, False: 0]
  ------------------
   37|  6.31k|    return time_point{ret};
   38|  6.31k|};
_Z11SetMockTimeNSt3__16chrono8durationIxNS_5ratioILl1ELl1EEEEE:
   43|  5.98k|{
   44|  5.98k|    Assert(mock_time_in >= 0s);
  ------------------
  |  |  106|  5.98k|#define Assert(val) inline_assertion_check<true>(val, __FILE__, __LINE__, __func__, #val)
  ------------------
   45|  5.98k|    g_mock_time.store(mock_time_in, std::memory_order_relaxed);
   46|  5.98k|}
_Z11GetMockTimev:
   49|  3.86k|{
   50|  3.86k|    return g_mock_time.load(std::memory_order_relaxed);
   51|  3.86k|}

_Z7GetTimeINSt3__16chrono8durationIxNS0_5ratioILl1ELl1EEEEEET_v:
  127|  6.31k|{
  128|  6.31k|    return Now<std::chrono::time_point<NodeClock, T>>().time_since_epoch();
  129|  6.31k|}
_Z3NowINSt3__16chrono10time_pointI9NodeClockNS1_8durationIxNS0_5ratioILl1ELl1EEEEEEEET_v:
  121|  6.31k|{
  122|  6.31k|    return std::chrono::time_point_cast<typename T::duration>(T::clock::now());
  123|  6.31k|}

_Z11ClearShrinkINSt3__16vectorISt4byteNS0_9allocatorIS2_EEEEEvRT_:
   57|  36.8k|{
   58|       |    // There are various ways to clear a vector and release its memory:
   59|       |    //
   60|       |    // 1. V{}.swap(v)
   61|       |    // 2. v = V{}
   62|       |    // 3. v = {}; v.shrink_to_fit();
   63|       |    // 4. v.clear(); v.shrink_to_fit();
   64|       |    //
   65|       |    // (2) does not appear to release memory in glibc debug mode, even if v.shrink_to_fit()
   66|       |    // follows. (3) and (4) rely on std::vector::shrink_to_fit, which is only a non-binding
   67|       |    // request. Therefore, we use method (1).
   68|       |
   69|  36.8k|    V{}.swap(v);
   70|  36.8k|}

